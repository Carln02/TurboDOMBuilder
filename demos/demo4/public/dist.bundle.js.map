{"version":3,"file":"dist.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,SAAS;AACvB;AACA,cAAc,uBAAuB;AACrC;AACA,cAAc,uBAAuB;AACrC,cAAc,uBAAuB;AACrC,cAAc,SAAS;AACvB;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,YAAY;AAC1B;AACA;AACA,cAAc,MAAM;AACpB,cAAc,YAAY;AAC1B;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA,cAAc,kCAAkC;AAChD;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,cAAc,2CAA2C;AACzD;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa;AACb,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA,+CAA+C,uBAAuB;AACtE,cAAc,UAAU;AACxB;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA,8CAA8C,iBAAiB;AAC/D,cAAc,QAAQ;AACtB,cAAc,MAAM;AACpB,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B,cAAc,uBAAuB;AACrC;AACA,cAAc,WAAW;AACzB,cAAc,+DAA+D;AAC7E;AACA,cAAc,QAAQ;AACtB,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA,8CAA8C,sBAAsB;AACpE,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B;;AAEA;AACA,aAAa,QAAQ;AACrB,iGAAiG,oBAAoB;AACrH,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA,oCAAoC,uBAAuB;AAC3D,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,IAAI,wBAAwB;AAC5B,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB,cAAc,iBAAiB;AAC/B,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa;AACb,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA,+CAA+C,uBAAuB;AACtE,cAAc,QAAQ;AACtB,cAAc,MAAM;AACpB,cAAc,qDAAqD;AACnE;AACA,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,iEAAiE,+BAA+B;AAChG;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA,iEAAiE,WAAW;AAC5E,cAAc,yDAAyD;AACvE,cAAc,+EAA+E;AAC7F;AACA,cAAc,kDAAkD;AAChE;AACA,cAAc,4EAA4E;AAC1F;AACA,cAAc,yDAAyD;AACvE;AACA,cAAc,4EAA4E;AAC1F;AACA,cAAc,gEAAgE;AAC9E;AACA,cAAc,0EAA0E;AACxF;AACA,cAAc,UAAU;AACxB,cAAc,SAAS;AACvB;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ,uDAAuD,WAAW;AACxF,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA,yEAAyE,WAAW;AACpF;AACA,cAAc,aAAa;AAC3B;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,UAAU;AACxB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,mBAAmB;AACjC;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA,cAAc,2FAA2F;AACzG;AACA,cAAc,oCAAoC;AAClD,cAAc,oCAAoC;AAClD,cAAc,qBAAqB;AACnC;AACA,cAAc,SAAS;AACvB,cAAc,kBAAkB;AAChC;AACA,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,kBAAkB;AAChC,cAAc,6BAA6B;AAC3C,cAAc,mDAAmD;AACjE;AACA,cAAc,sCAAsC;AACpD;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,6BAA6B;AAC7B,wBAAwB;AACxB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,kBAAkB,MAAM,IAAI;AAC5B,uCAAuC;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,oCAAoC,GAAG;AACrD;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,cAAc,mBAAmB;AACjC;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,qBAAqB;AACnC;AACA,cAAc,oBAAoB;AAClC;AACA,cAAc,iEAAiE;AAC/E,cAAc,oBAAoB;AAClC;AACA,cAAc,qBAAqB;AACnC;AACA;AACA,cAAc,UAAU;AACxB;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,UAAU;AACxB;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,SAAS;AACvB;AACA,cAAc,mBAAmB;AACjC;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,UAAU;AACxB;AACA,cAAc,mBAAmB;AACjC;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA,cAAc,aAAa;AAC3B;AACA,cAAc,SAAS;AACvB;AACA,cAAc,UAAU;AACxB;AACA,cAAc,UAAU;AACxB;AACA;AACA,cAAc,mBAAmB;AACjC;AACA,cAAc,mBAAmB;AACjC;AACA,cAAc,mBAAmB;AACjC;AACA,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,UAAU;AACxB;AACA,cAAc,UAAU;AACxB;AACA;AACA,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,8EAA8E,eAAe;AAC7F,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B,cAAc,uBAAuB;AACrC;AACA,cAAc,WAAW;AACzB,cAAc,+DAA+D;AAC7E;AACA,cAAc,QAAQ;AACtB,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,qBAAqB;AAChC,YAAY,SAAS;AACrB;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,SAAS;AACvB,cAAc,MAAM;AACpB;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,iEAAiE;AAC/E,uBAAuB,cAAc,eAAe,mBAAmB;AACvE,IAAI,SAAS,oBAAoB;AACjC;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE,4CAA4C,0BAA0B;AACtE,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB;AACA,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,uCAAuC;AACtD;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAA8C;AAC7D;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB;AACA,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,SAAS;AACxB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,mBAAmB;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,mBAAmB;AAChC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,mBAAmB;AAChC;AACA,0BAA0B;AAC1B,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,aAAa,wBAAwB;AACrC;AACA,+BAA+B;AAC/B,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,aAAa,qBAAqB;AAClC;AACA,4BAA4B;AAC5B,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,aAAa,sBAAsB;AACnC;AACA,6BAA6B;AAC7B,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,oBAAoB;AACjC;AACA,2BAA2B;AAC3B,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,aAAa,qBAAqB;AAClC;AACA,4BAA4B;AAC5B,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,aAAa,uBAAuB;AACpC;AACA,8BAA8B;AAC9B,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,aAAa,sBAAsB;AACnC;AACA,6BAA6B;AAC7B,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,mBAAmB;AAChC;AACA,0BAA0B;AAC1B,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,aAAa,sBAAsB;AACnC;AACA,6BAA6B;AAC7B,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,aAAa,uBAAuB;AACpC;AACA,8BAA8B;AAC9B,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,aAAa,0BAA0B;AACvC;AACA,iCAAiC;AACjC,qBAAqB,gCAAgC;AACrD;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,aAAa,uBAAuB;AACpC;AACA,8BAA8B;AAC9B,qBAAqB,6BAA6B;AAClD;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,2CAA2C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAqE;AACpF;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,mDAAmD;AACnE;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,aAAa;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uCAAuC,qBAAqB,uCAAuC;AAC5K;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC,cAAc,0BAA0B;AACxC,cAAc,iBAAiB;AAC/B,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,qFAAqF,gGAAgG,iCAAiC,uBAAuB;AAClT,0EAA0E,wEAAwE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,sCAAsC;AACtC;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,6BAA6B;AAChD;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,QAAQ;AAC3B,mBAAmB,6BAA6B;AAChD;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,QAAQ;AAC3B,mBAAmB,6BAA6B;AAChD,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,QAAQ;AAC3B,mBAAmB,6BAA6B;AAChD,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,6BAA6B;AAChD,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,mBAAmB,6BAA6B;AAChD,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,SAAS;AACxB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,2BAA2B;AAC1C;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB,GAAG,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM,GAAG,QAAQ,iBAAiB,wBAAwB;AACjG;AACA;AACA,aAAa;AACb,oCAAoC;AACpC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,+BAA+B;AACjF,4DAA4D;AAC5D,oEAAoE,8EAA8E,yDAAyD,4BAA4B,uBAAuB;AAC9P,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,0EAA0E,wEAAwE;AAClJ;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0EAA0E,uDAAuD,uBAAuB;AACpN,uEAAuE,iFAAiF,qEAAqE,uBAAuB;AACpP,0EAA0E,wEAAwE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAA8D;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,4DAA4D;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,8DAA8D;AACpI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iCAAiC,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,4DAA4D;AACpI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gFAAgF,mEAAmE,uBAAuB;AAChP,gFAAgF,0FAA0F,uFAAuF,uBAAuB;AACxR,wEAAwE,kFAAkF,uEAAuE,uBAAuB;AACxP,uEAAuE,iFAAiF,qEAAqE,uBAAuB;AACpP,sEAAsE,gFAAgF,mEAAmE,uBAAuB;AAChP,6EAA6E,uFAAuF,iFAAiF,uBAAuB;AAC5Q,4EAA4E,sFAAsF,+EAA+E,uBAAuB;AACxQ,0EAA0E,wEAAwE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAqD;AACzE;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,mCAAmC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA,8DAA8D,eAAe;AAC7E;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,8BAA8B;AAC9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B,8BAA8B;AAC3D;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,mFAAmF,8DAA8D,iCAAiC,uBAAuB;AAClR,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,0EAA0E,oFAAoF,+DAA+D,kCAAkC,uBAAuB;AACtR,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,0EAA0E,oFAAoF,+DAA+D,kCAAkC,uBAAuB;AACtR,yEAAyE,mFAAmF,8DAA8D,iCAAiC,uBAAuB;AAClR,kEAAkE,+EAA+E,0FAA0F,8BAA8B,uBAAuB;AAChS,oEAAoE,iFAAiF,8FAA8F,gCAAgC,uBAAuB;AAC1S,sEAAsE,mFAAmF,kGAAkG,kCAAkC,uBAAuB;AACpT,uEAAuE,oFAAoF,oGAAoG,mCAAmC,uBAAuB;AACzT,0EAA0E,wEAAwE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,gBAAgB;AAC3G,2FAA2F,gBAAgB;AAC3G,uFAAuF,gBAAgB;AACvG,+FAA+F,gBAAgB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,gBAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,gCAAgC;AAC9G,8EAA8E,gCAAgC;AAC9G,0EAA0E,gCAAgC;AAC1G,kFAAkF,gCAAgC;AAClH,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,gCAAgC;AAC7G,4EAA4E,gCAAgC;AAC5G,yEAAyE,gCAAgC;AACzG,4EAA4E,gCAAgC;AAC5G,iBAAiB;AACjwCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,eAAe;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,8BAA8B;AAC7C,eAAe,iBAAiB;AAChC;AACA,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2EAA2E;AAC5H;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,8BAA8B;AAC7C,eAAe,iBAAiB;AAChC;AACA,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,8BAA8B;AAC7C,eAAe,mBAAmB;AAClC;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,eAAe,8BAA8B;AAC7C,eAAe,mBAAmB;AAClC;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,eAAe,mBAAmB;AAClC;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,8BAA8B;AAC7C,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,eAAe,8BAA8B;AAC7C,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,2BAA2B;AAC1C,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,SAAS;AACxB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAA6C;AACxE;AACA;AACA,KAAK;AACL;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,qCAAqC;AAC1G,yBAAyB,+CAA+C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E,6BAA6B,uBAAuB;AACpD;AACA,cAAc;AACd,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,uEAAuE,aAAa;AACpF;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0EAA0E,qDAAqD,wBAAwB,uBAAuB;AAC9O,0EAA0E,oFAAoF,+DAA+D,kCAAkC,uBAAuB;AACtR,sEAAsE,gFAAgF,2DAA2D,8BAA8B,uBAAuB;AACtQ,uEAAuE,iFAAiF,4DAA4D,+BAA+B,uBAAuB;AAC1Q,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,0EAA0E,oFAAoF,+DAA+D,kCAAkC,uBAAuB;AACtR,mEAAmE,6EAA6E,wDAAwD,2BAA2B,uBAAuB;AAC1P,+DAA+D,yEAAyE,oDAAoD,uBAAuB,uBAAuB;AAC1O,gEAAgE,0EAA0E,qDAAqD,wBAAwB,uBAAuB;AAC9O,oEAAoE,8EAA8E,yDAAyD,4BAA4B,uBAAuB;AAC9P,6EAA6E,uFAAuF,kEAAkE,qCAAqC,uBAAuB;AAClS,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,iFAAiF,2FAA2F,sEAAsE,yCAAyC,uBAAuB;AAClT,wEAAwE,kFAAkF,6DAA6D,gCAAgC,uBAAuB;AAC9Q,mEAAmE,6EAA6E,wDAAwD,2BAA2B,uBAAuB;AAC1P,0EAA0E,wEAAwE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAA6C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,yEAAyE;AAC5F;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,mBAAmB,gBAAgB;AACnC,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,QAAQ;AAC3B;AACA,mBAAmB,yEAAyE;AAC5F;AACA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,qCAAqC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,2BAA2B,QAAQ,YAAY;AAC/C,YAAY,YAAY,MAAM;AAC9B,uEAAuE,WAAW;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,2BAA2B,QAAQ,qBAAqB;AACxD,YAAY,YAAY,MAAM;AAC9B,uEAAuE,WAAW;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,OAAO,KAAK,MAAM,IAAI,UAAU;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kGAAkG;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACrB;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACrB;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA,CAAC,sBAAsB;;AAEvB;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,eAAe,OAAO;AACtB,eAAe,yCAAyC;AACxD;AACA,iBAAiB,MAAM;AACvB,kBAAkB,0BAA0B;AAC5C,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,eAAe,OAAO;AACtB,eAAe,yCAAyC;AACxD;AACA,iBAAiB,MAAM;AACvB,kBAAkB,0BAA0B;AAC5C,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,eAAe,yCAAyC;AACxD;AACA,iBAAiB,MAAM;AACvB,kBAAkB,0BAA0B;AAC5C,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,2BAA2B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,MAAM;AAC5C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,SAAS;AACxB,eAAe,8BAA8B,UAAU,qBAAqB;AAC5E;AACA,iBAAiB,MAAM;AACvB;AACA,iEAAiE,sBAAsB;AACvF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4EAA4E,YAAY;AACxF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,aAAa,uBAAuB;AACpC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA,mDAAmD,IAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA,oGAAoG,KAAK;AACzG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,eAAe,oBAAoB,qBAAqB;AACnE;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,oCAAoC;AACpC;AACA;AACA,yCAAyC,6BAA6B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D,wCAAwC,0BAA0B;AAClE,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,yCAAyC,iCAAiC;AAC1E;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA,sBAAsB,0CAA0C;AAChE;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA,sBAAsB,gDAAgD;AACtE;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA,sBAAsB,gDAAgD;AACtE;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAA0D;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB,KAAK,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qBAAqB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,kDAAkD,cAAc;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B,cAAc;AACxD;AACA,2BAA2B;AAC3B,mCAAmC,8CAA8C;AACjF;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,+BAA+B,mBAAmB,yBAAyB,sBAAsB,mBAAmB,WAAW,oBAAoB,mBAAmB,SAAS,kBAAkB,qBAAqB,gBAAgB,YAAY;AAClP;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,+CAA+C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wDAAwD,kEAAkE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,6CAA6C,sBAAsB;AACnE,iBAAiB;AACjB;AACA,wDAAwD,oEAAoE;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,6CAA6C;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA,6DAA6D,uEAAuE,kDAAkD,qBAAqB,uBAAuB;AAClO,kEAAkE,4EAA4E,uDAAuD,0BAA0B,uBAAuB;AACtP,4DAA4D,0EAA0E,uDAAuD,uBAAuB;AACpN,yDAAyD,sEAAsE,wEAAwE,qBAAqB,uBAAuB;AACnP,8DAA8D,2EAA2E,kFAAkF,0BAA0B,uBAAuB;AAC5Q,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAuD,MAAM;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6CAA6C,oCAAoC,yEAAyE;AAC1J,yDAAyD,kCAAkC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,0DAA0D,kCAAkC;AAC5F,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,iEAAiE,2EAA2E,sDAAsD,yBAAyB,uBAAuB;AAClP,oEAAoE,8EAA8E,yDAAyD,4BAA4B,uBAAuB;AAC9P,gEAAgE,0EAA0E,qDAAqD,wBAAwB,uBAAuB;AAC9O,oEAAoE,8EAA8E,yDAAyD,4BAA4B,uBAAuB;AAC9P,kEAAkE,4EAA4E,uDAAuD,0BAA0B,uBAAuB;AACtP,4EAA4E,sFAAsF,iEAAiE,oCAAoC,uBAAuB;AAC9R,+DAA+D,4EAA4E,oFAAoF,2BAA2B,uBAAuB;AACjR,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gCAAgC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,iBAAiB;AACjB;AACA;AACA,sEAAsE,gFAAgF,2DAA2D,8BAA8B,uBAAuB;AACtQ,qEAAqE,+EAA+E,0DAA0D,6BAA6B,uBAAuB;AAClQ,8EAA8E,wFAAwF,mEAAmE,sCAAsC,uBAAuB;AACtS,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA,yEAAyE,qBAAqB;AAC9F,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8CAA8C,qBAAqB;AACnE,oDAAoD,qBAAqB;AACzE,gEAAgE,0EAA0E,qDAAqD,wBAAwB,uBAAuB;AAC9O,sEAAsE,gFAAgF,2DAA2D,8BAA8B,uBAAuB;AACtQ,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA,yEAAyE,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C,0BAA0B,eAAe;AACzC,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8DAA8D,wEAAwE,mDAAmD,sBAAsB,uBAAuB;AACtO,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2DAA2D;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAA0C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAsD;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oDAAoD,wBAAwB;AAC5E;AACA,2DAA2D,wBAAwB;AACnF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA,sDAAsD;AACtD,iBAAiB;AACjB,qDAAqD,qBAAqB;AAC1E,iDAAiD,oCAAoC,gCAAgC;AACrH;AACA,wDAAwD;AACxD,iBAAiB;AACjB,+DAA+D,yEAAyE,oDAAoD,uBAAuB,uBAAuB;AAC1O,uEAAuE,iFAAiF,4DAA4D,+BAA+B,uBAAuB;AAC1Q,6DAA6D,0EAA0E,gFAAgF,yBAAyB,uBAAuB;AACvQ,sEAAsE,mFAAmF,kGAAkG,kCAAkC,uBAAuB;AACpT,gEAAgE,6EAA6E,sFAAsF,4BAA4B,uBAAuB;AACtR,iEAAiE,8EAA8E,wFAAwF,6BAA6B,uBAAuB;AAC3R,mEAAmE,gFAAgF,4FAA4F,+BAA+B,uBAAuB;AACrS,mEAAmE,gFAAgF,4FAA4F,+BAA+B,uBAAuB;AACrS,yEAAyE,sFAAsF,wGAAwG,qCAAqC,uBAAuB;AACnU,0EAA0E,wEAAwE;AAClJ;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,gEAAgE;AACnF;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;;AAED,gCAAgC,mBAAmB,cAAc,oBAAoB,8BAA8B,gBAAgB,yBAAyB,sBAAsB,4BAA4B,8BAA8B,0BAA0B,mBAAmB,2BAA2B,2BAA2B,8BAA8B,qBAAqB,kBAAkB,+BAA+B,mBAAmB,aAAa,kBAAkB;AACre;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC,mEAAmE,WAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,mEAAmiBAAiB;AACjB;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,uDAAuD;AACvD;AACA,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C,uDAAuD;AACvD;AACA,iBAAiB;AACjB;AACA,8CAA8C;AAC9C,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,mDAAmD,qBAAqB;AACxE,2DAA2D,qBAAqB;AAChF,4DAA4D,qBAAqB;AACjF,2CAA2C,qDAAqD;AAChG;AACA,oCAAoC,oBAAoB;AACxD,8EAA8E,6BAA6B;AAC3G;AACA;AACA;AACA,iBAAiB;AACjB,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,6CAA6C,uDAAuD;AACpG,iBAAiB;AACjB,8DAA8D,wEAAwE,mDAAmD,sBAAsB,uBAAuB;AACtO,8DAA8D,wEAAwE,mDAAmD,sBAAsB,uBAAuB;AACtO,6DAA6D,uEAAuE,kDAAkD,qBAAqB,uBAAuB;AAClO,qEAAqE,+EAA+E,0DAA0D,6BAA6B,uBAAuB;AAClQ,6EAA6E,uFAAuF,kEAAkE,qCAAqC,uBAAuB;AAClS,8EAA8E,wFAAwF,mEAAmE,sCAAsC,uBAAuB;AACtS,6DAA6D,uEAAuE,kDAAkD,qBAAqB,uBAAuB;AAClO,+DAA+D,yEAAyE,oDAAoD,uBAAuB,uBAAuB;AAC1O,6DAA6D,uEAAuE,kDAAkD,qBAAqB,uBAAuB;AAClO,oEAAoE,8EAA8E,yDAAyD,4BAA4B,uBAAuB;AAC9P,+DAA+D,4EAA4E,oFAAoF,2BAA2B,uBAAuB;AACjR,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO;AAC3E;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO;AAC3E;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO;AAC3E;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO;AAC3E;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,yCAAyC,yCAAyC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,qBAAqB,gCAAgC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;;AAE/C,8CAA8C,cAAc,OAAO,eAAe,MAAM,aAAa,aAAa,cAAc,WAAW,cAAc,eAAe;AACxK;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uDAAuD,oBAAoB,yDAAyD,GAAG;AACvI,yCAAyC,6BAA6B;AACtE;AACA;AACA,0FAA0F,aAAa;AACvG,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,6FAA6F,eAAe;AAC5G,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,wDAAwD,wEAAwE;AAChI;AACA,iBAAiB;AACjB;AACA,wDAAwD,0EAA0E;AAClI;AACA,iBAAiB;AACjB;AACA;AACA,6DAA6D,qBAAqB;AAClF,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4CAA4C,wBAAwB;AACpE,kDAAkD,wBAAwB;AAC1E,qDAAqD,wBAAwB;AAC7E,2DAA2D,wBAAwB;AACnF,uDAAuD,wBAAwB;AAC/E,sEAAsE,gFAAgF,2DAA2D,8BAA8B,uBAAuB;AACtQ,uEAAuE,iFAAiF,4DAA4D,+BAA+B,uBAAuB;AAC1Q,uEAAuE,iFAAiF,4DAA4D,+BAA+B,uBAAuB;AAC1Q,yEAAyE,mFAAmF,8DAA8D,iCAAiC,uBAAuB;AAClR,sEAAsE,gFAAgF,2DAA2D,8BAA8B,uBAAuB;AACtQ,6DAA6D,uEAAuE,iDAAiD,uBAAuB;AAC5M,mEAAmE,6EAA6E,6DAA6D,uBAAuB;AACpO,sEAAsE,gFAAgF,mEAAmE,uBAAuB;AAChP,4EAA4E,sFAAsF,+EAA+E,uBAAuB;AACxQ,wEAAwE,kFAAkF,uEAAuE,uBAAuB;AACxP,yEAAyE,8EAA8E,0FAA0F,8BAA8B,uBAAuB;AACtS,2DAA2D,wEAAwE,4EAA4E,uBAAuB,uBAAuB;AAC7P,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA,oCAAoC,eAAe;AACnD,qCAAqC,cAAc;AACnD;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,+BAA+B;AAC/B;AACA,+BAA+B;AAC/B;AACA,iCAAiC;AACjC;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,8BAA8B;AACvH,qEAAqE;AACrE,2CAA2C,IAAI,eAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D;AACA;AACA,gCAAgC,SAAS,KAAK,aAAa,IAAI,KAAK;AACpE;AACA;AACA,4CAA4C,SAAS;AACrD,6CAA6C,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,8BAA8B;AAC9B,qBAAqB,oDAAoD;AACzE;;AAEA,+BAA+B,qBAAqB,kBAAkB,4BAA4B,sBAAsB,0BAA0B,mBAAmB,aAAa,sBAAsB,gBAAgB,+CAA+C,aAAa,gEAAgE,iCAAiC,kCAAkC,kBAAkB,WAAW,wCAAwC,yBAAyB,mDAAmD,iCAAiC;AACzkB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD,oCAAoC,oEAAoE;AAC5J,4DAA4D,oCAAoC,wEAAwE;AACxK,yDAAyD,oCAAoC,qEAAqE;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0CAA0C;AACtF;AACA,iBAAiB;AACjB,4CAA4C,qCAAqC;AACjF,8EAA8E,wFAAwF,mEAAmE,sCAAsC,uBAAuB;AACtS,2EAA2E,qFAAqF,gEAAgE,mCAAmC,uBAAuB;AAC1R,iEAAiE,2EAA2E,sDAAsD,yBAAyB,uBAAuB;AAClP,8DAA8D,wEAAwE,mDAAmD,sBAAsB,uBAAuB;AACtO,sEAAsE,mFAAmF,kGAAkG,kCAAkC,uBAAuB;AACpT,4DAA4D,yEAAyE,8EAA8E,wBAAwB,uBAAuB;AAClQ,2DAA2D,wEAAwE,4EAA4E,uBAAuB,uBAAuB;AAC7P,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD,iCAAiC;AACjC;AACA;AACA,qBAAqB,gCAAgC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,+DAA+D,4EAA4E,oFAAoF,2BAA2B,uBAAuB;AACjR,6DAA6D,0EAA0E,gFAAgF,yBAAyB,uBAAuB;AACvQ,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,kCAAkC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mEAAmE,6EAA6E,wDAAwD,2BAA2B,uBAAuB;AAC1P,6DAA6D,uEAAuE,kDAAkD,qBAAqB,uBAAuB;AAClO,oDAAoD,mBAAmB,sBAAsB,2DAA2D;AACxJ;AACA,gFAAgF,wEAAwE;AACxJ;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,kCAAkC,uCAAuC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAA2C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wCAAwC;AAClE,0BAA0B,uCAAuC;AACjE,gCAAgC,WAAW,IAAI,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAA+D;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD,WAAW,oDAAoD;AAC/D,WAAW,0CAA0C;AACrD,WAAW,kDAAkD;AAC7D,WAAW,8CAA8C;AACzD,WAAW,yCAAyC;AACpD,WAAW,4CAA4C;AACvD,WAAW,sDAAsD;AACjE,WAAW,0CAA0C;AACrD;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC,wBAAwB,KAAK,aAAa,OAAO;AACjD,mBAAmB,KAAK;AACxB,mBAAmB,KAAK;AACxB,2BAA2B;AAC3B,2BAA2B,MAAM;AACjC,SAAS;AACT;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,qBAAqB,GAAG,UAAU,GAAG,WAAW,EAAE,eAAe;AAChK,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY;AACZ;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,cAAc,uDAAuD;AACrE,WAAW,KAAK;AAChB,WAAW,4CAA4C;AACvD,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,iBAAiB;AAC5B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,uBAAuB;AAClC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAA+C;AAC9D;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,gBAAgB,uBAAuB;AACvC,aAAa,MAAM;AACnB,aAAa,cAAc;AAC3B;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;;AAEA;AACA,gBAAgB,uBAAuB;AACvC,aAAa,MAAM;AACnB,aAAa,cAAc;AAC3B;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA,6BAA6B,KAAK;AAClC;;AAEA;AACA,gBAAgB,uBAAuB;AACvC,aAAa,MAAM;AACnB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,aAAa,MAAM;AACnB,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA,2FAA2F,UAAU,EAAE,mBAAmB;;AAE1H;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,wBAAwB,QAAQ;AAChC;AACA;AACA;;AAEA;AACA,mCAAmC,aAAa;;AAEhD;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;;AAEA;AACA,6FAA6F,8BAA8B;;AAE3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,8BAA8B,QAAQ;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA,sDAAsD,KAAK;;AAE3D;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA,mDAAmD,KAAK;;AAExD;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,QAAQ,MAAM,QAAQ;AACzF,mEAAmE,QAAQ,MAAM,QAAQ;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,sFAAsF;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;;AAEA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ;AACA,kEAAkE,QAAQ;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;;AAEA;AACA;AACA,WAAW,sDAAsD;AACjE,YAAY;AACZ;AACA,iCAAiC,YAAY;;AAE7C;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA,WAAW,IAAI;AACf,YAAY,UAAU,2CAA2C;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,WAAW,oBAAoB;AAC/B;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,oBAAoB;AAC/B,YAAY;AACZ;AACA;;AAEA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mCAAmC;AACnD,WAAW,GAAG;AACd,WAAW,mCAAmC;AAC9C,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,sBAAsB;AACjC,YAAY;AACZ;AACA;;AAEA;AACA,WAAW,oBAAoB;AAC/B,WAAW,oBAAoB;AAC/B,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,YAAY;AACvB;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,GAAG;AACjB;AACA,WAAW,GAAG;AACd,WAAW,aAAa;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,2BAA2B;AAC3B;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD,yBAAyB,wBAAwB;AACjD;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;;AAEA;;;AAGA,WAAW,WAAW;;AAEtB;AACA,WAAW,oBAAoB;AAC/B,YAAY;AACZ;AACA,wDAAwD,IAAI,GAAG,OAAO;AACtE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,6DAA6D;AACxE,YAAY;AACZ;AACA;AACA;AACA,sBAAsB,oCAAoC,eAAe,YAAY;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mDAAmD;AAC9D,YAAY;AACZ;AACA;AACA;AACA;AACA,sBAAsB,oCAAoC,eAAe,YAAY;AACrF;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,8BAA8B;AACzC,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,aAAa;AACxB,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,CAAC;;AAED;AACA;AACA,WAAW,aAAa;AACxB,WAAW,eAAe;AAC1B;AACA;AACA,UAAU,cAAc;AACxB,WAAW;AACX,CAAC;;AAED;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,WAAW;AACtB,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA,wCAAwC,8CAA8C;AACtF;AACA;AACA;AACA,GAAG;;AAEH;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB;AACzE;;AAEA;AACA,WAAW,2BAA2B;AACtC,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB,cAAc,wBAAwB;AACtC,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B,cAAc,KAAK;AACnB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,6BAA6B;AAC3C,cAAc,kDAAkD;AAChE,cAAc,kDAAkD;AAChE,cAAc,oBAAoB;AAClC,cAAc,iCAAiC;AAC/C,cAAc,iCAAiC;AAC/C,cAAc,iCAAiC;AAC/C,cAAc,iCAAiC;AAC/C,cAAc,wCAAwC;AACtD,cAAc,WAAW,sDAAsD,0BAA0B;AACzG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,iBAAiB,2HAA2H,IAAI;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB,cAAc,oBAAoB;AAClC;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,QAAQ;AACR,8CAA8C,MAAM;AACpD;AACA;AACA,sBAAsB,oBAAoB;AAC1C;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA,sBAAsB,aAAa,oBAAoB,GAAG;AAC1D;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C,8BAA8B,qDAAqD;AACnF;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,WAAW,mCAAmC;AAC9C,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;;AAEA;AACA,WAAW,mCAAmC;AAC9C,WAAW,aAAa;AACxB,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD,GAAG;AACH;;AAEA;AACA,WAAW,mCAAmC;AAC9C,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,uCAAuC;AAC3C;AACA;AACA,WAAW,yBAAyB;AACpC,WAAW,0BAA0B;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,WAAW,0BAA0B;AACrC,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,oCAAoC;AACxC;AACA;AACA,WAAW,yBAAyB;AACpC,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;;AAE1D;AACA,WAAW,aAAa;AACxB,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,KAAK;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,WAAW,mCAAmC;AAC9C,WAAW,aAAa;AACxB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,2BAA2B;AACtC,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,uBAAuB;AAClC,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO;AAChB;AACA;AACA,4EAA4E,mBAAmB;AAC/F,qBAAqB,mBAAmB,uDAAuD,MAAM;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB,WAAW,aAAa;AACxB,WAAW,wBAAwB;AACnC;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD,gBAAgB,gBAAgB;AAChC,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAA8C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,qEAAqE;AACpG;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,GAAG;AACvD;AACA;AACA,WAAW,KAAK;AAChB,WAAW,yBAAyB;AACpC,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc,qBAAqB,mEAAmE;AACtG;AACA;AACA;AACA,cAAc,eAAe,+HAA+H;AAC5J;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,YAAY,cAAc,mEAAmE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,yCAAyC,MAAM;AAC/C,cAAc;AACd;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO,8HAA8H;AACjJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mDAAmD,4CAA4C,eAAe,0DAA0D;AACrL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO,kBAAkB,EAAE,cAAc,EAAE,cAAc;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,cAAc;AACd,YAAY;AACZ;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,mBAAmB;AAC9B,YAAY,sBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,0BAA0B;AACrC,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,mBAAmB;AACpF;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,WAAW,aAAa;AACxB,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA,mCAAmC,mBAAmB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,uCAAuC;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,+CAA+C;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,sCAAsC;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,+CAA+C;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,+BAA+B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,wCAAwC;AACnD,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,OAAO;AAClB,WAAW,4EAA4E;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kMAAkM,YAAY;AAC9M;AACA;AACA;AACA,gLAAgL,KAAK;AACrL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,WAAW,oEAAoE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,oEAAoE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,+IAA+I,4BAA4B;AAC3K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,WAAW,mEAAmE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,WAAW,UAAU;AACrB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,WAAW,sBAAsB,2BAA2B;AAC5D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,KAAK;AAC9D;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,6DAA6D;AAC7E,aAAa,UAAU;AACvB,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,oEAAoE,KAAK;AACzE,OAAO;AACP,MAAM;AACN,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,KAAK;AAChE,OAAO;AACP,MAAM;AACN,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gCAAgC;AAC7C,cAAc,UAAU;AACxB;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;;AAEA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,aAAa;AAC1B,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA,KAAK,WAAW,kBAAkB;AAClC;AACA,KAAK;AACL;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,4DAA4D,KAAK;AACjE;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,4DAA4D,KAAK;AACjE;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,4DAA4D,KAAK,qBAAqB,KAAK;AAC3F;;AAEA;AACA;AACA;AACA,aAAa,6CAA6C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,cAAc;AACd;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D,OAAO;AACP,MAAM;AACN,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,MAAM;AACN,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,WAAW;AACxB,aAAa,QAAQ;AACrB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,eAAe;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,sBAAsB;AACjC,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,eAAe,4CAA4C,eAAe;AAC9H;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,WAAW,iBAAiB;AAC5B,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,UAAU,aAAa;AACvB;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;AACjC,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4HAA4H,eAAe,qDAAqD,eAAe,sCAAsC;AAC3P;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,sBAAsB;AACjC,WAAW,oBAAoB;AAC/B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,sBAAsB;AACjC,WAAW,iCAAiC;AAC5C,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,6EAA6E,QAAQ;AACrF,QAAQ,qBAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,mBAAmB;AAC9B,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa,aAAa,eAAe;AAC3D;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB,WAAW,WAAW;AACtB,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa,aAAa,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+DAA+D,eAAe;AAC9E;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA,oCAAoC,MAAM;AAC1C;AACA,uCAAuC,KAAK;AAC5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6CAA6C,OAAO,mEAAmE,OAAO;AAC9H;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,eAAe,MAAM;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA,WAAW,iCAAiC,cAAc;AAC1D,WAAW,iBAAiB;AAC5B,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA,aAAa,mDAAmD,4CAA4C,eAAe,0DAA0D;AACrL;AACA;AACA;AACA;AACA,iBAAiB,mDAAmD,4CAA4C,eAAe,mFAAmF;AAClN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA,QAAQ,kDAAkD;AAC1D;AACA,YAAY,OAAO,yGAAyG;AAC5H;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK;AAChC;AACA,gBAAgB,OAAO,yGAAyG;AAChI;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+BAA+B;AAC/B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa,aAAa,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,eAAe;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAK;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,aAAa;AAC3B;AACA,aAAa,YAAY;AACzB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB,IAAI;AAC7C;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA,YAAY;AACZ,iFAAiF;AACjF,YAAY;AACZ;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,uCAAuC;AACpD,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kBAAkB;AAClB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,iBAAiB;AACzH;AACA,gBAAgB;AAChB;AACA;AACA,sGAAsG,eAAe;AACrH;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB,MAAM;AACnE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,eAAe;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oBAAoB;AACxE;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,4BAA4B;AACzC,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB,6EAA6E;AAC/G;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,YAAY,SAAS;AACrB;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,4BAA4B;AACzC,aAAa,qCAAqC;AAClD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,mCAAmC,MAAM;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAA+C;AAC7D;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,4CAA4C,KAAK;AACjD,gFAAgF;AAChF;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA,QAAQ,4DAA4D,aAAa;AACjF;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa,kBAAkB,KAAK;AACpC;AACA;;AAEA;AACA,yBAAyB,kBAAkB,MAAM,gBAAgB;AACjE,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qCAAqC;AAClD;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,aAAa,cAAc;AAC3B,cAAc,2CAA2C;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,aAAa,qBAAqB,SAAS;AAC3C;AACA,aAAa,KAAK;AAClB;AACA;AACA,cAAc,MAAM,KAAK;AACzB;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gCAAgC;AAC7C,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,yDAAyD;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,mEAAmE;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B,MAAM,uBAAuB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA,0BAA0B,sBAAsB,eAAe,aAAa;AAC5E;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA,0BAA0B,sBAAsB,eAAe,aAAa;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA,KAAK,YAAY,kBAAkB;AACnC;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS,EAAE,YAAY,GAAG,iBAAiB,IAAI,SAAS;AACvE;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,aAAa,KAAK;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,aAAa,KAAK;AAClB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,gBAAgB,8CAA8C;AAC9D;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,aAAa,qBAAqB,SAAS;AAC3C;AACA,aAAa,KAAK;AAClB;AACA;AACA,cAAc,MAAM,KAAK;AACzB;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,kBAAkB;AAC/B;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,IAAI;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,eAAe;AAC5B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,gBAAgB;AAC7B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,qBAAqB;AAChC;AACA,oDAAoD,sEAAsE;;AAE1H;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,YAAY;AACzB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,cAAc;AAC3B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,eAAe;AAC5B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,YAAY;AACzB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,eAAe;AAC5B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gBAAgB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,aAAa;AAC1B,aAAa,WAAW;AACxB,aAAa,aAAa;AAC1B,aAAa,WAAW;AACxB,aAAa,2BAA2B;AACxC,aAAa,eAAe;AAC5B,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,aAAa;AAC1B,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA,UAAU;AACV,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,eAAe,OAAO,KAAK,MAAM,KAAK,KAAK,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd,YAAY,iGAAiG;AAC7G;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA,UAAU;AACV,yBAAyB,mBAAmB;AAC5C,WAAW,WAAW,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,0DAA0D,mBAAmB;AAC7E,sBAAsB,mBAAmB,8CAA8C,mBAAmB;AAC1G;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,UAAU;AACV,0CAA0C;AAC1C;AACA;AACA,QAAQ,0CAA0C;AAClD,uCAAuC;AACvC;AACA,QAAQ;AACR,wCAAwC;AACxC;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA,iDAAiD;;AAEjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,sEAAsE;AACjF;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,gDAAgD;AAC3D,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEuhF;;;;;;;;;;;;;;;;;;;ACpxnBvhF;AACgH;AACjB;AAC/F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,OAAO,+EAA+E,UAAU,YAAY,aAAa,aAAa,cAAc,aAAa,aAAa,aAAa,cAAc,aAAa,aAAa,cAAc,aAAa,aAAa,YAAY,UAAU,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,QAAQ,KAAK,YAAY,aAAa,cAAc,WAAW,aAAa,aAAa,aAAa,OAAO,KAAK,UAAU,UAAU,YAAY,aAAa,OAAO,KAAK,UAAU,UAAU,UAAU,OAAO,KAAK,YAAY,WAAW,UAAU,OAAO,KAAK,YAAY,WAAW,YAAY,WAAW,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,YAAY,aAAa,aAAa,iCAAiC,sBAAsB,qFAAqF,6CAA6C,+CAA+C,4CAA4C,sCAAsC,yCAAyC,2CAA2C,+CAA+C,8BAA8B,4BAA4B,mCAAmC,wDAAwD,yDAAyD,qBAAqB,4BAA4B,2BAA2B,0BAA0B,wBAAwB,+BAA+B,6BAA6B,2BAA2B,KAAK,kBAAkB,gDAAgD,iDAAiD,yBAAyB,sBAAsB,gCAAgC,kCAAkC,uCAAuC,KAAK,WAAW,kBAAkB,mBAAmB,2BAA2B,oDAAoD,KAAK,qBAAqB,uBAAuB,sBAAsB,uBAAuB,KAAK,2BAA2B,0BAA0B,oBAAoB,qBAAqB,KAAK,iBAAiB,2BAA2B,uBAAuB,0BAA0B,eAAe,gBAAgB,4CAA4C,yCAAyC,oCAAoC,KAAK,mBAAmB,4CAA4C,yCAAyC,oCAAoC,KAAK,mBAAmB;AACvlF;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACpFvC;AACmH;AACjB;AAClG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,4FAA4F,YAAY,OAAO,KAAK,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,UAAU,UAAU,YAAY,aAAa,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,aAAa,WAAW,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,cAAc,aAAa,aAAa,YAAY,UAAU,UAAU,YAAY,aAAa,OAAO,KAAK,UAAU,UAAU,YAAY,cAAc,aAAa,aAAa,aAAa,aAAa,OAAO,KAAK,UAAU,UAAU,0CAA0C,2BAA2B,KAAK,8CAA8C,sBAAsB,+BAA+B,6BAA6B,4BAA4B,KAAK,0DAA0D,oBAAoB,qBAAqB,2CAA2C,yBAAyB,KAAK,kDAAkD,0BAA0B,KAAK,wCAAwC,2BAA2B,yBAAyB,kBAAkB,oCAAoC,KAAK,0BAA0B,0CAA0C,KAAK,4DAA4D,mCAAmC,2CAA2C,+CAA+C,wCAAwC,sBAAsB,2BAA2B,sBAAsB,+BAA+B,8BAA8B,KAAK,oDAAoD,qBAAqB,sBAAsB,+BAA+B,+BAA+B,gCAAgC,gCAAgC,2BAA2B,mCAAmC,KAAK,gEAAgE,oBAAoB,qBAAqB,KAAK,2BAA2B;AACljE;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACvEvC;AACgH;AACjB;AAC/F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,OAAO,oFAAoF,UAAU,UAAU,OAAO,KAAK,YAAY,aAAa,OAAO,KAAK,UAAU,OAAO,KAAK,YAAY,aAAa,aAAa,OAAO,KAAK,YAAY,OAAO,KAAK,YAAY,+CAA+C,oBAAoB,qBAAqB,KAAK,mCAAmC,mCAAmC,8BAA8B,KAAK,oCAAoC,sBAAsB,KAAK,mCAAmC,oCAAoC,8BAA8B,yCAAyC,KAAK,yCAAyC,kCAAkC,KAAK,oCAAoC,mCAAmC,KAAK,mBAAmB;AACp1B;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACjCvC;AACmH;AACjB;AAClG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,OAAO,oFAAoF,UAAU,YAAY,aAAa,aAAa,cAAc,aAAa,aAAa,aAAa,OAAO,KAAK,UAAU,UAAU,YAAY,OAAO,KAAK,UAAU,YAAY,aAAa,OAAO,KAAK,YAAY,aAAa,OAAO,KAAK,YAAY,aAAa,sCAAsC,sBAAsB,4BAA4B,4BAA4B,8BAA8B,kCAAkC,6CAA6C,2CAA2C,wCAAwC,KAAK,gCAAgC,oBAAoB,qBAAqB,0CAA0C,KAAK,oCAAoC,sBAAsB,+BAA+B,6BAA6B,KAAK,iCAAiC,4BAA4B,6BAA6B,KAAK,mCAAmC,iCAAiC,4BAA4B,KAAK,mBAAmB;AACzmC;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACvCvC;AACmH;AACjB;AAClG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gGAAgG,UAAU,YAAY,aAAa,aAAa,cAAc,WAAW,YAAY,aAAa,cAAc,aAAa,aAAa,aAAa,OAAO,KAAK,YAAY,aAAa,aAAa,OAAO,KAAK,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,UAAU,YAAY,WAAW,OAAO,KAAK,UAAU,YAAY,WAAW,YAAY,aAAa,6CAA6C,sBAAsB,+BAA+B,4BAA4B,gCAAgC,yCAAyC,wBAAwB,yBAAyB,yBAAyB,gDAAgD,+CAA+C,wCAAwC,oCAAoC,KAAK,iDAAiD,yCAAyC,8BAA8B,wCAAwC,KAAK,uDAAuD,sBAAsB,4BAA4B,+BAA+B,+DAA+D,KAAK,uDAAuD,qBAAqB,sCAAsC,qBAAqB,KAAK,oDAAoD,sBAAsB,+BAA+B,uBAAuB,+BAA+B,6CAA6C,KAAK,2BAA2B;AACzoD;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACnDvC;AACmH;AACjB;AAClG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,OAAO,0FAA0F,UAAU,YAAY,aAAa,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,OAAO,KAAK,YAAY,aAAa,aAAa,OAAO,KAAK,UAAU,MAAM,KAAK,YAAY,WAAW,MAAM,KAAK,UAAU,wCAAwC,sBAAsB,4BAA4B,8BAA8B,kCAAkC,2CAA2C,+CAA+C,wCAAwC,+BAA+B,4BAA4B,8BAA8B,oCAAoC,KAAK,2BAA2B,iCAAiC,0CAA0C,yCAAyC,KAAK,kEAAkE,mBAAmB,KAAK,mCAAmC,yCAAyC,mBAAmB,KAAK,2BAA2B,oBAAoB,KAAK,mBAAmB;AACrqC;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;ACxC1B;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,gDAAgD;AAChD;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACpFa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACfa;;AAEb;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACnFa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;ACjCa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;ACTa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;AACjF;AACA;AACA;AACA;AACA,gD;;;;;;;;;;ACTa;;AAEb;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wB;;;;;;;;;;AC5Da;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;;;ACbA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA,MAAqG;AACrG,MAA2F;AAC3F,MAAkG;AAClG,MAAqH;AACrH,MAA8G;AAC9G,MAA8G;AAC9G,MAAwG;AACxG;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,qFAAO;;;;AAIkD;AAC1E,OAAO,iEAAe,qFAAO,IAAI,qFAAO,UAAU,qFAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvB7E,MAAwG;AACxG,MAA8F;AAC9F,MAAqG;AACrG,MAAwH;AACxH,MAAiH;AACjH,MAAiH;AACjH,MAA+G;AAC/G;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,yFAAO;;;;AAIyD;AACjF,OAAO,iEAAe,yFAAO,IAAI,yFAAO,UAAU,yFAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;ACxB7E,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACgF;AAChF;AACA;AACA,sBAAsB,kEAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,uEAAW;AAC3C,iCAAiC,uEAAW;AAC5C,iCAAiC,uEAAW;AAC5C,kCAAkC,uEAAW;AAC7C,yDAAyD,sEAAsE,wEAAwE,qBAAqB,uBAAuB;AACnP,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,2DAA2D,wEAAwE,4EAA4E,uBAAuB,uBAAuB;AAC7P,wEAAwE,wEAAwE;AAChJ,SAAS;AACT;AACA,CAAC;AACwB;;;;;;;;;;;;;;;;AC3E8C;AAChE,gCAAgC,sEAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACVA,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,8CAA8C,yEAAyE;AACvH;AACsH;AACvE;AACE;AACzB;AACiC;AACzD;AACA,4BAA4B,kEAAM;AAClC;AACA;AACA;AACA,sBAAsB,oEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uEAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAM;AACpC,iCAAiC,qEAAS;AAC1C,uDAAuD,wEAAwE,4EAA4E,uBAAuB,uBAAuB;AACzP,0DAA0D,2EAA2E,kFAAkF,0BAA0B,uBAAuB;AACxQ,gDAAgD,mBAAmB,sBAAsB,2DAA2D;AACpJ;AACA,4EAA4E,wEAAwE;AACpJ;AACA,KAAK;AACL;AACA,CAAC;AACmB;AACb,iCAAiC;AACxC;AACA;AACA;AACA,0BAA0B,wDAAY;AACtC;AACA,2BAA2B,0DAAa;AACxC;AACA,gCAAgC,kEAAiB;AACjD,WAAW,mEAAO;AAClB;;;;;;;;;;;;;;;;;;ACxHA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmI;AAC/F;AACS;AAC7C;AACA;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAM,GAAG,MAAM,4DAAI,uCAAuC,YAAY;AACpG,8BAA8B,uEAAW,GAAG,yBAAyB;AACrE,mCAAmC,uEAAW;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB,iEAAK;AACrB;AACA;AACA;AACA;AACA,gBAAgB,iEAAK,UAAU,wEAAgB;AAC/C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAK;AACzB,oBAAoB,iEAAK,yBAAyB,wEAAgB;AAClE;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gBAAgB,iEAAK,6BAA6B,+DAAG;AACrD,mBAAmB,oBAAoB;AACvC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,oBAAoB,iEAAK;AACzB;AACA;AACA,gBAAgB,iEAAK;AACrB;AACA,+CAA+C,qDAAW,iDAAiD,gDAAI,GAAG,2BAA2B;AAC7I;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,8DAAM;AAC7C,sCAAsC,8DAAM;AAC5C,0CAA0C,8DAAM;AAChD,uCAAuC,8DAAM;AAC7C,8DAA8D,8EAA8E,+DAA+D,uBAAuB;AAClO,6DAA6D,6EAA6E,6DAA6D,uBAAuB;AAC9N,iEAAiE,iFAAiF,qEAAqE,uBAAuB;AAC9O,8DAA8D,8EAA8E,+DAA+D,uBAAuB;AAClO,wEAAwE,wEAAwE;AAChJ,SAAS;AACT;AACA,CAAC;AACuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtHxB,MAAqG;AACrG,MAA2F;AAC3F,MAAkG;AAClG,MAAqH;AACrH,MAA8G;AAC9G,MAA8G;AAC9G,MAA6G;AAC7G;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,0FAAO;;;;AAIuD;AAC/E,OAAO,iEAAe,0FAAO,IAAI,0FAAO,UAAU,0FAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvB7E,MAAwG;AACxG,MAA8F;AAC9F,MAAqG;AACrG,MAAwH;AACxH,MAAiH;AACjH,MAAiH;AACjH,MAA2G;AAC3G;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,qFAAO;;;;AAIqD;AAC7E,OAAO,iEAAe,qFAAO,IAAI,qFAAO,UAAU,qFAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;ACxB7E,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACwF;AACxF;AACA;AACA,sBAAsB,kEAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,uEAAW;AACzC,iCAAiC,uEAAW;AAC5C,kCAAkC,uEAAW;AAC7C,iCAAiC,uEAAW;AAC5C,iCAAiC,uEAAW;AAC5C,oCAAoC,uEAAW;AAC/C,iCAAiC,8DAAM;AACvC,uDAAuD,oEAAoE,oEAAoE,mBAAmB,uBAAuB;AACzO,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,2DAA2D,wEAAwE,4EAA4E,uBAAuB,uBAAuB;AAC7P,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,6DAA6D,0EAA0E,gFAAgF,yBAAyB,uBAAuB;AACvQ,0DAA0D,uEAAuE,0EAA0E,sBAAsB,uBAAuB;AACxP,wEAAwE,wEAAwE;AAChJ,SAAS;AACT;AACA,CAAC;AACoB;;;;;;;;;;;;;;;;;;AC7FyE;AACrD;AACO;AACzC,iCAAiC,uEAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,wDAAQ;AACjF;AACA,iCAAiC,wDAAQ;AACzC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,QAAQ,iEAAK,yBAAyB,uCAAuC;AAC7E;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAS;AACpC,yCAAyC,wDAAQ,SAAS,qEAAa;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC,+BAA+B;AAC/B;AACA,YAAY,iEAAK,gDAAgD,qBAAqB,MAAM,qBAAqB;AACjH;AACA;;;;;;;;;;;;;;;;;;;;;AC7CA,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,8CAA8C,yEAAyE;AACvH;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AAC8F;AACvD;AACE;AACrB;AACuC;AAC3D;AACA;AACA,4BAA4B,kEAAM;AAClC;AACA;AACA;AACA,sBAAsB,oEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB;AACxB,sBAAsB;AACtB,2BAA2B;AAC3B,uBAAuB;AACvB,4BAA4B;AAC5B,sBAAsB;AACtB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAM;AAChC,6BAA6B,kEAAM;AACnC,8BAA8B,kEAAM;AACpC,6BAA6B,kEAAM;AACnC,yDAAyD,uEAAuE,oEAAoE,mBAAmB,uBAAuB;AAC9O,4DAA4D,0EAA0E,0EAA0E,sBAAsB,uBAAuB;AAC7P,6DAA6D,2EAA2E,4EAA4E,uBAAuB,uBAAuB;AAClQ,4DAA4D,0EAA0E,0EAA0E,sBAAsB,uBAAuB;AAC7P,gDAAgD,mBAAmB,sBAAsB,2DAA2D;AACpJ;AACA,4EAA4E,wEAAwE;AACpJ;AACA,KAAK;AACL;AACA,CAAC;AACe;AACT,6BAA6B;AACpC;AACA;AACA;AACA,0BAA0B,gDAAQ;AAClC;AACA,2BAA2B,kDAAS;AACpC;AACA,kCAAkC,oEAAkB;AACpD,WAAW,mEAAO;AAClB;;;;;;;;;;;;;;;ACnIO;AACP;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;ACJ/B,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+G;AACtE;AACzC;AACA;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAG,GAAG,2CAA2C;AAC9E,6BAA6B,8DAAE,GAAG,uBAAuB;AACzD,8BAA8B,8DAAE,GAAG,wBAAwB;AAC3D,gCAAgC,8DAAE,GAAG,0BAA0B;AAC/D;AACA;AACA;AACA,gBAAgB,iEAAK;AACrB;AACA,oBAAoB,mEAAO,GAAG,qCAAqC;AACnE,oBAAoB,kEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ,GAAG,QAAQ;AAClE;AACA;AACA,gBAAgB,iEAAK,gDAAgD,kDAAS;AAC9E;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,8DAAM;AAC7C,uCAAuC,8DAAM;AAC7C,wCAAwC,8DAAM;AAC9C,0CAA0C,8DAAM;AAChD,uCAAuC,8DAAM;AAC7C,8DAA8D,8EAA8E,+DAA+D,uBAAuB;AAClO,8DAA8D,8EAA8E,+DAA+D,uBAAuB;AAClO,+DAA+D,+EAA+E,iEAAiE,uBAAuB;AACtO,iEAAiE,iFAAiF,qEAAqE,uBAAuB;AAC9O,8DAA8D,8EAA8E,+DAA+D,uBAAuB;AAClO,wEAAwE,wEAAwE;AAChJ,SAAS;AACT;AACA,CAAC;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGpB,MAAwG;AACxG,MAA8F;AAC9F,MAAqG;AACrG,MAAwH;AACxH,MAAiH;AACjH,MAAiH;AACjH,MAAiH;AACjH;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,2FAAO;;;;AAI2D;AACnF,OAAO,iEAAe,2FAAO,IAAI,2FAAO,UAAU,2FAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;;;;ACxB7E,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,8CAA8C,yEAAyE;AACvH;AACkG;AAC/C;AACzB;AAC1B;AACA,4BAA4B,kEAAM;AAClC;AACA;AACA;AACA,sBAAsB,oEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB,sBAAsB,2DAA2D;AACpJ;AACA,4EAA4E,wEAAwE;AACpJ;AACA,KAAK;AACL;AACA,CAAC;AACqB;AACf,mCAAmC;AAC1C;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA,2BAA2B,kEAAU;AACrC,WAAW,mEAAO;AAClB;;;;;;;;;;;;;;;;;ACrEyH;AACrF;AAC7B,6BAA6B,iEAAS;AAC7C;AACA;AACA,sBAAsB,sEAAU,GAAG,8BAA8B,4CAA4C;AAC7G,qBAAqB,+DAAG,GAAG,kCAAkC;AAC7D,0BAA0B,mEAAW;AACrC;AACA;AACA;AACA,qCAAqC,iEAAK;AAC1C,SAAS;AACT;AACA;AACA,mDAAmD,gDAAI,GAAG,aAAa;AACvE;AACA;AACA;AACA,QAAQ,iEAAK;AACb;AACA;AACA;AACA,QAAQ,iEAAK,iBAAiB,wEAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA,MAAwG;AACxG,MAA8F;AAC9F,MAAqG;AACrG,MAAwH;AACxH,MAAiH;AACjH,MAAiH;AACjH,MAA8G;AAC9G;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;AACrC,iBAAiB,uGAAa;AAC9B,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,wFAAO;;;;AAIwD;AAChF,OAAO,iEAAe,wFAAO,IAAI,wFAAO,UAAU,wFAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;;;;ACxB7E,oBAAoB,SAAI,IAAI,SAAI;AAChC,yBAAyB,uFAAuF;AAChH;AACA;AACA,2GAA2G;AAC3G;AACA,wCAAwC,QAAQ;AAChD;AACA,kEAAkE;AAClE;AACA,gDAAgD,yFAAyF;AACzI,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,SAAI,IAAI,SAAI;AACrC;AACA,8CAA8C,yEAAyE;AACvH;AACuB;AACsE;AAC7F;AACA,4BAA4B,kEAAM;AAClC;AACA;AACA;AACA,sBAAsB,oEAAY;AAClC;AACA;AACA,YAAY,iEAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB,sBAAsB,2DAA2D;AACpJ;AACA,4EAA4E,wEAAwE;AACpJ;AACA,KAAK;AACL;AACA,CAAC;AACkB;AACZ;AACP;AACA;AACA,WAAW,mEAAO,iBAAiB;AACnC;;;;;;;;;;;;;;;;ACnEqE;AAC9D,yBAAyB,iEAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACZsE;AAC/D,+BAA+B,kEAAU;AAChD;AACA;;;;;;;;;;;;;;;;;;ACHoG;AAC7C;AACJ;AAC5C,8BAA8B,iEAAS;AAC9C;AACA;AACA;AACA,yBAAyB,iEAAS;AAClC;AACA;AACA,QAAQ,iEAAK;AACb;AACA;AACA,QAAQ,iEAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,iEAAK,6BAA6B,4DAAQ;AAClD;AACA,uBAAuB,uEAAW;AAClC,oCAAoC,gEAAgB;AACpD;AACA;AACA;AACA,SAAS;AACT,QAAQ,gEAAgB;AACxB;AACA;;;;;;;;;;;;;;;;AC5B4E;AACrE,yBAAyB,iEAAS;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAK;AACb;AACA;AACA,QAAQ,iEAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UClBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;WCNA,mC;;;;;;;;;;;;;;;;;;;;;ACAqD;AACwC;AACzE;AACK;AACmB;AAC2B;AACE;AACjB;AACZ;AACY;AACxD,iEAAS;AACT,yEAAiB;AACjB,iBAAiB,+DAAG,GAAG,qCAAqC;AAC5D,kBAAkB,yDAAO,GAAG,uBAAuB;AACnD,kBAAkB,gEAAI,GAAG,uBAAuB,iEAAU,EAAE;AAC5D,wBAAwB,gEAAI,GAAG,6BAA6B,gFAAe,SAAS,kFAAgB,EAAE;AACtG;AACA;AACA,kBAAkB,gEAAI,GAAG,sBAAsB,iEAAU,EAAE;AAC3D,qDAAW,yBAAyB,kEAAU,GAAG,6BAA6B","sources":["webpack:///../../build/turbodombuilder.esm.js","webpack:///./src/main.css","webpack:///./src/playlist/playlist.css","webpack:///./src/scrollbar.css","webpack:///./src/song/song.css","webpack:///./src/songsPanel/songsPanel.css","webpack:///./src/toolbar/toolbar.css","webpack:///../../node_modules/css-loader/dist/runtime/api.js","webpack:///../../node_modules/css-loader/dist/runtime/sourceMaps.js","webpack:///../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../../node_modules/style-loader/dist/runtime/insertBySelector.js","webpack:///../../node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack:///../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack:///../../node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack:///../../node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack:///./src/dataHandler.ts","webpack:///./src/main.css?ba31","webpack:///./src/playlist/playlist.css?5c0d","webpack:///./src/playlist/playlist.model.ts","webpack:///./src/playlist/playlist.substrate.ts","webpack:///./src/playlist/playlist.ts","webpack:///./src/playlist/playlist.view.ts","webpack:///./src/scrollbar.css?d79c","webpack:///./src/song/song.css?fb6c","webpack:///./src/song/song.model.ts","webpack:///./src/song/song.moveInteractor.ts","webpack:///./src/song/song.ts","webpack:///./src/song/song.types.ts","webpack:///./src/song/song.view.ts","webpack:///./src/songsPanel/songsPanel.css?3d81","webpack:///./src/songsPanel/songsPanel.ts","webpack:///./src/songsPanel/songsPanel.view.ts","webpack:///./src/toolbar/toolbar.css?d8c2","webpack:///./src/toolbar/toolbar.ts","webpack:///./src/tools/delete/delete.tool.ts","webpack:///./src/tools/newPlaylist/newPlaylist.model.ts","webpack:///./src/tools/newPlaylist/newPlaylist.tool.ts","webpack:///./src/tools/select/select.tool.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/nonce","webpack:///./src/index.ts"],"sourcesContent":["/**\n * @typedef {Object} AutoOptions\n * @template Type\n * @description Options for configuring the `@auto` decorator.\n * @property {boolean} [cancelIfUnchanged=true] - If true, cancels the setter if the new value is the same as the\n * current value. Defaults to `true`.\n * @property {(value: Type) => Type} [preprocessValue] - Optional callback to execute on the value and preprocess it\n * just before it is set. The returned value will be stored.\n * @property {(value: Type) => void} [callBefore] - Optional function to call before preprocessing and setting the value.\n * @property {(value: Type) => void} [callAfter] - Optional function to call after setting the value.\n * @property {boolean} [setIfUndefined] - If true, will fire the setter when the underlying value is `undefined` and\n * the program is trying to access it (maybe through its getter).\n * @property {boolean} [returnDefinedGetterValue] - If true and a custom getter is defined, the return value of this\n * getter will be returned when accessing the property. Otherwise, the underlying saved value will always be returned.\n * Defaults to `false`.\n * @property {boolean} [executeSetterBeforeStoring] - If true, when setting the value, the setter will execute first,\n * and then the value will be stored. In this case, accessing the value in the setter will return the previous value.\n * Defaults to `false`.\n * @property {Type} [defaultValue] - If defined, whenever the underlying value is `undefined` and trying to be\n * accessed, it will be set to `defaultValue` through the setter before getting accessed.\n * @property {() => Type} [defaultValueCallback] - If defined, whenever the underlying value is `undefined` and\n * trying to be accessed, it will be set to the return value of `defaultValueCallback` through the setter before\n * getting accessed.\n * @property {Type} [initialValue] - If defined, on initialization, the property will be set to `initialValue`.\n * @property {() => Type} [initialValueCallback] - If defined, on initialization, the property will be set to the\n * return value of `initialValueCallback`.\n */\n\n/**\n * @typedef {Object} CacheOptions\n * @description Options for configuring the `@cache` decorator.\n *\n * Defines when and how cached values should expire, refresh, or invalidate.\n * These options apply equally to cached **methods**, **getters**, and **accessors**.\n *\n * @property {number} [timeout]\n *  Duration in milliseconds after which the cached value automatically expires.\n *  Useful for time-based caching where values should refresh periodically.\n *\n * @property {string | string[]} [onEvent]\n *  One or more event names (space-separated string or array) that, when fired on the instance,\n *  immediately clear the cache.\n *  This allows integration with custom event systems or reactive models.\n *\n * @property {() => boolean | Promise<boolean>} [onCallback]\n *  Function (sync or async) periodically called to decide whether to invalidate the cache.\n *  If it returns `true`, the cache is cleared.\n *\n * @property {number} [onCallbackFrequency]\n *  Frequency in milliseconds at which `onCallback` should be executed.\n *  Ignored if `onCallback` is not provided.\n *\n * @property {string | Function | (string | Function)[]} [onFieldChange]\n *  One or more property names or methods to watch for changes.\n *  Whenever any of these fields or functions change, the cache for the decorated member is cleared.\n *  Can be a string, a function reference, or an array of both.\n *\n * @property {boolean} [clearOnNextFrame]\n *  If `true`, clears the cache automatically on the **next animation frame** (or equivalent microtask fallback).\n *  Useful when the cached value is only valid for the current render/update cycle.\n */\n\n/**\n * @typedef {Object} TurboControllerProperties\n * @extends {TurboViewProperties}\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description  Options used to create a new {@link TurboController} attached to an element.\n * @property {ViewType} [view] - The MVC view.\n */\n\n/**\n * @typedef {Object} TurboToolProperties\n * @extends TurboControllerProperties\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Options used to create a new {@link TurboTool} attached to an element.\n * @property {string} [toolName] - The name of the tool.\n * @property {Node} [embeddedTarget] - If the tool is embedded, its target.\n * @property {() => void} [onActivate] - Function to execute when the tool is activated.\n * @property {() => void} [onDeactivate] - Function to execute when the tool is deactivated.\n * @property {DefaultEventNameEntry} [activationEvent] - Custom activation event to listen to. Defaults to the\n * default click event name.\n * @property {ClickMode} [clickMode] -  Click mode that will hold this tool when activated. Defaults to `ClickMode.left`.\n * @property {(element: Turbo<Element>, manager: TurboEventManager) => void} [customActivation] - Custom activation\n * function. If provided, is called with `(el, manager)` to define when the tool is activated.\n * @property {string} [key] - Optional keyboard key to map to this tool. When pressed, it will be set as the current key tool.\n * @property {TurboEventManager} [manager] - The event manager instance this tool should register against. Defaults\n * to `TurboEventManager.instance`.\n */\n\n/**\n * @typedef {Object} TurboSubstrateProperties\n * @extends TurboControllerProperties\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Options used to create a new {@link TurboSubstrate} attached to an element.\n * @property {string} [substrateName] - The name of the substrate.\n * @property {() => void} [onActivate] - Function to execute when the tool is activated.\n * @property {() => void} [onDeactivate] - Function to execute when the tool is deactivated.\n */\n\n/**\n * @typedef {Object} MakeSubstrateOptions\n * @description Type representing objects used to configure the creation of substrates. Used in {@link makeSubstrate}.\n * @property {() => void} [onActivate] - Callback function to execute when the substrate is activated.\n * @property {() => void} [onDeactivate] - Callback function to execute when the substrate is deactivated.\n */\n\n/**\n * @typedef {Object} SubstrateSolverProperties\n * @description Type representing objects passed as context for resolving substrates. GIven as first parameters to\n * solvers when executing them via {@link resolveSubstrate}.\n * @property {string} [substrate] - The targeted substrate. Defaults to `currentSubstrate`.\n * @property {object} [target] - The current object being processed by the solver. Property set by\n * {@link resolveSubstrate} when processing every object in the substrate's list.\n * @property {Event} [event] - The event (if any) that fired the resolving of the substrate.\n * @property {string} [eventType] - The type of the event.\n * @property {Node} [eventTarget] - The target of the event.\n * @property {string} [toolName] - The name of the active tool when the event was fired.\n * @property {ListenerOptions} [eventOptions] - The options of the event.\n * @property {TurboEventManager} [manager] - The event manager that captured the event. Defaults to the first\n * instantiated event manager.\n */\n\n/**\n * @typedef {Object} SubstrateSolver\n * @description Type representing the signature of solver functions that substrates expect.\n */\n\n/**\n * @typedef {Object} TurboHeadlessProperties\n * @template {TurboView} ViewType - The element's view type, if initializing MVC.\n * @template {object} DataType - The element's data type, if initializing MVC.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if initializing MVC.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if initializing MVC.\n * @description Object containing properties for configuring a headless (non-HTML) element, with possibly MVC properties.\n */\n\n/**\n * @typedef {Object} TurboInteractorProperties\n * @extends {TurboControllerProperties}\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description  Options used to create a new {@link TurboInteractor} attached to an element.\n * @property {string} [toolName] - The name of the tool (if any) that the event listeners will listen for.\n * @property {Node} [target] - The target that will listen for the events.\n * @property {PartialRecord<DefaultEventNameKey, ListenerOptions>} [listenerOptions] - Custom options to define per\n * event type.\n * @property {TurboEventManager} [manager] - The event manager instance this tool should register against. Defaults\n * to `TurboEventManager.instance`.\n */\n\n/**\n * @typedef {Object} MvcInstanceOrConstructor\n * @template Type\n * @template PropertiesType\n * @description Type representing the constructor of a certain `Type` (which takes a single parameter), or an\n * instance of `Type`.\n */\n\n/**\n * @typedef {Object} MvcManyInstancesOrConstructors\n * @template Type\n * @template PropertiesType\n * @description Type representing a single entry or an array of {@link MvcInstanceOrConstructor}.\n */\n\n/**\n * @typedef {Object} MvcGenerationProperties\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {object} DataType - The element's data type, if any.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Type representing a configuration object for an {@link Mvc} instance.\n * @property {MvcInstanceOrConstructor<ViewType, TurboViewProperties>} [view] - The view (or view constructor) to attach.\n * @property {ModelType | (new (data?: any, dataBlocksType?: \"map\" | \"array\") => ModelType)} [model] - The model\n * (or model constructor) to attach.\n * @property {MvcInstanceOrConstructor<EmitterType, ModelType>} [emitter] - The emitter (or emitter constructor) to\n * attach. If not defined, a default TurboEmitter will be created.\n * @property {MvcManyInstancesOrConstructors<TurboController, TurboControllerProperties>} [controllers] - The\n * controller, constructor of controller, or array of the latter, to attach.\n * @property {MvcManyInstancesOrConstructors<TurboHandler, ModelType>} [handlers] - The\n * handler, constructor of handler, or array of the latter, to attach.\n * @property {MvcManyInstancesOrConstructors<TurboInteractor, TurboInteractorProperties>} [interactors] - The\n * interactor, constructor of interactor, or array of the latter, to attach.\n * @property {MvcManyInstancesOrConstructors<TurboTool, TurboToolProperties>} [tools] - The\n * tool, constructor of tool, or array of the latter, to attach.\n * @property {MvcManyInstancesOrConstructors<TurboSubstrate, TurboSubstrateProperties>} [substrates] - The\n * substrate, constructor of substrate, or array of the latter, to attach.\n * @property {DataType} [data] - The data to attach to the model.\n * @property {boolean} [initialize] - Whether to initialize the MVC pieces after setting them or not. Defaults to true.\n */\n\n/**\n * @typedef {Object} MvcProperties\n * @template {object} ElementType - The type of the element attached to the {@link Mvc} object.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {object} DataType - The element's data type, if any.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Type of the properties object used for instantiating an {@link Mvc} object.\n * @extends MvcGenerationProperties\n * @property {ElementType} [element] - The element to attach to the Mvc instance.\n */\n\n/**\n * @typedef {Object} ElementTagDefinition\n * @description Represents an element's definition of its tag and its namespace (both optional).\n *\n * @property {string} [tag=\"div\"] - The HTML tag of the element (e.g., \"div\", \"span\", \"input\"). Defaults to \"div.\"\n * @property {string} [namespace] - The namespace of the element. Defaults to HTML. If \"svgManipulation\" or \"mathML\"\n * is provided, the corresponding namespace will be used to create the element. Otherwise, the custom namespace\n * provided will be used.\n */\n\n/**\n * @typedef {Object} TurboProperties\n * @template {ValidTag} Tag - The HTML (or other) tag of the element, if passing it as a property. Defaults to \"div\".\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {object} DataType - The element's data type, if any.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Object containing properties for configuring an Element. A tag (and\n * possibly a namespace) can be provided for element creation. Already-created elements will ignore these\n * properties if set.\n * Any HTML attribute can be passed as key to be processed by the class/function. The type has the following\n * described custom properties:\n *\n * @property {string} [id] - The ID of the element.\n * @property {string | string[]} [classes] - The CSS class(es) to apply to the element (either a string of\n * space-separated classes or an array of class names).\n * @property {string} [style] - The inline style of the element. Use the css literal function for autocompletion.\n * @property {string} [stylesheet] - The associated stylesheet (if any) with the element. Declaring this property will\n * generate automatically a new style element in the element's corresponding root. Use the css literal function\n * for autocompletion.\n * @property {Record<string, EventListenerOrEventListenerObject | ((e: Event, el: Element) => boolean)>} [listeners]\n * - An object containing event listeners to be applied to this element.\n * @property {(e: Event, el: Element) => boolean} [onClick] - Click event listener.\n * @property {(e: Event, el: Element) => boolean} [onDrag] - Drag event listener.\n * @property {Element | Element[]} [children] - An array of child wrappers or elements to append to\n * the created element.\n * @property {Element} [parent] - The parent element to which the created element will be appended.\n * @property {string | Element} [out] - If defined, declares (or sets) the element in the parent as a field with the\n * given value as key.\n * @property {string} [text] - The text content of the element (if any).\n * @property {boolean} [shadowDOM] - If true, indicate that the element will be created under a shadow root.\n */\n\n/**\n * @typedef {Object} StylesRoot\n * @description A type that represents entities that can hold a <style> object (Shadow root or HTML head).\n */\n\n/**\n * @typedef {Object} StylesType\n * @description A type that represents the types that are accepted as styles entries (mainly by the HTMLElement.setStyles()\n * method). It includes strings, numbers, and records of CSS attributes to strings or numbers.\n */\n\n/**\n * @typedef {Object} SignalEntry\n * @template Type\n * @description Type that represents a base signal object.\n * @property {function(): Type} get - Retrieve the signal value.\n * @property {function(value: Type): void} set - Set the signal value.\n * @property {function(updater: (previous: Type) => Type): void} update - Set the value using a pure updater based\n * on the previous value.\n * @property {(fn: SignalSubscriber) => () => void} sub - Subscribe to change notifications. Returns an unsubscribe\n * function.\n * @property {() => void} emit - Force a notification cycle without changing the value (useful after in-place\n * mutation of structural data).\n *\n * @example\n * ```ts\n * const count: SignalEntry<number> = makeSignal(0);\n * const unsub = count.sub(() => console.log(\"count:\", count.get()));\n * count.set(1); // logs \"count: 1\"\n * count.update(c => c+1); // logs \"count: 2\"\n * unsub();\n * ```\n */\n\n/**\n * @typedef {Object} SignalBox\n * @template Type\n * @description A signal entry that is also usable like its underlying primitive/object.\n *\n * ### Interop Notes\n * - `toJSON()` returns the raw value.\n * - `valueOf()` returns the raw value.\n * - `Symbol.toPrimitive(hint)`:\n *    - `\"number\"` → numeric coercion from the inner value\n *    - `\"string\"` or `\"default\"` → string coercion from the inner value\n * - The `value` getter/setter mirrors `get()`/`set()` for ergonomic usage.\n *\n * @example\n * ```ts\n * const count: SignalBox<number> = signal(0);\n *\n * // Read\n * console.log(count.get()); // 0\n * console.log(count.value); // 0\n * console.log(+count); // 0\n *\n * // Write\n * count.set(5);\n * count.value = 6;\n * count.update(v => v + 1); // 7\n *\n * // JSON / string\n * console.log(`${count}`); // \"7\"\n * console.log(JSON.stringify(count)); // 7\n *\n * // Reactivity\n * const unsub = count.sub(() => console.log(\"changed to\", count.get()));\n * count.set(8); // triggers subscriber\n * unsub();\n * ```\n */\n\n/**\n * @typedef {Object} TurboElementProperties\n * @extends TurboProperties\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {object} DataType - The element's data type, if any.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n *\n * @description Object containing properties for configuring a custom HTML element. Is basically TurboProperties\n * without the tag.\n */\n\n/**\n * @typedef {Object} TurboIconProperties\n * @description Properties object that extends TurboElementProperties with properties specific to icons.\n * @extends TurboProperties\n *\n * @property {string} icon - The name of the icon.\n * @property {string} [iconColor] - The color of the icon.\n * @property {((svgManipulation: SVGElement) => {})} [onLoaded] - Custom function that takes an SVG element to execute on the\n * SVG icon (if it is one) once it is loaded. This property will be disregarded if the icon is not of type SVG.\n *\n * @property {string} [type] - Custom type of the icon, overrides the default type assigned to\n * TurboIcon.config.type (whose default value is \"svgManipulation\").\n * @property {string} [directory] - Custom directory to the icon, overrides the default directory assigned to\n * TurboIcon.config.directory.\n * @property {boolean} [unsetDefaultClasses] - Set to true to not add the default classes specified in\n * TurboIcon.config.defaultClasses to this instance of Icon.\n */\n\n/**\n * @typedef {Object} TurboIconConfig\n * @description Configuration object for the Icon class. Set it via TurboConfig.Icon.\n *\n * @property {string} [type] - The default type to assign to newly created Icons. Defaults to \"svgManipulation\".\n * @property {string} [[path]] - The default path to the directory containing the icons in the project. Specify the\n * directory once here to not type it again at every Icon generation.\n * @property {string | string[]} [defaultClasses] - The default classes to assign to newly created icons.\n */\n\n/**\n * @typedef {Object} TurboRichElementProperties\n * @description Properties object for configuring a Button. Extends TurboElementProperties.\n * @extends TurboProperties\n *\n * @property {string} [text] - The text to set to the rich element's main element.\n *\n * @property {Element | Element[]} [leftCustomElements] - Custom elements\n * to be placed on the left side of the button (before the left icon).\n * @property {string | TurboIcon} [leftIcon] - An icon to be placed on the left side of the button text. Can be a\n * string (icon name/path) or an Icon instance.\n * @property {string | TurboProperties<ElementTag> | ValidElement<ElementTag>} [buttonText] - The text content of the button.\n * @property {string | TurboIcon} [rightIcon] - An icon to be placed on the right side of the button text. Can be a\n * string (icon name/path) or an Icon instance.\n * @property {Element | Element[]} [rightCustomElements] - Custom elements\n * to be placed on the right side of the button (after the right icon).\n *\n * @property {ValidTag} [customTextTag] - The HTML tag to be used for the buttonText element (if the latter is passed as\n * a string). If not specified, the default text tag specified in the Button class will be used.\n * @property {boolean} [unsetDefaultClasses] - Set to true to not add the default classes specified in TurboConfig.Button\n * to this instance of Button.\n *\n * @template {ValidTag} ElementTag=\"p\"\n */\n\n/**\n * @typedef {Object} TurboRichElementConfig\n * @description Configuration object for the Button class. Set it via TurboConfig.Button.\n *\n * @property {HTMLTag} [defaultElementTag] - The default HTML tag for the creation of the text\n * element in the button.\n * @property {string | string[]} [defaultClasses] - The default classes to assign to newly created buttons.\n */\n\n/**\n * @typedef {Object} TurboButtonConfig\n * @description Configuration object for the Button class. Set it via TurboConfig.Button.\n *\n * @property {ValidTag} [defaultElementTag] - The default HTML tag for the creation of the text\n * element in the button.\n * @property {string | string[]} [defaultClasses] - The default classes to assign to newly created buttons.\n */\n\n/**\n * @typedef {Object} TurboDropdownProperties\n * @description Properties for configuring a Dropdown.\n * @extends TurboProperties\n *\n * @property {(string | HTMLElement)} [selector] - Element or descriptor used as the dropdown selector. If a\n * string is passed, a Button with the given string as text will be assigned as the selector.\n * @property {HTMLElement} [popup] - The element used as a container for the dropdown entries.\n *\n * @property {boolean} [multiSelection=false] - Enables selection of multiple dropdown entries.\n *\n * @property {ValidTag} [customSelectorTag] - Custom HTML tag for the selector's text. Overrides the\n * default tag set in TurboConfig.Dropdown.\n * @property {ValidTag} [customEntryTag] - Custom HTML tag for dropdown entries.  Overrides the\n * default tag set in TurboConfig.Dropdown.\n *\n * @property {string | string[]} [customSelectorClasses] - Custom CSS class(es) for the selector. Overrides the default\n * classes set in TurboConfig.Dropdown.\n * @property {string | string[]} [customPopupClasses] - Custom CSS class(es) for the popup container. Overrides the\n * default classes set in TurboConfig.Dropdown.\n * @property {string | string[]} [customEntriesClasses] - Custom CSS class(es) for dropdown entries.  Overrides the\n * default classes set in TurboConfig.Dropdown.\n * @property {string | string[]} [customSelectedEntriesClasses] - Custom CSS class(es) for selected entries.  Overrides\n * the default classes set in TurboConfig.Dropdown.\n */\n\n/**\n * @typedef {Object} TurboDropdownConfig\n * @description Configuration object for the Dropdown class. Set it via TurboConfig.Dropdown.\n *\n * @property {ValidTag} [defaultEntryTag] - The default HTML tag for the creation of generic\n * dropdown entries.\n * @property {ValidTag} [defaultSelectorTag] - The default HTML tag for the creation of the text\n * element in generic selectors (which are Buttons).\n *\n * @property {string | string[]} [defaultSelectorClasses] - The default classes to assign to the selector.\n * @property {string | string[]} [defaultPopupClasses] - The default classes to assign to the popup element.\n * @property {string | string[]} [defaultEntriesClasses] - The default classes to assign to the dropdown entries.\n * @property {string | string[]} [defaultSelectedEntriesClasses] - The default classes to assign to the selected\n * dropdown entries.\n */\n\n/**\n * @typedef {Object} ChildHandler\n * @description A type that represents all entities that can hold and manage children (an element or a shadow root).\n */\n\n/**\n * @typedef {Object} MakeToolOptions\n * @description Options used to create a new tool attached to an element via {@link makeTool}.\n * @property {() => void} [onActivate] - Function to execute when the tool is activated.\n * @property {() => void} [onDeactivate] - Function to execute when the tool is deactivated.\n * @property {DefaultEventNameEntry} [activationEvent] - Custom activation event to listen to. Defaults to the\n * default click event name.\n * @property {ClickMode} [clickMode] -  Click mode that will hold this tool when activated. Defaults to `ClickMode.left`.\n * @property {(element: Turbo<Element>, manager: TurboEventManager) => void} [customActivation] - Custom activation\n * function. If provided, is called with `(el, manager)` to define when the tool is activated.\n * @property {string} [key] - Optional keyboard key to map to this tool. When pressed, it will be set as the current key tool.\n * @property {TurboEventManager} [manager] - The event manager instance this tool should register against. Defaults\n * to `TurboEventManager.instance`.\n */\n\n/**\n * @typedef {Object} ToolBehaviorCallback\n * @description Function signature for a tool behavior. Returning `true` marks the behavior as handled/consumed,\n * leading to stopping the propagation of the event.\n * @param {Event} event - The original DOM/Turbo event.\n * @param {Node} target - The node the behavior should operate on (the object or its embedded target).\n * @param {ToolBehaviorOptions} [options] - Additional info (embedded context, etc.).\n * @return {boolean} - Whether to stop the propagation.\n */\n\n/**\n * @typedef {Object} ToolBehaviorOptions\n * @description Options object passed to tool behaviors at execution time.\n * @property {boolean} [isEmbedded] - Indicates if the tool is embedded in a target node.\n * @property {Node} [embeddedTarget] - The target of the tool, if it is embedded.\n */\n\n/**\n * @typedef {Object} FontProperties\n * @description An object representing a local font, or a family of fonts.\n *\n * @property {string} name - The name of the font. The font's filename should also match.\n * @property {string} pathOrDirectory - The path to the local font file, or the path to the local font family's directory.\n * @property {Record<string, string> | Record<number, Record<string, string>>} [weight] - If loading a single font, a\n * record in the form {weight: style}. Defaults to {\"normal\": \"normal\"}. If loading a family, a record in the form\n * {weight: {fontSubName: style}}, such that every font file in the family is named in the form fontName-fontSubName.\n * Defaults to an object containing common sub-names and styles for weights from 100 to 900.\n * @property {string} [format] - The format of the font. Defaults to \"woff2\".\n * @property {string} [extension] - The extension of the font file(s). Defaults to \".ttf\".\n */\n\n/**\n * @internal\n */\nclass AutoUtils {\n    constructorMap = new WeakMap();\n    constructorData(target) {\n        let obj = this.constructorMap.get(target);\n        if (!obj) {\n            obj = { installed: new Map() };\n            this.constructorMap.set(target, obj);\n        }\n        return obj;\n    }\n}\n\nfunction getFirstDescriptorInChain(object, key) {\n    let currentObject = object;\n    while (currentObject && currentObject !== HTMLElement.prototype) {\n        const descriptor = Object.getOwnPropertyDescriptor(currentObject, key);\n        if (descriptor)\n            return descriptor;\n        currentObject = Object.getPrototypeOf(currentObject);\n    }\n    return undefined;\n}\nfunction hasPropertyInChain(object, key) {\n    let currentObject = object;\n    while (currentObject && currentObject !== HTMLElement.prototype) {\n        if (Object.prototype.hasOwnProperty.call(currentObject, key))\n            return true;\n        currentObject = Object.getPrototypeOf(currentObject);\n    }\n    return false;\n}\nfunction getFirstPrototypeInChainWith(object, key) {\n    let currentObject = Object.getPrototypeOf(object);\n    while (currentObject && currentObject !== HTMLElement.prototype) {\n        const descriptor = Object.getOwnPropertyDescriptor(currentObject, key);\n        if (descriptor)\n            return currentObject;\n        currentObject = Object.getPrototypeOf(currentObject);\n    }\n    return undefined;\n}\nfunction getSuperMethod(object, key, wrapperFn) {\n    let currentObject = Object.getPrototypeOf(object);\n    while (currentObject && currentObject !== HTMLElement.prototype) {\n        const descriptor = Object.getOwnPropertyDescriptor(currentObject, key);\n        const fn = descriptor?.value ?? descriptor?.get ?? descriptor?.set;\n        if (typeof fn === \"function\" && fn !== wrapperFn)\n            return fn;\n        currentObject = Object.getPrototypeOf(currentObject);\n    }\n    return undefined;\n}\n\nfunction isNull(value) {\n    return value == null && value != undefined;\n}\nfunction isUndefined(value) {\n    return typeof value == \"undefined\";\n}\n\nconst utils$a = new AutoUtils();\n/**\n * @decorator\n * @function auto\n * @description Stage-3 decorator that augments fields, getters, setters, and accessors. Useful to quickly create a setter\n * and only define additional functionality on set. The decorator takes an optional object as parameter to configure\n * it, allowing you to, among other things:\n * - Preprocess the value when it is set,\n * - Specify callbacks to call before/after the value is set,\n * - Define a default value to return instead of `undefined` when calling the getter, and\n * - Fire the setter when the underlying value is `undefined`.\n *\n * *Note: If you want to chain decorators, place `@auto` closest to the property to ensure it runs first and sets\n * up the accessor for other decorators.*\n *\n * @param {AutoOptions} [options] - Options object to define custom behaviors.\n *\n * @example\n * ```ts\n * @auto() public set color(value: string) {\n *    this.style.backgroundColor = value;\n * }\n * ```\n *Is equivalent to:\n * ```ts\n * private _color: string;\n * public get color(): string {\n *    return this._color;\n * }\n *\n * public set color(value: string) {\n *    this._color = value;\n *    this.style.backgroundColor = value;\n * }\n * ```\n */\nfunction auto(options) {\n    return function (value, context) {\n        if (!options)\n            options = {};\n        const { kind, name, static: isStatic } = context;\n        const key = name;\n        const backing = Symbol(`__auto_${key}`);\n        context.addInitializer(function () {\n            const prototype = isStatic ? this : getFirstPrototypeInChainWith(this, key);\n            let customGetter;\n            let customSetter;\n            const write = function (value) {\n                options.callBefore?.call(this, value);\n                let next = options?.preprocessValue ? options.preprocessValue.call(this, value) : value;\n                if ((options.cancelIfUnchanged ?? true) && this[backing] === next)\n                    return;\n                if (options.executeSetterBeforeStoring && customSetter)\n                    customSetter.call(this, next);\n                this[backing] = next;\n                if (!options.executeSetterBeforeStoring && customSetter)\n                    customSetter.call(this, next);\n                options.callAfter?.call(this, next);\n            };\n            let undefinedFlag = false;\n            const baseRead = function () {\n                return customGetter && options?.returnDefinedGetterValue ? customGetter.call(this) : this[backing];\n            };\n            const read = function () {\n                let value = baseRead.call(this);\n                if (!undefinedFlag && !options.returnDefinedGetterValue && isUndefined(value)) {\n                    undefinedFlag = true;\n                    if (options.defaultValue)\n                        value = options.defaultValue;\n                    else if (options.defaultValueCallback)\n                        value = options.defaultValueCallback.call(this);\n                    else if (!options.setIfUndefined)\n                        return value;\n                    write.call(this, value);\n                    value = baseRead.call(this);\n                    undefinedFlag = false;\n                }\n                return value;\n            };\n            if (isUndefined(this[backing])) {\n                let initialValue = kind === \"field\" ? value : undefined;\n                if (isUndefined(initialValue)) {\n                    if (options.initialValue)\n                        initialValue = options.initialValue;\n                    else if (options.initialValueCallback)\n                        initialValue = options.initialValueCallback.call(this);\n                }\n                if (!isUndefined(initialValue) && options.preprocessValue)\n                    initialValue = options.preprocessValue.call(this, initialValue);\n                this[backing] = initialValue;\n            }\n            if (kind === \"field\" || kind === \"accessor\") {\n                const accessor = value;\n                if (accessor?.get)\n                    customGetter = accessor.get;\n                if (accessor?.set)\n                    customSetter = accessor.set;\n                const descriptor = getFirstDescriptorInChain(this, key);\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor?.enumerable ?? true,\n                    get: () => read.call(this),\n                    set: (value) => write.call(this, value),\n                });\n            }\n            else if (kind === \"getter\" || kind === \"setter\") {\n                const installed = utils$a.constructorData(prototype).installed;\n                if (installed.get(key))\n                    return;\n                installed.set(key, true);\n                const descriptor = getFirstDescriptorInChain(prototype, key) ?? {};\n                if (typeof descriptor.get === \"function\")\n                    customGetter = descriptor.get;\n                if (typeof descriptor.set === \"function\")\n                    customSetter = descriptor.set;\n                Object.defineProperty(prototype, key, {\n                    configurable: true,\n                    enumerable: !!descriptor?.enumerable,\n                    get: function () { return read.call(this); },\n                    set: function (value) { write.call(this, value); },\n                });\n            }\n        });\n    };\n}\n\n/**\n * @class TurboSelector\n * @template {object} Type - The type of the object it wraps.\n * @description Selector class that wraps an object and augments it with useful functions to manipulate it. It also\n * proxies the object, so you can access properties and methods on the underlying object directly through the selector.\n */\nclass TurboSelector {\n    /**\n     * @description The underlying, wrapped object.\n     */\n    element;\n    #generateProxy() {\n        return new Proxy(this, {\n            get(target, prop, receiver) {\n                if (prop in target)\n                    return Reflect.get(target, prop, receiver);\n                const value = target.element?.[prop];\n                return typeof value === \"function\" ? value.bind(target.element) : value;\n            },\n            set(target, prop, value, receiver) {\n                if (prop in target)\n                    return Reflect.set(target, prop, value, receiver);\n                target.element[prop] = value;\n                return true;\n            },\n            has(target, prop) {\n                return prop in target || prop in target.element;\n            },\n            ownKeys(target) {\n                return Array.from([...Reflect.ownKeys(target), ...Reflect.ownKeys(target.element)]);\n            },\n            getOwnPropertyDescriptor(target, prop) {\n                return Reflect.getOwnPropertyDescriptor(target, prop)\n                    || Object.getOwnPropertyDescriptor(target.element, prop)\n                    || undefined;\n            }\n        });\n    }\n    constructor() {\n        return this.#generateProxy();\n    }\n}\n\nclass HierarchyFunctionsUtils {\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {});\n        return this.dataMap.get(element);\n    }\n}\n\nconst utils$9 = new HierarchyFunctionsUtils();\nfunction setupHierarchyFunctions() {\n    //Readonly fields\n    /**\n     * @description The child handler object associated with the node. It is the node itself (if it is handling\n     * its children) or its shadow root (if defined). Set it to change the node where the children are added/removed/\n     * queried from when manipulating the node's children.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"childHandler\", {\n        set: function (value) {\n            if (value instanceof TurboSelector)\n                value = value.element;\n            utils$9.data(this).childHandler = value;\n        },\n        get: function () {\n            const childHandler = utils$9.data(this).childHandler;\n            if (childHandler)\n                return childHandler;\n            if (this.element instanceof Element && this.element.shadowRoot)\n                return this.element.shadowRoot;\n            return this.element;\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Static array of all the child nodes of the node.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"childNodesArray\", {\n        get: function () {\n            if (!this.element)\n                return [];\n            return Array.from(this.childHandler?.childNodes) || [];\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Static array of all the child elements of the node.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"childrenArray\", {\n        get: function () {\n            return this.childNodesArray.filter((node) => node.nodeType === 1);\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Static array of all the sibling nodes (including the node itself) of the node.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"siblingNodes\", {\n        get: function () {\n            const parent = this.element?.parentNode;\n            if (!parent)\n                return [];\n            return $(parent).childNodesArray || [];\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Static array of all the sibling elements (including the element itself, if it is one) of the node.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"siblings\", {\n        get: function () {\n            const parent = this.element?.parentElement;\n            if (!parent)\n                return [];\n            return $(parent).childrenArray || [];\n        },\n        configurable: false,\n        enumerable: true\n    });\n    //Self manipulation\n    TurboSelector.prototype.bringToFront = function _bringToFront() {\n        const parent = this.element?.parentNode;\n        if (!parent)\n            return this;\n        $(parent).addChild(this.element);\n        return this;\n    };\n    TurboSelector.prototype.sendToBack = function _sendToBack() {\n        const parent = this.element?.parentNode;\n        if (!parent)\n            return this;\n        $(parent).addChild(this.element, 0);\n        return this;\n    };\n    /**\n     * @description Removes the node from the document.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.remove = function _remove() {\n        this.element?.parentNode?.removeChild(this.element);\n        return this;\n    };\n    //Child manipulation\n    /**\n     * @description Add one or more children to the referenced parent node.\n     * @param {Node | Node[]} [children] - Array of (or single) child nodes.\n     * @param {number} [index] - The position at which to add the child relative to the parent's child list.\n     * Leave undefined to add the child at the end.\n     * @param {Node[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * use as computation reference for index placement. Defaults to the node's `childrenArray`.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.addChild = function _addChild(children, index, referenceList = this.childrenArray) {\n        if (!this.element || !children)\n            return this;\n        if (index !== undefined && (index < 0 || index > referenceList.length))\n            index = undefined;\n        if (index != undefined)\n            this.addChildBefore(children, referenceList[index]);\n        else\n            try {\n                // Try to append every provided child (according to its type)\n                if (!Array.isArray(children))\n                    children = [children];\n                children.forEach((child) => {\n                    if (!child)\n                        return;\n                    if (child instanceof TurboSelector)\n                        child = child.element;\n                    this.childHandler.appendChild(child);\n                    //TODO\n                    // if (child[\"__outName\"] && !this[child[\"__outName\"]]) this[child[\"__outName\"]] = child;\n                });\n            }\n            catch (e) {\n                console.error(e);\n            }\n        return this;\n    };\n    /**\n     * @description Remove one or more children from the referenced parent node.\n     * @param {Node | Node[]} [children] - Array of (or single) child nodes.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.remChild = function _remChild(children) {\n        if (!this.element || !children)\n            return this;\n        // Try to remove every provided child (according to its type)\n        try {\n            if (!Array.isArray(children))\n                children = [children];\n            children.forEach(child => {\n                if (!child)\n                    return;\n                if (child instanceof TurboSelector)\n                    child = child.element;\n                this.childHandler.removeChild(child);\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return this;\n    };\n    /**\n     * @description Add one or more children to the referenced parent node before the provided sibling. If the\n     * sibling is not found in the parent's children, the nodes will be added to the end of the parent's child list.\n     * @param {Node | Node[]} [children] - Array of (or single) child nodes to insert before sibling.\n     * @param {Node} [sibling] - The sibling node to insert the children before.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.addChildBefore = function _addChildBefore(children, sibling) {\n        if (!this.element || !children)\n            return this;\n        if (!sibling)\n            return this.addChild(children);\n        // Try to append every provided child (according to its type)\n        try {\n            if (!Array.isArray(children))\n                children = [children];\n            children.forEach((child) => {\n                if (!child)\n                    return;\n                if (child instanceof TurboSelector)\n                    child = child.element;\n                this.childHandler.insertBefore(child, sibling);\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return this;\n    };\n    /**\n     * @description Remove one or more child nodes from the referenced parent node.\n     * @param {number} [index] - The index of the child(ren) to remove.\n     * @param {number} [count=1] - The number of children to remove.\n     * @param {Node[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * use as computation reference for index placement and count. Defaults to the node's `childrenArray`.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeChildAt = function _removeChildAt(index, count = 1, referenceList = this.childrenArray) {\n        if (!this.element || index === undefined || index < 0)\n            return this;\n        if (index >= referenceList.length)\n            return this;\n        // Try to remove every provided child (according to its type)\n        try {\n            for (let i = index + count - 1; i >= index; i--) {\n                if (i >= referenceList.length)\n                    continue;\n                this.removeChild(referenceList[i]);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return this;\n    };\n    /**\n     * @description Remove all children of the node.\n     * @param {Node[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * representing all the nodes to remove. Defaults to the node's `childrenArray`.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeAllChildren = function _removeAllChildren(referenceList = this.childrenArray) {\n        if (!this.element)\n            return this;\n        try {\n            for (let i = 0; i < referenceList.length; i++)\n                this.removeChild(referenceList[i]);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return this;\n    };\n    //Child identification\n    /**\n     * @description Returns the child of the parent node at the given index. Any number inputted (including negatives)\n     * will be reduced modulo length of the list size.\n     * @param {number} [index] - The index of the child to retrieve.\n     * @param {Node[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * use as computation reference for index placement. Defaults to the node's `childrenArray`.\n     * @returns {Node | Element | null} The child at the given index, or `null` if the index is invalid.\n     */\n    TurboSelector.prototype.childAt = function _childAt(index, referenceList = this.childrenArray) {\n        if (!this.element || index === undefined)\n            return null;\n        if (index >= referenceList.length)\n            index = referenceList.length - 1;\n        while (index < 0)\n            index += referenceList.length;\n        return referenceList[index];\n    };\n    /**\n     * @description Returns the index of the given child.\n     * @param {Node} [child] - The child element to find.\n     * @param {Node[] | Element[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * use as computation reference for index placement. Defaults to the node's `childrenArray`.\n     * @returns {number} The index of the child node in the provided list, or -1 if the child is not found.\n     */\n    TurboSelector.prototype.indexOfChild = function _indexOfChild(child, referenceList = this.childrenArray) {\n        if (!this.element || !child)\n            return -1;\n        if (!(referenceList instanceof Array))\n            referenceList = Array.from(referenceList);\n        return referenceList.indexOf(child);\n    };\n    /**\n     * @description Identify whether one or more children belong to this parent node.\n     * @param {Node | Node[]} [children] - Array of (or single) child nodes.\n     * @returns {boolean} A boolean indicating whether the provided nodes belong to the parent or not.\n     */\n    TurboSelector.prototype.hasChild = function _hasChild(children) {\n        if (!this.element || !children)\n            return false;\n        const nodesArray = Array.from(this.element?.childNodes);\n        if (children instanceof Node)\n            return nodesArray.includes(children);\n        for (const child of children) {\n            if (!nodesArray.includes(child))\n                return false;\n        }\n        return true;\n    };\n    /**\n     * Finds the closest ancestor of the current element (or the current element itself) that matches the provided\n     * CSS selector or element type.\n     * @param {ValidTag | (new (...args: any[]) => Element)} type - The (valid) CSS selector string, or element\n     * constructor/class to match.\n     * @returns {Element | null} The matching ancestor element, or null if no match is found.\n     */\n    TurboSelector.prototype.closest = function _closest(type) {\n        if (!this.element || !type || !(this.element instanceof Element))\n            return null;\n        if (typeof type === \"string\") {\n            return this.element.closest(type);\n        }\n        else if (typeof type === \"function\") {\n            let element = this.element;\n            while (element && !(element instanceof type))\n                element = element.parentElement;\n            return element || null;\n        }\n        return null;\n    };\n    //Parent identification\n    /**\n     * @description Finds whether this node is within the given parent(s).\n     * @param {Node | Node[]} [parents] - The parent(s) to check.\n     * @returns {boolean} True if the node is within the given parents, false otherwise.\n     */\n    TurboSelector.prototype.findInParents = function _findInParents(parents) {\n        if (!parents || !this.element)\n            return false;\n        if (parents instanceof Node)\n            parents = [parents];\n        let element = this.element;\n        let count = 0;\n        while (element && count < parents.length) {\n            if (parents.includes(element))\n                count++;\n            element = element.parentNode;\n        }\n        return count === parents.length;\n    };\n    /**\n     * @description Finds whether one or more children belong to this node.\n     * @param {Node | Node[]} [children] - The child or children to check.\n     * @returns {boolean} True if the children belong to the node, false otherwise.\n     */\n    TurboSelector.prototype.findInSubTree = function _findInSubTree(children) {\n        if (!children || !this.element)\n            return false;\n        if (children instanceof Node)\n            children = [children];\n        let count = 0;\n        const recur = (node) => {\n            if (children.includes(node))\n                count++;\n            if (count >= children.length)\n                return;\n            node.childNodes.forEach(child => recur(child));\n        };\n        recur(this.element);\n        return count >= children.length;\n    };\n    /**\n     * @description Finds whether one or more children belong to this node.\n     * @param {Node[]} [referenceList=this.siblings] - The siblings list to use as computation\n     * reference for index placement. Defaults to the node's `siblings`.\n     * @returns {boolean} True if the children belong to the node, false otherwise.\n     */\n    TurboSelector.prototype.indexInParent = function _indexInParent(referenceList = this.siblings) {\n        if (!referenceList || !this.element)\n            return -1;\n        return referenceList.indexOf(this.element);\n    };\n    //Parent manipulation\n    /**\n     * @description Add one or more children to the referenced parent node.\n     * @param {Node} [parent] - Array of (or single) child nodes.\n     * @param {number} [index] - The position at which to add the child relative to the parent's child list.\n     * Leave undefined to add the child at the end.\n     * @param {Node[] | NodeListOf<Node>} [referenceList=this.childrenArray] - The child list to\n     * use as computation reference for index placement. Defaults to the node's `childrenArray`.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.addToParent = function _addToParent(parent, index, referenceList) {\n        if (!this.element || !parent)\n            return this;\n        $(parent).addChild(this.element, index, referenceList);\n        return this;\n    };\n}\n\nfunction setupMiscFunctions() {\n    /**\n     * @description Execute a callback on the node while still benefiting from chaining.\n     * @param {(el: this) => void} callback The function to execute, with 1 parameter representing the instance itself.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.execute = function _execute(callback) {\n        callback(this);\n        return this;\n    };\n}\n\nclass ClassFunctionsUtils {\n    /**\n     * @description Utility function to operate on the provided classes\n     * @param selector\n     * @param classes\n     * @param callback\n     */\n    operateOnClasses(selector, classes, callback = (() => { })) {\n        if (!selector || !classes || !selector.element)\n            return selector;\n        try {\n            // If string provided --> split by spaces\n            if (typeof classes === \"string\")\n                classes = classes.split(\" \");\n            classes.filter(entry => entry.trim().length > 0)\n                .forEach(entry => callback(entry));\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return selector;\n    }\n}\n\nconst utils$8 = new ClassFunctionsUtils();\nfunction setupClassFunctions() {\n    /**\n     * @description Add one or more CSS classes to the element.\n     * @param {string | string[]} [classes] - String of classes separated by spaces, or array of strings.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.addClass = function _addClass(classes) {\n        if (!(this.element instanceof Element))\n            return this;\n        return utils$8.operateOnClasses(this, classes, entry => this.element.classList.add(entry));\n    };\n    /**\n     * @description Remove one or more CSS classes from the element.\n     * @param {string | string[]} [classes] - String of classes separated by spaces, or array of strings.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeClass = function _removeClass(classes) {\n        if (!(this.element instanceof Element))\n            return this;\n        return utils$8.operateOnClasses(this, classes, entry => this.element.classList.remove(entry));\n    };\n    /**\n     * @description Toggle one or more CSS classes in the element.\n     * @param {string | string[]} [classes] - String of classes separated by spaces, or array of strings.\n     * @param {boolean} force - (Optional) Boolean that turns the toggle into a one way-only operation. If set to false,\n     * then the class will only be removed, but not added. If set to true, then token will only be added, but not removed.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.toggleClass = function _toggleClass(classes, force) {\n        if (!(this.element instanceof Element))\n            return this;\n        return utils$8.operateOnClasses(this, classes, entry => this.element.classList.toggle(entry, force));\n    };\n    /**\n     * @description Check if the element's class list contains the provided class(es).\n     * @param {string | string[]} [classes] - String of classes separated by spaces, or array of strings\n     * @return A boolean indicating whether the provided classes are included\n     */\n    TurboSelector.prototype.hasClass = function _hasClass(classes) {\n        if (!classes || !(this.element instanceof Element))\n            return false;\n        if (typeof classes === \"string\")\n            return this.element.classList.contains(classes);\n        for (let entry of classes) {\n            if (!this.element.classList.contains(entry))\n                return false;\n        }\n        return true;\n    };\n}\n\nconst SvgNamespace = \"http://www.w3.org/2000/svg\";\nconst MathMLNamespace = \"http://www.w3.org/1998/Math/MathML\";\nconst SvgTags = new Set([\n    \"a\", \"animate\", \"animateMotion\", \"animateTransform\", \"circle\", \"clipPath\", \"defs\", \"desc\", \"ellipse\",\n    \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feComposite\", \"feConvolveMatrix\", \"feDiffuseLighting\",\n    \"feDisplacementMap\", \"feDistantLight\", \"feDropShadow\", \"feFlood\", \"feFuncA\", \"feFuncB\", \"feFuncG\", \"feFuncR\",\n    \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\", \"feOffset\", \"fePointLight\",\n    \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\", \"filter\", \"foreignObject\", \"g\", \"image\",\n    \"line\", \"linearGradient\", \"marker\", \"mask\", \"metadata\", \"mpath\", \"path\", \"pattern\", \"polygon\", \"polyline\",\n    \"radialGradient\", \"rect\", \"script\", \"set\", \"stop\", \"style\", \"svg\", \"switch\", \"symbol\", \"text\", \"textPath\",\n    \"title\", \"tspan\", \"use\", \"view\",\n]);\nconst MathMLTags = new Set([\n    \"annotation\", \"annotation-xml\", \"maction\", \"math\", \"merror\", \"mfrac\", \"mi\", \"mmultiscripts\", \"mn\", \"mo\",\n    \"mover\", \"mpadded\", \"mphantom\", \"mprescripts\", \"mroot\", \"mrow\", \"ms\", \"mspace\", \"msqrt\", \"mstyle\", \"msub\",\n    \"msubsup\", \"msup\", \"mtable\", \"mtd\", \"mtext\", \"mtr\", \"munder\", \"munderover\", \"semantics\",\n]);\n/**\n * @description Evaluates whether the provided string is an SVG tag.\n * @param {string} [tag] - The string to evaluate\n * @return A boolean indicating whether the tag is in the SVG namespace or not.\n */\nfunction isSvgTag(tag) {\n    return SvgTags.has(tag) || tag?.startsWith(\"svg\");\n}\n/**\n * @description Evaluates whether the provided string is a MathML tag.\n * @param {string} [tag] - The string to evaluate\n * @return A boolean indicating whether the tag is in the MathML namespace or not.\n */\nfunction isMathMLTag(tag) {\n    return MathMLTags.has(tag) || tag?.startsWith(\"math\");\n}\n\n/**\n * @description Create an element with the specified properties (and the specified namespace if applicable).\n * @param {TurboProperties<Tag>} [properties] - Object containing properties of the element.\n * @returns {ValidElement<Tag>} The created element.\n * @template Tag\n */\nfunction element(properties = {}) {\n    let element;\n    if (properties.namespace) {\n        if (properties.namespace == \"svg\")\n            element = document.createElementNS(SvgNamespace, properties.tag || \"svg\");\n        else if (properties.namespace == \"mathML\")\n            element = document.createElementNS(MathMLNamespace, properties.tag || \"math\");\n        else\n            element = document.createElementNS(properties.namespace, properties.tag || \"div\");\n    }\n    else {\n        element = document.createElement(properties.tag || \"div\");\n    }\n    if (properties.shadowDOM)\n        element.attachShadow({ mode: \"open\" });\n    $(element).setProperties(properties);\n    return element;\n}\n/**\n * @description Create an element with the specified properties. Supports SVG and MathML.\n * @param {TurboProperties<Tag>} [properties] - Object containing properties of the element.\n * @returns {ValidElement<Tag>} The created element.\n * @template Tag\n */\nfunction blindElement(properties = {}) {\n    let element;\n    if (isSvgTag(properties.tag))\n        element = document.createElementNS(SvgNamespace, properties.tag || \"svg\");\n    else if (isMathMLTag(properties.tag))\n        element = document.createElementNS(MathMLNamespace, properties.tag || \"math\");\n    else\n        element = document.createElement(properties.tag || \"div\");\n    if (properties.shadowDOM)\n        element.attachShadow({ mode: \"open\" });\n    $(element).setProperties(properties);\n    return element;\n}\n\n/**\n * @description returns a function that generates an HTML element with the provided tag that takes TurboProperties\n * as input.\n * @param {keyof ElementTagMap} tag - The tag to generate the function from.\n * @return The function\n */\nfunction generateTagFunction(tag) {\n    return (properties = {}) => {\n        properties.tag = tag;\n        return element({ ...properties, tag: tag });\n    };\n}\n/**\n * @description Creates an \"a\" element with the specified properties.\n * @param {TurboProperties<\"a\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"a\">} The created element.\n */\nfunction a(properties = {}) {\n    return element({ ...properties, tag: \"a\" });\n}\n/**\n * @description Creates a \"canvas\" element with the specified properties.\n * @param {TurboProperties<\"canvas\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"canvas\">} The created element.\n */\nfunction canvas(properties = {}) {\n    return element({ ...properties, tag: \"canvas\" });\n}\n/**\n * @description Creates a \"div\" element with the specified properties.\n * @param {TurboProperties<\"div\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"div\">} The created element.\n */\nfunction div(properties = {}) {\n    return element({ ...properties, tag: \"div\" });\n}\n/**\n * @description Creates a \"form\" element with the specified properties.\n * @param {TurboProperties<\"form\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"form\">} The created element.\n */\nfunction form(properties = {}) {\n    return element({ ...properties, tag: \"form\" });\n}\n/**\n * @description Creates a \"h1\" element with the specified properties.\n * @param {TurboProperties<\"h1\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h1\">} The created element.\n */\nfunction h1(properties = {}) {\n    return element({ ...properties, tag: \"h1\" });\n}\n/**\n * @description Creates a \"h2\" element with the specified properties.\n * @param {TurboProperties<\"h2\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h2\">} The created element.\n */\nfunction h2(properties = {}) {\n    return element({ ...properties, tag: \"h2\" });\n}\n/**\n * @description Creates a \"h3\" element with the specified properties.\n * @param {TurboProperties<\"h3\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h3\">} The created element.\n */\nfunction h3(properties = {}) {\n    return element({ ...properties, tag: \"h3\" });\n}\n/**\n * @description Creates a \"h4\" element with the specified properties.\n * @param {TurboProperties<\"h4\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h4\">} The created element.\n */\nfunction h4(properties = {}) {\n    return element({ ...properties, tag: \"h4\" });\n}\n/**\n * @description Creates a \"h5\" element with the specified properties.\n * @param {TurboProperties<\"h5\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h5\">} The created element.\n */\nfunction h5(properties = {}) {\n    return element({ ...properties, tag: \"h5\" });\n}\n/**\n * @description Creates a \"h6\" element with the specified properties.\n * @param {TurboProperties<\"h6\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"h6\">} The created element.\n */\nfunction h6(properties = {}) {\n    return element({ ...properties, tag: \"h6\" });\n}\n/**\n * @description Creates an \"img\" element with the specified properties.\n * @param {TurboProperties<\"img\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"img\">} The created element.\n */\nfunction img(properties = {}) {\n    return element({ ...properties, tag: \"img\" });\n}\n/**\n * @description Creates an \"input\" element with the specified properties.\n * @param {TurboProperties<\"input\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"input\">} The created element.\n */\nfunction input(properties = {}) {\n    return element({ ...properties, tag: \"input\" });\n}\n/**\n * @description Creates a \"link\" element with the specified properties.\n * @param {TurboProperties<\"link\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"link\">} The created element.\n */\nfunction link(properties = {}) {\n    return element({ ...properties, tag: \"link\" });\n}\n/**\n * @description Creates a \"p\" element with the specified properties.\n * @param {TurboProperties<\"p\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"p\">} The created element.\n */\nfunction p(properties = {}) {\n    return element({ ...properties, tag: \"p\" });\n}\n/**\n * @description Creates a \"span\" element with the specified properties.\n * @param {TurboProperties<\"span\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"span\">} The created element.\n */\nfunction span(properties = {}) {\n    return element({ ...properties, tag: \"span\" });\n}\n/**\n * @description Creates a \"style\" element with the specified properties.\n * @param {TurboProperties<\"style\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"style\">} The created element.\n */\nfunction style(properties = {}) {\n    return element({ ...properties, tag: \"style\" });\n}\n/**\n * @description Creates a \"textarea\" element with the specified properties.\n * @param {TurboProperties<\"textarea\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"textarea\">} The created element.\n */\nfunction textarea(properties = {}) {\n    return element({ ...properties, tag: \"textarea\" });\n}\n/**\n * @description Creates a \"video\" element with the specified properties.\n * @param {TurboProperties<\"video\">} [properties] - Object containing properties of the element.\n * @returns {ValidElement<\"video\">} The created element.\n */\nfunction video(properties = {}) {\n    return element({ ...properties, tag: \"video\" });\n}\n\n/**\n * @description Adds the provided string as a new style element to the provided root.\n * @param {string} [styles] - The css string. Use the css literal function for autocompletion.\n * @param {StylesRoot} [root] - The root to which the style element will be added.\n */\nfunction stylesheet(styles, root = document.head) {\n    if (!styles)\n        return;\n    const stylesheet = style({ innerHTML: styles });\n    $(root).addChild(stylesheet);\n}\n\n/**\n * @class TurboEmitter\n * @template {TurboModel} ModelType -The element's MVC model type.\n * @description The base MVC emitter class. Its role is basically an event bus. It allows the different parts of the\n * MVC structure to fire events or listen to some, with various methods.\n */\nclass TurboEmitter {\n    /**\n     * @description Map containing all callbacks.\n     * @protected\n     */\n    callbacks = new Map();\n    /**\n     * @description The attached MVC model.\n     */\n    model;\n    constructor(model) {\n        if (model)\n            this.model = model;\n    }\n    get defaultBlockKey() {\n        if (this.model)\n            return this.model.defaultBlockKey;\n        return \"__defaultBlockKey__\";\n    }\n    /**\n     * @function getBlock\n     * @description Retrieves the callback block by the given blockKey.\n     * @param {number | string} [blockKey] - The key of the block to retrieve.\n     * @protected\n     */\n    getBlock(blockKey) {\n        return this.callbacks.get(blockKey?.toString());\n    }\n    /**\n     * @function getOrGenerateBlock\n     * @description Retrieves or creates a callback map for a given blockKey.\n     * @param {number | string} [blockKey] - The block key.\n     * @returns {Map<string, ((...args: any[]) => void)[]>} - The ensured callback map.\n     * @protected\n     */\n    getOrGenerateBlock(blockKey) {\n        if (!this.callbacks.has(blockKey.toString()))\n            this.callbacks.set(blockKey.toString(), new Map());\n        return this.callbacks.get(blockKey.toString());\n    }\n    /**\n     * @function getKey\n     * @description Gets all callbacks for a given event key within a block.\n     * @param {string} key - The event name.\n     * @param {number | string} [blockKey] - The block in which the event is scoped.\n     * @returns {((...args: any[]) => void)[]} - An array of callbacks for that event.\n     * @protected\n     */\n    getKey(key, blockKey) {\n        const block = this.getBlock(blockKey);\n        return block ? block.get(key) : [];\n    }\n    /**\n     * @function getOrGenerateKey\n     * @description Ensures and returns the array of callbacks for a given event key within a block.\n     * @param {string} key - The event name.\n     * @param {number | string} [blockKey] - The block in which the event is scoped.\n     * @returns {((...args: any[]) => void)[]} - An array of callbacks for that event.\n     * @protected\n     */\n    getOrGenerateKey(key, blockKey) {\n        const block = this.getOrGenerateBlock(blockKey);\n        if (!block.has(key))\n            block.set(key, []);\n        return block.get(key);\n    }\n    /**\n     * @function addWithBlock\n     * @description Registers a callback for an event key within a specified block -- usually for the corresponding\n     * data block in the model.\n     * @param {string} key - The event name.\n     * @param {number | string} blockKey - The block to register the event in.\n     * @param {(...args: any[]) => void} callback - The callback function to invoke when the event is fired.\n     */\n    addWithBlock(key, blockKey, callback) {\n        this.getOrGenerateKey(key, blockKey).push(callback);\n    }\n    /**\n     * @function add\n     * @description Registers a callback for an event key in the default block.\n     * @param {string} key - The event name.\n     * @param {(...args: any[]) => void} callback - The callback function.\n     */\n    add(key, callback) {\n        this.addWithBlock(key, this.defaultBlockKey, callback);\n    }\n    /**\n     * @function removeWithBlock\n     * @description Removes a specific callback or all callbacks for a key within a block.\n     * @param {string} key - The event name.\n     * @param {number | string} blockKey - The block from which to remove the event.\n     * @param {(...args: any[]) => void} [callback] - The specific callback to remove. If undefined, all callbacks\n     * for the key are removed.\n     */\n    removeWithBlock(key, blockKey, callback) {\n        if (callback == undefined)\n            this.getBlock(blockKey)?.delete(key);\n        else {\n            const callbacks = this.getKey(key, blockKey);\n            const index = callbacks.indexOf(callback);\n            if (index >= 0)\n                callbacks.splice(index, 1);\n        }\n    }\n    /**\n     * @function remove\n     * @description Removes a specific callback or all callbacks for a key in the default block.\n     * @param {string} key - The event name.\n     * @param {(...args: any[]) => void} [callback] - The callback to remove. If omitted, all callbacks are removed.\n     */\n    remove(key, callback) {\n        this.removeWithBlock(key, this.defaultBlockKey, callback);\n    }\n    /**\n     * @function fireWithBlock\n     * @description Triggers all callbacks associated with an event key in a specified block.\n     * @param {string} key - The event name.\n     * @param {number | string} blockKey - The block in which the event is scoped.\n     * @param {...any[]} args - Arguments passed to each callback.\n     */\n    fireWithBlock(key, blockKey, ...args) {\n        this.callbacks.get(blockKey.toString())?.get(key)?.forEach((callback) => {\n            if (callback && typeof callback == \"function\")\n                callback(...args);\n        });\n    }\n    /**\n     * @function fire\n     * @description Triggers all callbacks associated with an event key in the default block.\n     * @param {string} key - The event name.\n     * @param {...any[]} args - Arguments passed to the callback.\n     */\n    fire(key, ...args) {\n        this.fireWithBlock(key, this.defaultBlockKey, ...args);\n    }\n}\n\n/**\n * @class Mvc\n * @description MVC -- Model-View-Component -- handler. Generates and manages an MVC structure for a certain object.\n * @template {object} ElementType - The type of the object that will be turned into MVC.\n * @template {TurboView} ViewType - The element's view type.\n * @template {object} DataType - The element's data type.\n * @template {TurboModel<DataType>} ModelType - The element's model type.\n * @template {TurboEmitter} EmitterType - The element's emitter type.\n * */\nclass Mvc {\n    /**\n     * @description The element/root of the MVC structure.\n     */\n    element;\n    _view;\n    _model;\n    _emitter;\n    _controllers = new Map();\n    _handlers = new Map();\n    _interactors = new Map();\n    _tools = new Map();\n    _substrates = new Map();\n    constructor(properties) {\n        if (properties.element)\n            this.element = properties.element;\n        if (!properties.emitter)\n            this.emitter = new TurboEmitter();\n        this.generate(properties);\n    }\n    /**\n     * @description The view (if any) of the current MVC structure. Setting it will update the view and link it\n     * with the existing pieces.\n     */\n    get view() {\n        return this._view;\n    }\n    set view(value) {\n        this._view = this.generateInstance(value, { element: this.element });\n        this.linkPieces();\n    }\n    /**\n     * @description The model (if any) of the current MVC structure. Setting it will update the model and link it\n     * with the existing pieces.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(model) {\n        this.model?.keyChangedCallback.remove(this.emitterFireCallback);\n        this._model = this.generateInstance(model);\n        this._model.handlers = this._handlers;\n        this._model.addHandler = (handler) => this.addHandler(handler);\n        this.linkPieces();\n    }\n    /**\n     * @description The emitter (if any) of the current MVC structure. Setting it will update the emitter and link it\n     * with the existing pieces.\n     */\n    get emitter() {\n        return this._emitter;\n    }\n    set emitter(emitter) {\n        this._emitter = this.generateInstance(emitter);\n        this.linkPieces();\n    }\n    /**\n     * @description The controllers (if any) of the current MVC structure. Setting it will not override the existing\n     * controllers, but only add the new values and link them with the existing pieces.\n     */\n    get controllers() {\n        return Array.from(this._controllers.values()) || [];\n    }\n    set controllers(value) {\n        this.generateInstances(value, { element: this.element })\n            .forEach(instance => this.addController(instance));\n        this.linkPieces();\n    }\n    /**\n     * @description The handlers (if any) of the current MVC structure. Setting it will not override the existing\n     * handlers, but only add the new values and link them with the existing pieces.\n     */\n    get handlers() {\n        return Array.from(this._handlers.values()) || [];\n    }\n    set handlers(value) {\n        this.generateInstances(value).forEach(instance => this.addHandler(instance));\n        this.linkPieces();\n    }\n    /**\n     * @description The interactors (if any) of the current MVC structure. Setting it will not override the existing\n     * interactors, but only add the new values and link them with the existing pieces.\n     */\n    get interactors() {\n        return Array.from(this._interactors.values()) || [];\n    }\n    set interactors(value) {\n        this.generateInstances(value, { element: this.element })\n            .forEach(instance => this.addInteractor(instance));\n        this.linkPieces();\n    }\n    /**\n     * @description The tools (if any) of the current MVC structure. Setting it will not override the existing\n     * tools, but only add the new values and link them with the existing pieces.\n     */\n    get tools() {\n        return Array.from(this._tools.values()) || [];\n    }\n    set tools(value) {\n        this.generateInstances(value, { element: this.element })\n            .forEach(instance => this.addTool(instance));\n        this.linkPieces();\n    }\n    /**\n     * @description The substrates (if any) of the current MVC structure. Setting it will not override the existing\n     * substrates, but only add the new values and link them with the existing pieces.\n     */\n    get substrates() {\n        return Array.from(this._substrates.values()) || [];\n    }\n    set substrates(value) {\n        this.generateInstances(value, { element: this.element })\n            .forEach(instance => this.addSubstrate(instance));\n        this.linkPieces();\n    }\n    /**\n     * @description The main data block (if any) attached to the model (if any).\n     */\n    get data() {\n        return this.model?.data;\n    }\n    set data(data) {\n        if (this.model)\n            this.model.data = data;\n    }\n    /**\n     * @description The ID of the main data block (if any) attached to the model (if any).\n     */\n    get dataId() {\n        return this.model?.dataId;\n    }\n    set dataId(value) {\n        if (this.model)\n            this.model.dataId = value;\n    }\n    /**\n     * @description The numerical index of the main data block (if any) attached to the model (if any).\n     */\n    get dataIndex() {\n        return Number.parseInt(this.dataId);\n    }\n    set dataIndex(value) {\n        if (this.model)\n            this.model.dataId = value.toString();\n    }\n    /**\n     * @description The size (number) of the main data block (if any) attached to the model (if any).\n     */\n    get dataSize() {\n        return this.model?.getSize?.();\n    }\n    /**\n     * @function getController\n     * @description Retrieves the attached MVC controller with the given key.\n     * By default, unless manually defined in the controller, if the element's class name is MyElement\n     * and the controller's class name is MyElementSomethingController, the key would be \"something\".\n     * @param {string} key - The controller's key.\n     * @return {TurboController} - The controller.\n     */\n    getController(key) {\n        return this._controllers.get(key);\n    }\n    /**\n     * @function addController\n     * @description Adds the given controller to the MVC structure.\n     * @param {TurboController} controller - The controller to add.\n     */\n    addController(controller) {\n        if (!controller.keyName)\n            controller.keyName =\n                this.extractClassEssenceName(controller.constructor, \"Controller\");\n        this._controllers.set(controller.keyName, controller);\n        this.updateController(controller);\n    }\n    /**\n     * @function getHandler\n     * @description Retrieves the attached MVC handler with the given key.\n     * By default, unless manually defined in the handler, if the element's class name is MyElement\n     * and the handler's class name is MyElementSomethingHandler, the key would be \"something\".\n     * @param {string} key - The handler's key.\n     * @return {TurboHandler} - The handler.\n     */\n    getHandler(key) {\n        return this._handlers.get(key);\n    }\n    /**\n     * @function addHandler\n     * @description Adds the given handler to the MVC structure.\n     * @param {TurboHandler} handler - The handler to add.\n     */\n    addHandler(handler) {\n        if (!handler.keyName)\n            handler.keyName =\n                this.extractClassEssenceName(handler.constructor, \"Handler\");\n        this._handlers.set(handler.keyName, handler);\n        this.updateHandler(handler);\n    }\n    /**\n     * @function getInteractor\n     * @description Retrieves the attached MVC interactor with the given key.\n     * By default, unless manually defined in the interactor, if the element's class name is MyElement\n     * and the interactor's class name is MyElementSomethingInteractor, the key would be \"something\".\n     * @param {string} key - The interactor's key.\n     * @return {TurboInteractor} - The interactor.\n     */\n    getInteractor(key) {\n        return this._interactors.get(key);\n    }\n    /**\n     * @function addInteractor\n     * @description Adds the given interactor to the MVC structure.\n     * @param {TurboInteractor} interactor - The interactor to add.\n     */\n    addInteractor(interactor) {\n        if (!interactor.keyName)\n            interactor.keyName =\n                this.extractClassEssenceName(interactor.constructor, \"Interactor\");\n        this._interactors.set(interactor.keyName, interactor);\n        this.updateInteractor(interactor);\n    }\n    /**\n     * @function getTool\n     * @description Retrieves the attached MVC Tool with the given key.\n     * By default, unless manually defined in the tool, if the element's class name is MyElement\n     * and the tool's class name is MyElementSomethingTool, the key would be \"something\".\n     * @param {string} key - The tool's key.\n     * @return {TurboTool} - The tool.\n     */\n    getTool(key) {\n        return this._tools.get(key);\n    }\n    /**\n     * @function addTool\n     * @description Adds the given tool to the MVC structure.\n     * @param {TurboTool} tool - The tool to add.\n     */\n    addTool(tool) {\n        if (!tool.keyName)\n            tool.keyName =\n                this.extractClassEssenceName(tool.constructor, \"Tool\");\n        this._tools.set(tool.keyName, tool);\n        this.updateTool(tool);\n    }\n    /**\n     * @function getSubstrate\n     * @description Retrieves the attached MVC Substrate with the given key.\n     * By default, unless manually defined in the substrate, if the element's class name is MyElement\n     * and the substrate's class name is MyElementSomethingSubstrate, the key would be \"something\".\n     * @param {string} key - The substrate's key.\n     * @return {TurboSubstrate} - The substrate.\n     */\n    getSubstrate(key) {\n        return this._substrates.get(key);\n    }\n    /**\n     * @function addSubstrate\n     * @description Adds the given substrate to the MVC structure.\n     * @param {TurboSubstrate} substrate - The substrate to add.\n     */\n    addSubstrate(substrate) {\n        if (!substrate.keyName)\n            substrate.keyName =\n                this.extractClassEssenceName(substrate.constructor, \"Substrate\");\n        this._substrates.set(substrate.keyName, substrate);\n        this.updateSubstrate(substrate);\n    }\n    /**\n     * @function generate\n     * @description Generates the MVC structure based on the provided properties.\n     * If no model or model constructor is defined, no model will be generated. The same applies for the view.\n     * If not defined, a default emitter will be created.\n     * @param {MvcGenerationProperties<ViewType, DataType, ModelType, EmitterType>} properties - The properties to use\n     * to generate the MVC structure.\n     */\n    generate(properties = {}) {\n        for (const property of Object.keys(properties)) {\n            const value = properties[property];\n            if (value === undefined || property === \"initialize\" || property === \"data\")\n                continue;\n            this[property] = value;\n        }\n        if (!this._emitter)\n            this.emitter = new TurboEmitter();\n        if (properties.data && this.model)\n            this.model.setBlock(properties.data, undefined, undefined, false);\n        if (properties.initialize === undefined || properties.initialize)\n            this.initialize();\n    }\n    /**\n     * @function initialize\n     * @description Initializes the MVC parts: the view, the controllers, the interactors, the tools, the substrates,\n     * and the model (in this order). The model is initialized last to allow for the view and controllers to set up\n     * their change callbacks.\n     */\n    initialize() {\n        this.view?.initialize();\n        this._controllers.forEach(controller => controller.initialize());\n        this._interactors.forEach(interactor => interactor.initialize());\n        this._tools.forEach(tool => tool.initialize());\n        this._substrates.forEach(substrate => substrate.initialize());\n        this.model?.initialize();\n    }\n    updateController(controller) {\n        controller.emitter = this.emitter;\n        controller.model = this.model;\n        controller.view = this.view;\n    }\n    updateHandler(handler) {\n        handler.model = this.model;\n    }\n    updateInteractor(interactor) {\n        interactor.model = this.model;\n        interactor.view = this.view;\n        interactor.emitter = this.emitter;\n    }\n    updateTool(tool) {\n        tool.emitter = this.emitter;\n        tool.model = this.model;\n        tool.view = this.view;\n    }\n    updateSubstrate(substrate) {\n        substrate.model = this.model;\n        substrate.view = this.view;\n        substrate.emitter = this.emitter;\n    }\n    linkPieces() {\n        if (this.model && !this.model.keyChangedCallback.has(this.emitterFireCallback)) {\n            this.model.keyChangedCallback.add(this.emitterFireCallback);\n        }\n        if (this.emitter)\n            this.emitter.model = this.model;\n        if (this.view) {\n            this.view.emitter = this.emitter;\n            this.view.model = this.model;\n        }\n        this._controllers.forEach(controller => this.updateController(controller));\n        this._handlers.forEach(handler => this.updateHandler(handler));\n        this._interactors.forEach(interactor => this.updateInteractor(interactor));\n        this._tools.forEach(tool => this.updateTool(tool));\n        this._substrates.forEach(substrate => this.updateSubstrate(substrate));\n    }\n    generateInstance(data, properties, shallowCopyProperties = true) {\n        if (!data)\n            return undefined;\n        if (typeof data === \"function\") {\n            const shouldClone = shallowCopyProperties && properties && typeof properties === \"object\";\n            const prop = shouldClone ? { ...properties } : properties;\n            return new data(prop);\n        }\n        return data;\n    }\n    generateInstances(data, properties, shallowCopyProperties = true) {\n        if (!data)\n            return [];\n        if (typeof data !== \"object\" || !Array.isArray(data))\n            data = [data];\n        const result = [];\n        data.forEach(constructor => {\n            const instance = this.generateInstance(constructor, properties, shallowCopyProperties);\n            if (instance)\n                result.push(instance);\n        });\n        return result;\n    }\n    emitterFireCallback = (keyName, blockKey, ...args) => this.emitter?.fireWithBlock(keyName, blockKey, ...args);\n    extractClassEssenceName(constructor, type) {\n        let className = constructor.name;\n        let prototype = Object.getPrototypeOf(this.element);\n        while (prototype && prototype.constructor !== Object) {\n            const name = prototype.constructor.name.replaceAll(\"_\", \"\");\n            if (className.startsWith(name)) {\n                className = className.slice(name.length);\n                break;\n            }\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        if (className.endsWith(type))\n            className = className.slice(0, -(type.length));\n        return className.charAt(0).toLowerCase() + className.slice(1);\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n}\r\nfunction __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n}\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * @class Delegate\n * @template {(...args: any[]) => any} CallbackType - The type of callbacks accepted by the delegate.\n * @description Class representing a set of callbacks that can be maintained and executed together.\n */\nclass Delegate {\n    callbacks = new Set();\n    /**\n     * @description Adds a callback to the list.\n     * @param callback - The callback function to add.\n     */\n    add(callback) {\n        this.callbacks.add(callback);\n    }\n    /**\n     * @description Removes a callback from the list.\n     * @param callback - The callback function to remove.\n     * @returns A boolean indicating whether the callback was found and removed.\n     */\n    remove(callback) {\n        return this.callbacks.delete(callback);\n    }\n    has(callback) {\n        return this.callbacks.has(callback);\n    }\n    /**\n     * @description Invokes all callbacks with the provided arguments.\n     * @param args - The arguments to pass to the callbacks.\n     */\n    fire(...args) {\n        for (const callback of this.callbacks) {\n            try {\n                callback(...args);\n            }\n            catch (error) {\n                console.error(\"Error invoking callback:\", error);\n            }\n        }\n    }\n    /**\n     * @description Clears added callbacks\n     */\n    clear() {\n        this.callbacks.clear();\n    }\n}\n\n/**\n * @internal\n */\nclass ReactivityUtils {\n    constructorMap = new WeakMap();\n    dataMap = new WeakMap();\n    activeEffect = null;\n    constructorData(target) {\n        let obj = this.constructorMap.get(target);\n        if (!obj) {\n            obj = { installed: new Map() };\n            this.constructorMap.set(target, obj);\n        }\n        return obj;\n    }\n    data(target) {\n        let map = this.dataMap.get(target);\n        if (!map) {\n            map = new Map();\n            this.dataMap.set(target, map);\n        }\n        return map;\n    }\n    track(entry) {\n        if (this.activeEffect)\n            this.activeEffect.dependencies.add(entry);\n    }\n    createSignalEntry(targetOrInitial, key, read, write, options) {\n        const subs = new Set();\n        const self = this;\n        const isBound = key !== undefined || read !== undefined;\n        let underlyingValue = targetOrInitial;\n        if (!options)\n            options = { diffOnWrite: true };\n        const entry = {\n            get() {\n                self.track(entry);\n                return isBound ? read() : underlyingValue;\n            },\n            set(value) {\n                if (!isBound) {\n                    const prev = underlyingValue;\n                    underlyingValue = value;\n                    if (!Object.is(prev, value))\n                        entry.emit();\n                }\n                //If \"write\" is passed, setup emit() behavior. Otherwise, reflect to already defined setter.\n                else if (write && !options.diffOnWrite) {\n                    write(value);\n                    entry.emit();\n                }\n                else if (write) {\n                    const prev = read();\n                    write(value);\n                    const next = read();\n                    if (!Object.is(prev, next))\n                        entry.emit();\n                }\n                else\n                    Reflect.set(targetOrInitial, key, value, targetOrInitial);\n            },\n            update(updater) {\n                entry.set(updater(isBound ? read() : underlyingValue));\n            },\n            sub(fn) {\n                subs.add(fn);\n                return () => subs.delete(fn);\n            },\n            emit() {\n                for (const fn of Array.from(subs))\n                    queueMicrotask(fn);\n            }\n        };\n        return entry;\n    }\n    getReactivityData(target, key) {\n        const data = this.data(target);\n        if (!data.has(key))\n            data.set(key, {});\n        return data.get(key);\n    }\n    getSignal(target, key) {\n        return this.getReactivityData(target, key).signal;\n    }\n    setSignal(target, key, next) {\n        const entry = this.getSignal(target, key);\n        if (entry)\n            entry.set(next);\n        else\n            Reflect.set(target, key, next, target);\n    }\n    getEffect(target, key) {\n        return this.getReactivityData(target, key).effect;\n    }\n    setEffect(target, key, effect) {\n        this.getReactivityData(target, key).effect = effect;\n    }\n    markDirty(target, key) {\n        this.getSignal(target, key)?.emit();\n    }\n    schedule(effect) {\n        if (effect.scheduled)\n            return;\n        effect.scheduled = true;\n        queueMicrotask(() => {\n            effect.scheduled = false;\n            effect.run();\n        });\n    }\n}\n\nclass SignalUtils {\n    utils;\n    constructor(utils) {\n        this.utils = utils;\n    }\n    createBoxFromEntry(entry) {\n        return new Proxy({\n            ...entry,\n            toJSON: () => entry.get(),\n            valueOf: () => entry.get(),\n            [Symbol.toPrimitive]: (hint) => {\n                const value = entry.get();\n                if (hint === \"string\")\n                    return String(value);\n                if (typeof value === \"number\")\n                    return value;\n                if (value != null && typeof value.valueOf === \"function\")\n                    return value.valueOf();\n                return value;\n            },\n            get value() {\n                return entry.get();\n            },\n            set value(value) {\n                entry.set(value);\n            }\n        }, {\n            get(target, key, receiver) {\n                return Reflect.get(target, key, receiver);\n            },\n            set(target, key, value, receiver) {\n                if (key === \"value\") {\n                    target.value = value;\n                    return true;\n                }\n                return Reflect.set(target, key, value, receiver);\n            }\n        });\n    }\n    signalDecorator(value, context, baseGetter, baseSetter) {\n        const { kind, name, static: isStatic, private: isPrivate } = context;\n        if (isPrivate)\n            throw new Error(\"@signal does not support private class elements.\");\n        const key = name;\n        const backingKey = Symbol(`[[signal:${String(key)}]]`);\n        const shadowKey = Symbol(`[[signal:${String(key)}:shadow]]`);\n        const utils = this.utils;\n        context.addInitializer(function () {\n            const prototype = isStatic ? this : this.constructor.prototype;\n            let customGetter;\n            let customSetter;\n            const read = function () {\n                if (baseGetter && !this[shadowKey])\n                    return baseGetter.call(this);\n                if (customGetter && !this[shadowKey])\n                    return customGetter.call(this);\n                return this[backingKey];\n            };\n            const write = function (v) {\n                if (!customSetter && !baseSetter) {\n                    this[backingKey] = v;\n                    this[shadowKey] = true;\n                }\n                else {\n                    if (baseSetter)\n                        baseSetter.call(this, v);\n                    if (customSetter)\n                        customSetter.call(this, v);\n                    if (!customGetter && !baseGetter) {\n                        this[backingKey] = v;\n                        this[shadowKey] = true;\n                    }\n                }\n            };\n            const ensureEntry = (self, diffOnWrite = true) => {\n                let entry = utils.getSignal(self, key);\n                if (entry)\n                    return entry;\n                if (kind === \"field\" && !customGetter && !baseGetter)\n                    self[backingKey] = self[key];\n                entry = utils.createSignalEntry(self, key, () => read.call(self), (v) => write.call(self, v), { diffOnWrite });\n                utils.getReactivityData(self, key).signal = entry;\n                if (kind === \"field\")\n                    delete self[key];\n                return entry;\n            };\n            if (kind === \"field\" || kind === \"accessor\") {\n                const acc = value;\n                if (acc?.get)\n                    customGetter = acc.get;\n                if (acc?.set)\n                    customSetter = acc.set;\n                const entry = ensureEntry(this, !customGetter && !baseGetter);\n                const descriptor = getFirstDescriptorInChain(this, key);\n                Object.defineProperty(this, key, {\n                    configurable: descriptor?.configurable ?? true,\n                    enumerable: descriptor?.enumerable ?? true,\n                    get: () => {\n                        utils.track(entry);\n                        return read.call(this);\n                    },\n                    set: (v) => entry.set(v),\n                });\n            }\n            else if (kind === \"getter\" || kind === \"setter\") {\n                const installed = utils.constructorData(prototype).installed;\n                if (installed.get(key))\n                    return;\n                installed.set(key, true);\n                const descriptor = getFirstDescriptorInChain(prototype, key) ?? {};\n                if (typeof descriptor.get === \"function\")\n                    customGetter = descriptor.get;\n                if (typeof descriptor.set === \"function\")\n                    customSetter = descriptor.set;\n                Object.defineProperty(prototype, key, {\n                    configurable: descriptor?.configurable ?? true,\n                    enumerable: !!descriptor?.enumerable,\n                    get: function () {\n                        const e = ensureEntry(this, !customGetter && !baseGetter);\n                        utils.track(e);\n                        return read.call(this);\n                    },\n                    set: function (v) {\n                        const e = ensureEntry(this, !customGetter && !baseGetter);\n                        e.set(v);\n                    },\n                });\n            }\n        });\n    }\n}\n\nclass EffectUtils {\n    utils;\n    constructor(utils) {\n        this.utils = utils;\n    }\n    makeEffect(callback) {\n        const utils = this.utils;\n        return {\n            callback,\n            dependencies: new Set(),\n            cleanups: [],\n            scheduled: false,\n            run() {\n                for (const c of this.cleanups)\n                    c();\n                this.cleanups = [];\n                this.dependencies = new Set();\n                utils.activeEffect = this;\n                try {\n                    this.callback();\n                }\n                finally {\n                    utils.activeEffect = null;\n                }\n                for (const dep of this.dependencies) {\n                    const unsub = dep.sub(() => utils.schedule(this));\n                    this.cleanups.push(unsub);\n                }\n            },\n            dispose() {\n                for (const c of this.cleanups)\n                    c();\n                this.cleanups = [];\n                this.dependencies.clear();\n            }\n        };\n    }\n}\n\nconst utils$7 = new ReactivityUtils();\nconst signalUtils = new SignalUtils(utils$7);\nconst effectUtils = new EffectUtils(utils$7);\nfunction signal(...args) {\n    if (args[1] && typeof args[1] === \"object\" && \"kind\" in args[1]\n        && \"name\" in args[1] && \"static\" in args[1] && \"private\" in args[1])\n        return signalUtils.signalDecorator(args[0], args[1]);\n    const initial = args[0];\n    return signalUtils.createBoxFromEntry(utils$7.createSignalEntry(initial));\n}\n/**\n * @decorator\n * @function modelSignal\n * @description Decorator that binds a reactive signal to a **model field**\n * retrieved via `this.getData(key, blockKey)` and stored via `this.setData(key, value, blockKey)`.\n * Useful to create signals in TurboModel classes.\n *\n * @param {string} dataKey - key to read/write (defaults to decorated member name when falsy).\n * @param {string | number} [blockKey] - Optional blockKey identifier.\n *\n * @example\n * ```ts\n * class TodoModel extends TurboModel {\n *   @modelSignal() title = \"\";\n * }\n * ```\n * Is equivalent to:\n * ```ts\n * class TodoModel extends TurboModel {\n *   @signal public get title() {\n *      return this.getData(\"title\");\n *   }\n *\n *   public set title(value) {\n *      this.setData(\"title\", value);\n *   }\n * }\n *\n * ```\n */\nfunction modelSignal(dataKey, blockKey) {\n    return function (value, context) {\n        const key = dataKey ?? String(context.name);\n        return signalUtils.signalDecorator(value, context, function () { return this.getData?.(key, blockKey); }, function (value) { this.setData?.(key, value, blockKey); });\n    };\n}\nfunction effect(...args) {\n    const value = args[0];\n    const context = args[1];\n    if (context && typeof context === \"object\" && \"kind\" in context\n        && \"name\" in context && \"static\" in context && \"private\" in context) {\n        const { kind, name, static: isStatic } = context;\n        const key = String(name);\n        if (kind !== \"method\" && kind !== \"getter\" && !(kind === \"field\" && typeof value === \"function\"))\n            throw new Error(\"@effect can only decorate zero-arg instance methods or getters.\");\n        if (isStatic)\n            throw new Error(\"@effect does not support static methods/getters.\");\n        context.addInitializer?.(function () {\n            const self = this;\n            const fn = function () { value?.call(this); };\n            const eff = effectUtils.makeEffect(() => fn.call(self));\n            utils$7.setEffect(self, key, eff);\n        });\n    }\n    else if (typeof value === \"function\") {\n        const eff = effectUtils.makeEffect(value);\n        eff.run();\n        return () => eff.dispose();\n    }\n}\n/**\n * @function getSignal\n * @template Type\n * @description Retrieve the signal at the given `key` inside `target`.\n * @param {object} target - The target to which the signal is bound.\n * @param {PropertyKey} key - The key of the signal inside `target`.\n * @return {SignalEntry<Type>} - The signal entry.\n */\nfunction getSignal(target, key) {\n    return utils$7.getSignal(target, key);\n}\n/**\n * @function setSignal\n * @template Type\n * @description Set the value of the signal at the given `key` inside `target`.\n * @param {object} target - The target to which the signal is bound.\n * @param {PropertyKey} key - The key of the signal inside `target`.\n * @param {Type} value - The new value of the signal.\n */\nfunction setSignal(target, key, value) {\n    return utils$7.setSignal(target, key, value);\n}\n/**\n * @function markDirty\n * @description Marks the signal at the given `key` inside `target` as dirty and fires all of its attached effects.\n * @param {object} target - The target to which the signal is bound.\n * @param {PropertyKey} key - The key of the signal inside `target`.\n */\nfunction markDirty(target, key) {\n    return utils$7.markDirty(target, key);\n}\n/**\n * @function initializeEffects\n * @description Initializes and runs all the effects attached to the given `target`.\n * @param {object} target - The target to which the effects are bound.\n */\nfunction initializeEffects(target) {\n    for (const [, entry] of utils$7.data(target))\n        entry.effect?.run();\n}\n/**\n * @function disposeEffect\n * @description Disposes of the effect at the given `key` inside `target`.\n * @param {object} target - The target to which the signal is bound.\n * @param {PropertyKey} key - The key of the signal inside `target`.\n */\nfunction disposeEffect(target, key) {\n    const data = utils$7.getReactivityData(target, key);\n    data.effect?.dispose();\n    data.effect = undefined;\n}\n/**\n * @function disposeEffects\n * @description Disposes of all the effects attached to the given `target`.\n * @param {object} target - The target to which the effects are bound.\n */\nfunction disposeEffects(target) {\n    for (const [, entry] of utils$7.data(target)) {\n        entry.effect?.dispose();\n        entry.effect = undefined;\n    }\n}\n\n/**\n * @class TurboModel\n * @template DataType - The type of the data stored in each block.\n * @template {string | number | symbol} KeyType - The type of the keys used to access data in blocks.\n * @template {string | number | symbol} IdType - The type of the block IDs.\n * @template {\"array\" | \"map\"} BlocksType - Whether data blocks are stored as an array or a map.\n * @template {MvcDataBlock<DataType, IdType>} BlockType - The structure of each data block.\n * @description A base class representing a model in MVC, which manages one or more data blocks and handles change\n * propagation.\n */\nlet TurboModel = (() => {\n    let _enabledCallbacks_decorators;\n    let _enabledCallbacks_initializers = [];\n    let _enabledCallbacks_extraInitializers = [];\n    return class TurboModel {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n            _enabledCallbacks_decorators = [auto()];\n            __esDecorate(this, null, _enabledCallbacks_decorators, { kind: \"accessor\", name: \"enabledCallbacks\", static: false, private: false, access: { has: obj => \"enabledCallbacks\" in obj, get: obj => obj.enabledCallbacks, set: (obj, value) => { obj.enabledCallbacks = value; } }, metadata: _metadata }, _enabledCallbacks_initializers, _enabledCallbacks_extraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        isDataBlocksArray = false;\n        dataBlocks;\n        /**\n         * @description Map of MVC handlers bound to this model.\n         */\n        handlers;\n        /**\n         * @description Delegate triggered when a key changes.\n         */\n        keyChangedCallback;\n        /**\n         * @constructor\n         * @param {DataType} [data] - Initial data. Not initialized if provided.\n         * @param {BlocksType} [dataBlocksType] - Type of data blocks (array or map).\n         */\n        constructor(data, dataBlocksType) {\n            __runInitializers(this, _enabledCallbacks_extraInitializers);\n            this.keyChangedCallback = new Delegate();\n            if (dataBlocksType === \"array\") {\n                this.isDataBlocksArray = true;\n                this.dataBlocks = [];\n            }\n            else {\n                this.isDataBlocksArray = false;\n                this.dataBlocks = new Map();\n            }\n            this.enabledCallbacks = true;\n            this.setBlock(data, undefined, this.defaultBlockKey, false);\n        }\n        /**\n         * @description The data of the default block.\n         */\n        get data() {\n            return this.getBlockData();\n        }\n        set data(value) {\n            this.setBlock(value);\n        }\n        /**\n         * @description The ID of the default block.\n         */\n        get dataId() {\n            return this.getBlockId();\n        }\n        set dataId(value) {\n            this.setBlockId(value);\n        }\n        #enabledCallbacks_accessor_storage = __runInitializers(this, _enabledCallbacks_initializers, void 0);\n        /**\n         * @description Whether callbacks are enabled or not.\n         */\n        get enabledCallbacks() { return this.#enabledCallbacks_accessor_storage; }\n        set enabledCallbacks(value) { this.#enabledCallbacks_accessor_storage = value; }\n        /**\n         * @function getData\n         * @description Retrieves the value associated with a given key in the specified block.\n         * @param {KeyType} key - The key to retrieve.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block from which to retrieve the\n         * data.\n         * @returns {unknown} The value associated with the key, or null if not found.\n         */\n        getData(key, blockKey = this.defaultBlockKey) {\n            if (!this.isValidBlockKey(blockKey))\n                return null;\n            return this.getBlockData(blockKey)?.[key];\n        }\n        /**\n         * @function setData\n         * @description Sets the value for a given key in the specified block and triggers callbacks (if enabled).\n         * @param {KeyType} key - The key to update.\n         * @param {unknown} value - The value to assign.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block to update.\n         */\n        setData(key, value, blockKey = this.defaultBlockKey) {\n            if (!this.isValidBlockKey(blockKey))\n                return;\n            const data = this.getBlockData(blockKey);\n            if (data)\n                data[key] = value;\n            if (this.enabledCallbacks)\n                this.fireKeyChangedCallback(key, blockKey);\n        }\n        /**\n         * @function getSize\n         * @description Returns the size of the specified block.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block to check.\n         * @returns {number} The size.\n         */\n        getSize(blockKey = this.defaultBlockKey) {\n            return this.getAllKeys(blockKey)?.length ?? 0;\n        }\n        /**\n         * @function getBlock\n         * @description Retrieves the data block for the given blockKey.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block key to retrieve.\n         * @returns {BlockType | null} The block or null if it doesn't exist.\n         */\n        getBlock(blockKey = this.defaultBlockKey) {\n            if (!this.isValidBlockKey(blockKey))\n                return null;\n            if (this.isDataBlocksArray) {\n                const index = Number(blockKey);\n                return Number.isInteger(index) && index >= 0\n                    ? this.dataBlocks[index] ?? null\n                    : null;\n            }\n            else {\n                return this.dataBlocks.get(blockKey.toString()) ?? null;\n            }\n        }\n        /**\n         * @function createBlock\n         * @description Creates a data block entry.\n         * @param {DataType} value - The data of the block.\n         * @param {IdType} [id] - The optional ID of the data.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The key of the block.\n         * @protected\n         * @return {BlockType} - The created block.\n         */\n        createBlock(value, id, blockKey = this.defaultBlockKey) {\n            return { id: id ?? null, data: value };\n        }\n        /**\n         * @function setBlock\n         * @description Creates and sets a data block at the specified key.\n         * @param {DataType} value - The data to set.\n         * @param {IdType} [id] - Optional block ID.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The key of the block.\n         * @param {boolean} [initialize = true] - Whether to initialize the block after setting.\n         */\n        setBlock(value, id, blockKey = this.defaultBlockKey, initialize = true) {\n            if (!this.isValidBlockKey(blockKey) || value === null || value === undefined)\n                return;\n            const block = this.createBlock(value, id, blockKey);\n            if (this.isDataBlocksArray) {\n                const index = Number(blockKey);\n                if (Number.isInteger(index) && index >= 0) {\n                    this.dataBlocks[index] = block;\n                }\n            }\n            else {\n                this.dataBlocks.set(blockKey.toString(), block);\n            }\n            if (initialize)\n                this.initialize(blockKey);\n        }\n        /**\n         * @function hasBlock\n         * @description Check if a block exists at the given key.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey] - Block key.\n         * @return {boolean} - Whether the block exists or not.\n         */\n        hasBlock(blockKey) {\n            if (this.isDataBlocksArray) {\n                const index = Number(blockKey);\n                return Number.isInteger(index) && index >= 0 && index < this.dataBlocks.length;\n            }\n            return this.dataBlocks.has(blockKey.toString());\n        }\n        /**\n         * @function addBlock\n         * @description Adds a new block into the structure. Appends or inserts based on key if using array.\n         * @param {DataType} value - The block data.\n         * @param {IdType} [id] - Optional block ID.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey] - Block key (used for insertion in arrays).\n         * @param {boolean} [initialize=true] - Whether to initialize after adding.\n         */\n        addBlock(value, id, blockKey, initialize = true) {\n            if (!value)\n                return;\n            if (!this.isDataBlocksArray)\n                return this.setBlock(value, id, blockKey, initialize);\n            const block = this.createBlock(value, id, blockKey);\n            let index = Number(blockKey);\n            if (!Number.isInteger(index) || index < 0)\n                index = this.dataBlocks.length;\n            this.dataBlocks.splice(index, 0, block);\n            if (initialize)\n                this.initialize(index);\n        }\n        /**\n         * @function getBlockData\n         * @description Retrieves the data from a specific block.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block key.\n         * @returns {DataType | null} The block's data or  if it doesn't exist.\n         */\n        getBlockData(blockKey = this.defaultBlockKey) {\n            const block = this.getBlock(blockKey);\n            return block ? block.data : null;\n        }\n        /**\n         * @function getBlockId\n         * @description Retrieves the ID from a specific block.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block key.\n         * @returns {IdType | null} The block ID or null.\n         */\n        getBlockId(blockKey = this.defaultBlockKey) {\n            const block = this.getBlock(blockKey);\n            return block ? block.id : null;\n        }\n        /**\n         * @function setBlockId\n         * @description Sets the ID for a specific block.\n         * @param {IdType} value - The new ID.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultBlockKey] - The block key.\n         */\n        setBlockId(value, blockKey = this.defaultBlockKey) {\n            if (!value)\n                return;\n            const block = this.getBlock(blockKey);\n            if (block)\n                block.id = value;\n        }\n        /**\n         * @function fireKeyChangedCallback\n         * @description Fires the emitter's change callback for the given key in a block, passing it the data at the key's value.\n         * @param {KeyType} key - The key that changed.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultBlockKey] - The block where the change occurred.\n         * @param {boolean} [deleted=false] - Whether the key was deleted.\n         */\n        fireKeyChangedCallback(key, blockKey = this.defaultBlockKey, deleted = false) {\n            if (!this.isValidBlockKey(blockKey))\n                blockKey = this.getAllBlockKeys()[0];\n            markDirty(this, key); //TODO CHECK\n            this.keyChangedCallback.fire(key, blockKey, deleted ? undefined : this.getData(key, blockKey));\n        }\n        /**\n         * @function fireCallback\n         * @description Fires the emitter's change callback for the given key in the default blocks.\n         * @param {string | KeyType} key - The key to fire for.\n         * @param {...any[]} args - Additional arguments.\n         */\n        fireCallback(key, ...args) {\n            this.keyChangedCallback.fire(key, this.defaultBlockKey, ...args);\n        }\n        /**\n         * @function fireBlockCallback\n         * @description Fires the emitter's change callback for the given key in a specific block with custom arguments.\n         * @param {string | KeyType} key - The key to fire for.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultBlockKey] - The block key.\n         * @param {...any[]} args - Additional arguments.\n         */\n        fireBlockCallback(key, blockKey = this.defaultBlockKey, ...args) {\n            if (!this.isValidBlockKey(blockKey))\n                blockKey = this.getAllBlockKeys()[0];\n            this.keyChangedCallback.fire(key, blockKey, ...args);\n        }\n        /**\n         * @function initialize\n         * @description Initializes the block at the given key, and triggers callbacks for all the keys in its data.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block key.\n         */\n        initialize(blockKey = this.defaultBlockKey) {\n            const keys = this.getAllKeys(blockKey);\n            if (!keys || !this.enabledCallbacks)\n                return;\n            keys.forEach(key => this.fireKeyChangedCallback(key, blockKey));\n        }\n        /**\n         * @function clear\n         * @description Clears the block data at the given key.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey = this.defaultBlockKey] - The block key.\n         */\n        clear(blockKey = this.defaultBlockKey) {\n        }\n        /**\n         * @description The default block key based on whether the data structure is an array or map.\n         */\n        get defaultBlockKey() {\n            return (this.isDataBlocksArray ? 0 : \"__turbo_default_block_key__\");\n        }\n        /**\n         * @description The default block key if there's only one block, otherwise null.\n         */\n        get defaultComputationBlockKey() {\n            const size = this.isDataBlocksArray\n                ? this.dataBlocks.length\n                : this.dataBlocks.size;\n            return size > 1 ? null : this.defaultBlockKey;\n        }\n        /**\n         * @function isValidBlockKey\n         * @description Checks if the block key is a valid string or number.\n         * @param {MvcBlockKeyType<BlocksType>} blockKey - The block key to validate.\n         * @returns {boolean} True if valid, false otherwise.\n         */\n        isValidBlockKey(blockKey) {\n            return blockKey !== undefined && blockKey !== null\n                && ((typeof blockKey === \"string\" && blockKey.length !== 0)\n                    || typeof blockKey === \"number\");\n        }\n        /**\n         * @function getAllBlockKeys\n         * @description Retrieves all block keys in the model.\n         * @returns {MvcBlockKeyType<BlocksType>[]} Array of block keys.\n         */\n        getAllBlockKeys() {\n            if (this.isDataBlocksArray)\n                return this.dataBlocks.map((_, index) => index);\n            else\n                return Array.from(this.dataBlocks.keys());\n        }\n        /**\n         * @function getAllIds\n         * @description Retrieves all block (data) IDs in the model.\n         * @returns {IdType[]} Array of IDs.\n         */\n        getAllIds() {\n            if (this.isDataBlocksArray)\n                return this.dataBlocks.map(entry => entry.id);\n            else\n                return Array.from(this.dataBlocks.values()).map(entry => entry.id);\n        }\n        /**\n         * @function getAllBlocks\n         * @description Retrieves all blocks or a specific one if blockKey is defined.\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultComputationBlockKey] - The block key.\n         * @returns {BlockType[]} Array of blocks.\n         */\n        getAllBlocks(blockKey = this.defaultComputationBlockKey) {\n            const output = [];\n            if (blockKey !== null) {\n                const block = this.getBlock(blockKey);\n                if (block)\n                    output.push(block);\n            }\n            else {\n                for (const key of this.getAllBlockKeys()) {\n                    const block = this.getBlock(key);\n                    if (block)\n                        output.push(block);\n                }\n            }\n            return output;\n        }\n        /**\n         * @function getAllKeys\n         * @description Retrieves all keys within the given block(s).\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultComputationBlockKey] - The block key.\n         * @returns {KeyType[]} Array of keys.\n         */\n        getAllKeys(blockKey = this.defaultComputationBlockKey) {\n            return this.getAllBlocks(blockKey).flatMap(block => Object.keys(block.data));\n        }\n        /**\n         * @function getAllData\n         * @description Retrieves all values across block(s).\n         * @param {MvcBlockKeyType<BlocksType>} [blockKey=this.defaultComputationBlockKey] - The block key.\n         * @returns {unknown[]} Array of values.\n         */\n        getAllData(blockKey = this.defaultComputationBlockKey) {\n            return this.getAllBlocks(blockKey).flatMap(block => Object.values(block.data));\n        }\n        /**\n         * @function getHandler\n         * @description Retrieves the attached MVC handler with the given key.\n         * By default, unless manually defined in the handler, if the element's class name is MyElement\n         * and the handler's class name is MyElementSomethingHandler, the key would be \"something\".\n         * @param {string} key - The handler's key.\n         * @return {TurboHandler} - The handler.\n         */\n        getHandler(key) {\n            return this.handlers.get(key);\n        }\n        /**\n         * @function addHandler\n         * @description Registers a TurboHandler for the given key.\n         * @param {TurboHandler} handler - The handler instance to register.\n         */\n        addHandler(handler) {\n            if (!handler.keyName)\n                return;\n            this.handlers.set(handler.keyName, handler);\n        }\n    };\n})();\n\nconst TurboKeyEventName = {\n    keyPressed: \"turbo-key-pressed\",\n    keyReleased: \"turbo-key-released\"\n};\nconst DefaultKeyEventName = {\n    keyPressed: \"keydown\",\n    keyReleased: \"keyup\",\n};\nconst TurboClickEventName = {\n    click: \"turbo-click\",\n    clickStart: \"turbo-click-start\",\n    clickEnd: \"turbo-click-end\",\n    longPress: \"turbo-long-press\"\n};\nconst DefaultClickEventName = {\n    click: \"click\",\n    clickStart: \"mousedown\",\n    clickEnd: \"mouseup\",\n    longPress: TurboClickEventName.longPress\n};\nconst TurboMoveEventName = {\n    move: \"turbo-move\"\n};\nconst DefaultMoveEventName = {\n    move: \"mousemove\"\n};\nconst TurboDragEventName = {\n    drag: \"turbo-drag\",\n    dragStart: \"turbo-drag-start\",\n    dragEnd: \"turbo-drag-end\"\n};\nconst DefaultDragEventName = {\n    drag: TurboDragEventName.drag,\n    dragStart: TurboDragEventName.dragStart,\n    dragEnd: TurboDragEventName.dragEnd,\n};\nconst TurboWheelEventName = {\n    trackpadScroll: \"turbo-trackpad-scroll\",\n    trackpadPinch: \"turbo-trackpad-pinch\",\n    mouseWheel: \"turbo-mouse-wheel\"\n};\nconst DefaultWheelEventName = {\n    trackpadScroll: \"wheel\",\n    trackpadPinch: \"wheel\",\n    mouseWheel: \"wheel\"\n};\nconst TurboEventName = {\n    ...TurboClickEventName,\n    ...TurboKeyEventName,\n    ...TurboMoveEventName,\n    ...TurboDragEventName,\n    ...TurboWheelEventName,\n    selectInput: \"turbo-select-input\",\n};\n/**\n * @description Object containing the names of events fired by default by the turboComponents. Modifying it (prior to\n * setting up new turbo components) will subsequently alter the events that the instantiated components will listen for.\n */\nconst DefaultEventName = {\n    ...DefaultKeyEventName,\n    ...DefaultClickEventName,\n    ...DefaultMoveEventName,\n    ...DefaultDragEventName,\n    ...DefaultWheelEventName,\n    wheel: \"wheel\",\n    scroll: \"scroll\",\n    input: \"input\",\n    change: \"change\",\n    focus: \"focus\",\n    focusIn: \"focusin\",\n    focusOut: \"focusout\",\n    blur: \"blur\",\n    resize: \"resize\",\n    compositionStart: \"compositionstart\",\n    compositionEnd: \"compositionend\",\n};\n\n/**\n * @description Converts the passed variable into a string.\n * @param value - The variable to convert to string\n * @returns {string} - The string representation of the value\n */\nfunction stringify(value) {\n    if (value === null || value === undefined)\n        return undefined;\n    switch (typeof value) {\n        case \"string\":\n            return value;\n        case \"number\":\n        case \"boolean\":\n        case \"bigint\":\n        case \"symbol\":\n        case \"function\":\n            return value.toString();\n        case \"object\":\n            if (Array.isArray(value))\n                return JSON.stringify(value);\n            else if (value instanceof Date)\n                return value.toISOString();\n            else {\n                try {\n                    return JSON.stringify(value);\n                }\n                catch {\n                    return \"[object Object]\";\n                }\n            }\n        default:\n            return String(value);\n    }\n}\n/**\n * @description Attempts to convert the passed string back to its original type.\n * @param str - The string to convert back to its original type\n * @returns {any} - The original value\n */\nfunction parse(str) {\n    if (isUndefined(str))\n        return undefined;\n    switch (str) {\n        case \"null\":\n            return null;\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n    }\n    if (!isNaN(Number(str)))\n        return Number(str);\n    if (/^\\d+n$/.test(str))\n        return BigInt(str.slice(0, -1));\n    if (str.startsWith(\"function\") || str.startsWith(\"(\")) {\n        try {\n            const parsedFunction = new Function(`return (${str})`)();\n            if (typeof parsedFunction === \"function\")\n                return parsedFunction;\n        }\n        catch {\n        }\n    }\n    try {\n        const parsed = JSON.parse(str);\n        if (typeof parsed === \"object\" && parsed != null)\n            return parsed;\n    }\n    catch {\n    }\n    return str;\n}\n/**\n * @description Extracts the extension from the given filename or path (e.g.: \".png\").\n * @param {string} str - The filename or path\n * @return The extension, or an empty string if not found.\n */\nfunction getFileExtension(str) {\n    if (!str || str.length == 0)\n        return \"\";\n    const match = str.match(/\\.\\S{1,4}$/);\n    return match ? match[0] : \"\";\n}\n/**\n * @description converts the provided string from camelCase to kebab-case.\n * @param {string} str - The string to convert\n */\nfunction camelToKebabCase(str) {\n    if (!str || str.length == 0)\n        return;\n    return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n/**\n * @description converts the provided string from kebab-case to camelCase.\n * @param {string} str - The string to convert\n */\nfunction kebabToCamelCase(str) {\n    if (!str || str.length == 0)\n        return;\n    return str.replace(/-([a-z])/g, g => g[1].toUpperCase());\n}\n\nfunction setupElementFunctions() {\n    /**\n     * Sets the declared properties to the element.\n     * @param {TurboProperties<Tag>} [properties] - The properties object.\n     * @param {boolean} [setOnlyBaseProperties=false] - If set to true, will only set the base turbo properties (classes,\n     * text, style, id, children, parent, etc.) and ignore all other properties not explicitly defined in TurboProperties.\n     * @returns {this} Itself, allowing for method chaining.\n     * @template Tag\n     */\n    TurboSelector.prototype.setProperties = function _setProperties(properties = {}, setOnlyBaseProperties = false) {\n        if (!this)\n            return this;\n        if (properties.out) {\n            if (typeof properties.out == \"string\")\n                this[\"__outName\"] = properties.out;\n            else\n                Object.assign(properties.out, this);\n        }\n        if (!this.element.shadowRoot) {\n            let shadowDOM = !!properties.shadowDOM;\n            if (\"getPropertiesValue\" in this.element && typeof this.element.getPropertiesValue === \"function\")\n                shadowDOM = this.element.getPropertiesValue(properties.shadowDOM, \"shadowDOM\");\n            if (shadowDOM)\n                try {\n                    this.element.attachShadow({ mode: \"open\" });\n                }\n                catch { }\n        }\n        const mvc = this.element?.[\"mvc\"] instanceof Mvc ? this.element[\"mvc\"]\n            : \"model\" in this.element && \"view\" in this.element ? this.element : undefined;\n        for (const property of Object.keys(properties)) {\n            const value = properties[property];\n            if (value === undefined)\n                continue;\n            switch (property) {\n                case \"tag\":\n                case \"namespace\":\n                case \"shadowDOM\":\n                    break;\n                case \"text\":\n                    if (this.element instanceof HTMLElement)\n                        this.element.innerText = value;\n                    break;\n                case \"style\":\n                    if (!(this.element instanceof HTMLElement || this.element instanceof SVGElement))\n                        break;\n                    this.setStyles(value, true);\n                    break;\n                case \"stylesheet\":\n                    stylesheet(value, this.closestRoot);\n                    break;\n                case \"id\":\n                    this.element.id = value;\n                    break;\n                case \"classes\":\n                    this.addClass(value);\n                    break;\n                case \"listeners\":\n                    Object.entries(value).forEach(([type, callback]) => this.on(type, callback));\n                    break;\n                case \"onClick\":\n                    this.on(DefaultEventName.click, value);\n                    break;\n                case \"onDrag\":\n                    this.on(DefaultEventName.drag, value);\n                    break;\n                case \"children\":\n                    this.addChild(value);\n                    break;\n                case \"parent\":\n                    $(value).addChild(this.element);\n                    break;\n                case \"data\":\n                case \"initialize\":\n                    if (mvc)\n                        break;\n                case \"model\":\n                case \"view\":\n                case \"emitter\":\n                case \"controllers\":\n                case \"handlers\":\n                case \"interactors\":\n                case \"tools\":\n                case \"substrates\":\n                    if (setOnlyBaseProperties)\n                        break;\n                    if (mvc) {\n                        try {\n                            mvc[property] = value;\n                            if (property === \"model\" && properties.data && mvc[\"model\"] instanceof TurboModel) {\n                                mvc[\"model\"].setBlock(properties.data, undefined, undefined, false);\n                            }\n                        }\n                        catch { }\n                        break;\n                    }\n                default:\n                    if (setOnlyBaseProperties)\n                        break;\n                    try {\n                        this.element[property] = value;\n                    }\n                    catch (e) {\n                        try {\n                            this.setAttribute(property, stringify(value));\n                        }\n                        catch (e) {\n                            console.error(e);\n                        }\n                    }\n                    break;\n            }\n        }\n        if (properties.initialize === undefined || properties.initialize) {\n            if (this.element && \"initialize\" in this.element && typeof this.element.initialize === \"function\")\n                this.element.initialize();\n            else if (mvc && \"initialize\" in mvc && typeof mvc.initialize === \"function\")\n                mvc.initialize();\n        }\n        return this;\n    };\n    TurboSelector.prototype.setMvc = function _setMvc(properties) {\n        if (!this.element)\n            return undefined;\n        if (\"mvc\" in this.element && this.element.mvc instanceof Mvc) {\n            this.element.mvc.generate(properties);\n            return this.element.mvc;\n        }\n        return new Mvc({ ...properties, element: this.element });\n    };\n    /**\n     * @description Destroys the node by removing it from the document and removing all its bound listeners.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.destroy = function _destroy() {\n        this.removeAllListeners();\n        this.remove();\n        if (this.element && \"destroy\" in this.element && typeof this.element.destroy === \"function\")\n            this.element.destroy();\n        return this;\n    };\n    /**\n     * @description Sets the value of an attribute on the underlying element.\n     * @param {string} name The name of the attribute.\n     * @param {string | number | boolean} [value] The value of the attribute. Can be left blank to represent a\n     * true boolean.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.setAttribute = function _setAttribute(name, value) {\n        if (this.element instanceof Element)\n            this.element.setAttribute(name, value?.toString() || \"true\");\n        return this;\n    };\n    /**\n     * @description Removes an attribute from the underlying element.\n     * @param {string} name The name of the attribute to remove.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeAttribute = function _removeAttribute(name) {\n        if (this.element instanceof Element)\n            this.element.removeAttribute(name);\n        return this;\n    };\n    /**\n     * @description Causes the element to lose focus.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.blur = function _blur() {\n        if (this.element instanceof HTMLElement)\n            this.element.blur();\n        return this;\n    };\n    /**\n     * @description Sets focus on the element.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.focus = function _focus() {\n        if (this.element instanceof HTMLElement)\n            this.element.focus();\n        return this;\n    };\n}\n\nconst BasicInputEvents = [\n    \"mousedown\", \"mouseup\", \"mousemove\", \"click\", \"dblclick\", \"contextmenu\",\n    \"dragstart\", \"selectstart\",\n    \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\",\n    \"pointerdown\", \"pointermove\", \"pointerup\",\n    \"wheel\"\n];\nconst NonPassiveEvents = [\n    \"wheel\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"pointerdown\", \"pointermove\", \"pointerup\", \"pointercancel\"\n];\n\nvar ActionMode;\n(function (ActionMode) {\n    ActionMode[ActionMode[\"none\"] = 0] = \"none\";\n    ActionMode[ActionMode[\"click\"] = 1] = \"click\";\n    ActionMode[ActionMode[\"longPress\"] = 2] = \"longPress\";\n    ActionMode[ActionMode[\"drag\"] = 3] = \"drag\";\n})(ActionMode || (ActionMode = {}));\nvar ClickMode;\n(function (ClickMode) {\n    ClickMode[ClickMode[\"none\"] = 0] = \"none\";\n    ClickMode[ClickMode[\"left\"] = 1] = \"left\";\n    ClickMode[ClickMode[\"right\"] = 2] = \"right\";\n    ClickMode[ClickMode[\"middle\"] = 3] = \"middle\";\n    ClickMode[ClickMode[\"other\"] = 4] = \"other\";\n    ClickMode[ClickMode[\"key\"] = 5] = \"key\";\n})(ClickMode || (ClickMode = {}));\nvar InputDevice;\n(function (InputDevice) {\n    InputDevice[InputDevice[\"unknown\"] = 0] = \"unknown\";\n    InputDevice[InputDevice[\"mouse\"] = 1] = \"mouse\";\n    InputDevice[InputDevice[\"trackpad\"] = 2] = \"trackpad\";\n    InputDevice[InputDevice[\"touch\"] = 3] = \"touch\";\n})(InputDevice || (InputDevice = {}));\n\nclass TurboMap extends Map {\n    enforceImmutability = true;\n    set(key, value) {\n        return super.set(key, this.enforceImmutability ? this.copy(value) : value);\n    }\n    get(key) {\n        const result = super.get(key);\n        return this.enforceImmutability ? this.copy(result) : result;\n    }\n    get first() {\n        if (this.size == 0)\n            return null;\n        const result = this.values().next().value;\n        return this.enforceImmutability ? this.copy(result) : result;\n    }\n    get last() {\n        if (this.size == 0)\n            return null;\n        const result = this.valuesArray()[this.size - 1];\n        return this.enforceImmutability ? this.copy(result) : result;\n    }\n    keysArray() {\n        return Array.from(this.keys());\n    }\n    valuesArray() {\n        return Array.from(this.values());\n    }\n    copy(value) {\n        if (value && typeof value == \"object\") {\n            if (value instanceof Array)\n                return value.map(item => this.copy(item));\n            if (value.constructor && value.constructor != Object) {\n                if (typeof value.clone == \"function\")\n                    return value.clone();\n                if (typeof value.copy == \"function\")\n                    return value.copy();\n            }\n            return { ...value };\n        }\n        return value;\n    }\n    mapKeys(callback) {\n        const newMap = new TurboMap();\n        for (let [key, value] of this) {\n            newMap.set(callback(key, value), value);\n        }\n        return newMap;\n    }\n    mapValues(callback) {\n        const newMap = new TurboMap();\n        for (let [key, value] of this) {\n            newMap.set(key, callback(key, value));\n        }\n        return newMap;\n    }\n    filter(callback) {\n        const newMap = new TurboMap();\n        for (let [key, value] of this) {\n            if (callback(key, value))\n                newMap.set(key, value);\n        }\n        return newMap;\n    }\n    merge(map) {\n        for (let [key, value] of map) {\n            this.set(key, value);\n        }\n        return this;\n    }\n}\n\n/**\n * @internal\n */\nfunction inferKey(name, type, context) {\n    return name ?? (String(context.name).endsWith(type)\n        ? String(context.name).slice(0, -type.length)\n        : String(context.name));\n}\n/**\n * @internal\n */\nfunction generateField(context, type, name) {\n    const cacheKey = Symbol(`__${type.toLowerCase()}_${String(context.name)}`);\n    const keyName = inferKey(name, type, context);\n    context.addInitializer(function () {\n        Object.defineProperty(this, context.name, {\n            configurable: true,\n            enumerable: false,\n            get: function () {\n                if (this[cacheKey])\n                    return this[cacheKey];\n                let value;\n                let functionName;\n                switch (type) {\n                    case \"Controller\":\n                        functionName = \"getController\";\n                        break;\n                    case \"Handler\":\n                        functionName = \"getHandler\";\n                        break;\n                    case \"Interactor\":\n                        functionName = \"getInteractor\";\n                        break;\n                    case \"Tool\":\n                        functionName = \"getTool\";\n                        break;\n                    case \"Substrate\":\n                        functionName = \"getSubstrate\";\n                        break;\n                }\n                if (!functionName)\n                    return;\n                if (this.mvc && this.mvc instanceof Mvc)\n                    value = this.mvc[functionName](keyName);\n                else if (this[functionName] && typeof this[functionName] === \"function\")\n                    value = this[functionName](keyName);\n                if (!value)\n                    throw new Error(`${type} \"${keyName}\" not found on ${this?.constructor?.name}.`);\n                this[cacheKey] = value;\n                return value;\n            },\n            set: function (value) { this[cacheKey] = value; }\n        });\n    });\n}\n/**\n * @decorator\n * @function controller\n * @description Stage-3 field decorator for MVC structure. It reduces code by turning the decorated field into a\n * fetched controller.\n * @param {string} [name] - The key name of the controller in the MVC instance (if any). By default, it is inferred\n * from the name of the field. If the field is named `somethingController`, the key name will be `something`.\n *\n * @example\n * ```ts\n * @controller() protected textController: TurboController;\n * ```\n * Is equivalent to:\n * ```ts\n * protected get textController(): TurboController {\n *    if (this.mvc instanceof Mvc) return this.mvc.getController(\"text\");\n *    if (typeof this.getController === \"function\") return this.getController(\"text\");\n * }\n * ```\n */\nfunction controller(name) {\n    return function (_unused, context) {\n        generateField(context, \"Controller\", name);\n    };\n}\n/**\n * @decorator\n * @function handler\n * @description Stage-3 field decorator for MVC structure. It reduces code by turning the decorated field into a\n * fetched handler.\n * @param {string} [name] - The key name of the handler in the MVC instance (if any). By default, it is inferred\n * from the name of the field. If the field is named `somethingHandler`, the key name will be `something`.\n *\n * @example\n * ```ts\n * @handler() protected textHandler: TurboHandler;\n * ```\n * Is equivalent to:\n * ```ts\n * protected get textHandler(): TurboHandler {\n *    if (this.mvc instanceof Mvc) return this.mvc.getHandler(\"text\");\n *    if (typeof this.getHandler === \"function\") return this.getHandler(\"text\");\n * }\n * ```\n */\nfunction handler(name) {\n    return function (_unused, context) {\n        generateField(context, \"Handler\", name);\n    };\n}\n/**\n * @decorator\n * @function interactor\n * @description Stage-3 field decorator for MVC structure. It reduces code by turning the decorated field into a\n * fetched interactor.\n * @param {string} [name] - The key name of the interactor in the MVC instance (if any). By default, it is inferred\n * from the name of the field. If the field is named `somethingInteractor`, the key name will be `something`.\n *\n * @example\n * ```ts\n * @interactor() protected textInteractor: TurboInteractor;\n * ```\n * Is equivalent to:\n * ```ts\n * protected get textInteractor(): TurboInteractor {\n *    if (this.mvc instanceof Mvc) return this.mvc.getInteractor(\"text\");\n *    if (typeof this.getInteractor === \"function\") return this.getInteractor(\"text\");\n * }\n * ```\n */\nfunction interactor(name) {\n    return function (_unused, context) {\n        generateField(context, \"Interactor\", name);\n    };\n}\n/**\n * @decorator\n * @function tool\n * @description Stage-3 field decorator for MVC structure. It reduces code by turning the decorated field into a\n * fetched tool.\n * @param {string} [name] - The key name of the tool in the MVC instance (if any). By default, it is inferred\n * from the name of the field. If the field is named `somethingTool`, the key name will be `something`.\n *\n * @example\n * ```ts\n * @tool() protected textTool: TurboTool;\n * ```\n * Is equivalent to:\n * ```ts\n * protected get textTool(): TurboTool {\n *    if (this.mvc instanceof Mvc) return this.mvc.getTool(\"text\");\n *    if (typeof this.getTool === \"function\") return this.getTool(\"text\");\n * }\n * ```\n */\nfunction tool(name) {\n    return function (_unused, context) {\n        generateField(context, \"Tool\", name);\n    };\n}\n/**\n * @decorator\n * @function substrate\n * @description Stage-3 field decorator for MVC structure. It reduces code by turning the decorated field into a\n * fetched substrate.\n * @param {string} [name] - The key name of the substrate in the MVC instance (if any). By default, it is inferred\n * from the name of the field. If the field is named `somethingSubstrate`, the key name will be `something`.\n *\n * @example\n * ```ts\n * @tool() protected textSubstrate: TurboSubstrate;\n * ```\n * Is equivalent to:\n * ```ts\n * protected get textSubstrate(): TurboSubstrate {\n *    if (this.mvc instanceof Mvc) return this.mvc.getSubstrate(\"text\");\n *    if (typeof this.getSubstrate === \"function\") return this.getSubstrate(\"text\");\n * }\n * ```\n */\nfunction substrate(name) {\n    return function (_unused, context) {\n        generateField(context, \"Substrate\", name);\n    };\n}\n\nlet TurboEventManagerModel = (() => {\n    let _classSuper = TurboModel;\n    let _instanceExtraInitializers = [];\n    let _utils_decorators;\n    let _utils_initializers = [];\n    let _utils_extraInitializers = [];\n    let _set_inputDevice_decorators;\n    return class TurboEventManagerModel extends _classSuper {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _utils_decorators = [handler()];\n            _set_inputDevice_decorators = [auto({ callBefore: function (value) { if (value == InputDevice.trackpad)\n                        this.wasRecentlyTrackpad = true; } })];\n            __esDecorate(this, null, _set_inputDevice_decorators, { kind: \"setter\", name: \"inputDevice\", static: false, private: false, access: { has: obj => \"inputDevice\" in obj, set: (obj, value) => { obj.inputDevice = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _utils_decorators, { kind: \"field\", name: \"utils\", static: false, private: false, access: { has: obj => \"utils\" in obj, get: obj => obj.utils, set: (obj, value) => { obj.utils = value; } }, metadata: _metadata }, _utils_initializers, _utils_extraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        utils = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _utils_initializers, void 0));\n        state = (__runInitializers(this, _utils_extraInitializers), {});\n        lockState = {};\n        //Delegate fired when the input device changes\n        onInputDeviceChange = new Delegate();\n        /**\n         * @description Delegate fired when a tool is changed on a certain click button/mode\n         */\n        onToolChange = new Delegate();\n        //Input events states\n        currentKeys = [];\n        currentAction = ActionMode.none;\n        currentClick = ClickMode.none;\n        wasRecentlyTrackpad = false;\n        //Threshold differentiating a click from a drag\n        moveThreshold;\n        //Duration to reach long press\n        longPressDuration;\n        authorizeEventScaling;\n        scaleEventPosition;\n        activePointers = new Set();\n        //Saved values (Maps to account for different touch points and their IDs)\n        origins = new TurboMap();\n        previousPositions = new TurboMap();\n        positions;\n        lastTargetOrigin;\n        //Single timer instance --> easily cancel it and set it again\n        timerMap = new TurboMap();\n        //All created tools\n        tools = new Map();\n        //Tools mapped to keys\n        mappedKeysToTool = new Map();\n        //Tools currently held by the user (one - or none - per each click button/mode)\n        currentTools = new Map();\n        set inputDevice(value) {\n            this.onInputDeviceChange.fire(value);\n        }\n    };\n})();\n\nvar ClosestOrigin;\n(function (ClosestOrigin) {\n    ClosestOrigin[\"target\"] = \"target\";\n    ClosestOrigin[\"position\"] = \"position\";\n})(ClosestOrigin || (ClosestOrigin = {}));\n\n/**\n * Generic turbo event\n */\nlet TurboEvent = (() => {\n    let _classSuper = Event;\n    let _instanceExtraInitializers = [];\n    let _closest_decorators;\n    let _get_scaledPosition_decorators;\n    return class TurboEvent extends _classSuper {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _closest_decorators = [cache()];\n            _get_scaledPosition_decorators = [cache()];\n            __esDecorate(this, null, _closest_decorators, { kind: \"method\", name: \"closest\", static: false, private: false, access: { has: obj => \"closest\" in obj, get: obj => obj.closest }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_scaledPosition_decorators, { kind: \"getter\", name: \"scaledPosition\", static: false, private: false, access: { has: obj => \"scaledPosition\" in obj, get: obj => obj.scaledPosition }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        /**\n         * @description The event manager that fired this event.\n         */\n        eventManager = __runInitializers(this, _instanceExtraInitializers);\n        /**\n         * @description The name of the tool (if any) associated with this event.\n         */\n        toolName;\n        /**\n         * @description The name of the event.\n         */\n        eventName;\n        /**\n         * @description The click mode of the fired event\n         */\n        clickMode;\n        /**\n         * @description The keys pressed when the event was fired\n         */\n        keys;\n        /**\n         * @description The screen position from where the event was fired\n         */\n        position;\n        /**\n         * @description Callback function (or boolean) to be overridden to specify when to allow transformation\n         * and/or scaling.\n         */\n        authorizeScaling;\n        /**\n         * @description Callback function to be overridden to specify how to transform a position from screen to\n         * document space.\n         */\n        scalePosition;\n        constructor(properties) {\n            super(properties.eventName, { bubbles: true, cancelable: true, ...properties.eventInitDict });\n            this.eventManager = properties.eventManager ?? TurboEventManager.instance;\n            this.authorizeScaling = properties.authorizeScaling ?? true;\n            this.scalePosition = properties.scalePosition ?? ((position) => position);\n            this.clickMode = properties.clickMode ?? TurboEventManager.instance.currentClick;\n            this.keys = properties.keys ?? TurboEventManager.instance.currentKeys;\n            this.eventName = properties.eventName;\n            this.position = properties.position;\n            this.toolName = properties.toolName;\n        }\n        /**\n         * @description The tool (if any) associated with this event.\n         */\n        get tool() {\n            if (!this.toolName || !(this.eventManager instanceof TurboEventManager))\n                return null;\n            return this.eventManager.getToolByName(this.toolName);\n        }\n        /**\n         * @description Returns the closest element of the provided type to the target (Searches through the element and\n         * all its parents to find one of matching type).\n         * @param type\n         * @param strict\n         * @param from\n         */\n        closest(type, strict = true, from = ClosestOrigin.target) {\n            const elements = from == ClosestOrigin.target ? [this.target]\n                : document.elementsFromPoint(this.position.x, this.position.y);\n            const strictElement = strict instanceof Element ? strict : null;\n            const isStrict = strict === true || strictElement !== null;\n            for (let element of elements) {\n                while (element && !((element instanceof type)\n                    && (!isStrict || this.isPositionInsideElement(this.position, strictElement ?? element))))\n                    element = element.parentElement;\n                if (element)\n                    return element;\n            }\n            return null;\n        }\n        /**\n         * @description Checks if the position is inside the given element's bounding box.\n         * @param position\n         * @param element\n         */\n        isPositionInsideElement(position, element) {\n            const rect = element.getBoundingClientRect();\n            return position.x >= rect.left && position.x <= rect.right\n                && position.y >= rect.top && position.y <= rect.bottom;\n        }\n        /**\n         * @description The target of the event (as an Element - or the document)\n         */\n        get target() {\n            return super.target || document;\n        }\n        /**\n         * @description The position of the fired event transformed and/or scaled using the class's scalePosition().\n         */\n        get scaledPosition() {\n            if (!this.scalingAuthorized)\n                return this.position;\n            return this.scalePosition(this.position);\n        }\n        /**\n         * @description Specifies whether to allow transformation and/or scaling.\n         */\n        get scalingAuthorized() {\n            return typeof this.authorizeScaling == \"function\" ? this.authorizeScaling() : this.authorizeScaling;\n        }\n        /**\n         * @private\n         * @description Takes a map of points and returns a new map where each point is transformed accordingly.\n         * @param positions\n         */\n        scalePositionsMap(positions) {\n            return positions.mapValues((key, position) => this.scalePosition(position));\n        }\n    };\n})();\n\n/**\n * @class TurboKeyEvent\n * @extends TurboEvent\n * @description Custom key event\n */\nclass TurboKeyEvent extends TurboEvent {\n    /**\n     * @description The key pressed (if any) when the event was fired\n     */\n    keyPressed;\n    /**\n     * @description The key released (if any) when the event was fired\n     */\n    keyReleased;\n    constructor(properties) {\n        super({ ...properties, position: null });\n        this.keyPressed = properties.keyPressed;\n        this.keyReleased = properties.keyReleased;\n    }\n}\n\n/**\n * @class TurboController\n * @description The MVC base controller class. Its main job is to handle some part of (or all of) the logic of the\n * component. It has access to the element, the model to read and write data, the view to update the UI, and the\n * emitter to listen for changes in the model or any other internal events. It can only communicate with other\n * controllers via the emitter (by firing or listening for changes on a certain key).\n * @template {object} ElementType - The type of the main component.\n * @template {TurboView} ViewType - The element's MVC view type.\n * @template {TurboModel} ModelType - The element's MVC model type.\n * @template {TurboEmitter} EmitterType - The element's MVC emitter type.\n */\nclass TurboController {\n    /**\n     * @description The key of the controller. Used to retrieve it in the main component. If not set, if the element's\n     * class name is MyElement and the controller's class name is MyElementSomethingController, the key would\n     * default to \"something\".\n     */\n    keyName;\n    /**\n     * @description The element it is bound to.\n     */\n    element;\n    /**\n     * @description The MVC view.\n     */\n    view;\n    /**\n     * @description The MVC model.\n     */\n    model;\n    /**\n     * @description The MVC emitter.\n     */\n    emitter;\n    constructor(properties) {\n        this.element = properties.element;\n        if (properties.model)\n            this.model = properties.model;\n        if (properties.emitter)\n            this.emitter = properties.emitter;\n        if (properties.view)\n            this.view = properties.view;\n    }\n    /**\n     * @function initialize\n     * @description Initializes the controller. Specifically, it will set up the change callbacks.\n     */\n    initialize() {\n        this.setupChangedCallbacks();\n    }\n    /**\n     * @function setupChangedCallbacks\n     * @description Setup method intended to initialize change listeners and callbacks.\n     * @protected\n     */\n    setupChangedCallbacks() {\n        initializeEffects(this);\n    }\n}\n\nclass TurboEventManagerKeyController extends TurboController {\n    keyName = \"key\";\n    keyDown = (e) => this.keyDownFn(e);\n    keyDownFn(e) {\n        if (!this.element.enabled)\n            return;\n        //Return if key already pressed\n        if (this.model.currentKeys.includes(e.key))\n            return;\n        //Add key to currentKeys\n        this.model.currentKeys.push(e.key);\n        //Fire a keyPressed event (only once)\n        this.emitter.fire(\"dispatchEvent\", document, TurboKeyEvent, { eventName: TurboKeyEventName.keyPressed, keyPressed: e.key });\n    }\n    keyUp = (e) => this.keyUpFn(e);\n    keyUpFn(e) {\n        if (!this.element.enabled)\n            return;\n        //Return if key not pressed\n        if (!this.model.currentKeys.includes(e.key))\n            return;\n        //Remove key from currentKeys\n        this.model.currentKeys.splice(this.model.currentKeys.indexOf(e.key), 1);\n        //Fire a keyReleased event\n        this.emitter.fire(\"dispatchEvent\", document, TurboKeyEvent, { eventName: TurboKeyEventName.keyReleased, keyReleased: e.key });\n    }\n}\n\n/**\n * @class TurboWheelEvent\n * @extends TurboEvent\n * @description Custom wheel event\n */\nclass TurboWheelEvent extends TurboEvent {\n    /**\n     * @description The delta amount of scrolling\n     */\n    delta;\n    constructor(properties) {\n        super({ ...properties, position: null });\n        this.delta = properties.delta;\n    }\n}\n\nclass Point {\n    x;\n    y;\n    constructor(x = 0, y = typeof x == \"number\" ? x : 0) {\n        if (typeof x == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else if (\"clientX\" in x) {\n            this.x = x.clientX;\n            this.y = x.clientY;\n        }\n        else if (\"x\" in x) {\n            this.x = x.x;\n            this.y = x.y;\n        }\n        else {\n            this.x = x[0];\n            this.y = x[1];\n        }\n    }\n    // Static methods\n    /**\n     * @description Calculate the distance between two Position2D points.\n     * @param {Point} p1 - First point\n     * @param {Point} p2 - Second point\n     */\n    static dist(p1, p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n    /**\n     * @description Calculate the mid-point from the provided points\n     * @param {Point[]} arr - Undetermined number of point parameters\n     */\n    static midPoint(...arr) {\n        if (arr.length == 0)\n            return null;\n        const x = arr.reduce((sum, p) => sum + p.x, 0) / arr.length;\n        const y = arr.reduce((sum, p) => sum + p.y, 0) / arr.length;\n        return new Point(x, y);\n    }\n    /**\n     * @description Calculate the max on both x and y from the provided points\n     * @param {Point[]} arr - Undetermined number of point parameters\n     */\n    static max(...arr) {\n        if (arr.length == 0)\n            return null;\n        const x = arr.reduce((max, p) => Math.max(max, p.x), -Infinity);\n        const y = arr.reduce((max, p) => Math.max(max, p.y), -Infinity);\n        return new Point(x, y);\n    }\n    /**\n     * @description Calculate the min on both x and y from the provided points\n     * @param {Point[]} arr - Undetermined number of point parameters\n     */\n    static min(...arr) {\n        if (arr.length == 0)\n            return null;\n        const x = arr.reduce((min, p) => Math.min(min, p.x), Infinity);\n        const y = arr.reduce((min, p) => Math.min(min, p.y), Infinity);\n        return new Point(x, y);\n    }\n    // Instance methods\n    get object() {\n        return { x: this.x, y: this.y };\n    }\n    equals(x, y = 0) {\n        if (typeof x == \"number\")\n            return this.x == x && this.y == y;\n        return this.x == x.x && this.y == x.y;\n    }\n    boundX(x1, x2) {\n        return this.x < x1 ? x1\n            : this.x > x2 ? x2\n                : this.x;\n    }\n    boundY(y1, y2) {\n        return this.y < y1 ? y1\n            : this.y > y2 ? y2\n                : this.y;\n    }\n    bound(x1, x2, y1 = x1, y2 = x2) {\n        return new Point(this.boundX(x1, x2), this.boundY(y1, y2));\n    }\n    add(x, y) {\n        if (typeof x == \"number\")\n            return new Point(this.x + x, this.y + (y || y == 0 ? y : x));\n        return new Point(this.x + x.x, this.y + x.y);\n    }\n    sub(x, y) {\n        if (typeof x == \"number\")\n            return new Point(this.x - x, this.y - (y || y == 0 ? y : x));\n        return new Point(this.x - x.x, this.y - x.y);\n    }\n    mul(x, y) {\n        if (typeof x == \"number\")\n            return new Point(this.x * x, this.y * (y || y == 0 ? y : x));\n        return new Point(this.x * x.x, this.y * x.y);\n    }\n    div(x, y) {\n        if (typeof x == \"number\")\n            return new Point(this.x / x, this.y / (y || y == 0 ? y : x));\n        return new Point(this.x / x.x, this.y / x.y);\n    }\n    mod(x, y) {\n        const modDiv = typeof x == \"number\" ?\n            { x: x, y: (y || y == 0 ? y : x) } : { x: x.x, y: x.y };\n        const temp = this.object;\n        while (temp.x < 0)\n            temp.x += modDiv.x;\n        while (temp.x >= modDiv.x)\n            temp.x -= modDiv.x;\n        while (temp.y < 0)\n            temp.y += modDiv.y;\n        while (temp.y >= modDiv.y)\n            temp.y -= modDiv.y;\n        return new Point(temp);\n    }\n    /**\n     * @description Calculate the absolute value of the coordinates\n     * @returns A new Point object with the absolute values\n     */\n    get abs() {\n        return new Point(Math.abs(this.x), Math.abs(this.y));\n    }\n    /**\n     * @description Get the maximum value between x and y coordinates\n     * @returns The maximum value\n     */\n    get max() {\n        return Math.max(this.x, this.y);\n    }\n    /**\n     * @description Get the minimum value between x and y coordinates\n     * @returns The minimum value\n     */\n    get min() {\n        return Math.min(this.x, this.y);\n    }\n    get length2() {\n        return this.x * this.x + this.y * this.y;\n    }\n    get length() {\n        return Math.sqrt(this.length2);\n    }\n    dot(p) {\n        return this.x * p.x + this.y * p.y;\n    }\n    /**\n     * @description Create a copy of the current point\n     * @returns A new Point object with the same coordinates\n     */\n    copy() {\n        return new Point(this.x, this.y);\n    }\n    /**\n     * @description Get the coordinates as an array\n     * @returns An array with x and y coordinates\n     */\n    arr() {\n        return [this.x, this.y];\n    }\n}\n\nclass TurboEventManagerWheelController extends TurboController {\n    keyName = \"wheel\";\n    wheel = (e) => {\n        if (!this.element.enabled)\n            return;\n        //Prevent default scroll behavior\n        if (this.element.preventDefaultWheel)\n            e.preventDefault();\n        //Most likely trackpad\n        if (Math.abs(e.deltaY) <= 40 || e.deltaX != 0)\n            this.model.inputDevice = InputDevice.trackpad;\n        //Set input device to mouse if it wasn't trackpad recently\n        if (!this.model.wasRecentlyTrackpad)\n            this.model.inputDevice = InputDevice.mouse;\n        //Reset trackpad timer\n        this.model.utils.clearTimer(\"recentlyTrackpadTimer\");\n        //Set timer to clear recently trackpad boolean after a delay\n        this.model.utils.setTimer(\"recentlyTrackpadTimer\", () => {\n            if (this.model.inputDevice == InputDevice.trackpad)\n                this.model.wasRecentlyTrackpad = false;\n        }, 800);\n        //Get name of event according to input type\n        let eventName;\n        //Trackpad pinching (for some reason Ctrl key is marked as pressed in the WheelEvent)\n        if (this.model.inputDevice == InputDevice.trackpad && e.ctrlKey)\n            eventName = TurboEventName.trackpadPinch;\n        //Trackpad zooming\n        else if (this.model.inputDevice == InputDevice.trackpad)\n            eventName = TurboEventName.trackpadScroll;\n        //Mouse scrolling\n        else\n            eventName = TurboEventName.mouseWheel;\n        this.emitter.fire(\"dispatchEvent\", document, TurboWheelEvent, { delta: new Point(e.deltaX, e.deltaY), eventName: eventName });\n    };\n}\n\n/**\n * @class TurboDragEvent\n * @extends TurboEvent\n * @description Turbo drag event class, fired on turbo-drag, turbo-drag-start, turbo-drag-end, etc.\n */\nlet TurboDragEvent = (() => {\n    let _classSuper = TurboEvent;\n    let _instanceExtraInitializers = [];\n    let _get_scaledOrigins_decorators;\n    let _get_scaledPreviousPositions_decorators;\n    let _get_scaledPositions_decorators;\n    let _get_deltaPositions_decorators;\n    let _get_deltaPosition_decorators;\n    let _get_scaledDeltaPositions_decorators;\n    let _get_scaledDeltaPosition_decorators;\n    return class TurboDragEvent extends _classSuper {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _get_scaledOrigins_decorators = [cache()];\n            _get_scaledPreviousPositions_decorators = [cache()];\n            _get_scaledPositions_decorators = [cache()];\n            _get_deltaPositions_decorators = [cache()];\n            _get_deltaPosition_decorators = [cache()];\n            _get_scaledDeltaPositions_decorators = [cache()];\n            _get_scaledDeltaPosition_decorators = [cache()];\n            __esDecorate(this, null, _get_scaledOrigins_decorators, { kind: \"getter\", name: \"scaledOrigins\", static: false, private: false, access: { has: obj => \"scaledOrigins\" in obj, get: obj => obj.scaledOrigins }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_scaledPreviousPositions_decorators, { kind: \"getter\", name: \"scaledPreviousPositions\", static: false, private: false, access: { has: obj => \"scaledPreviousPositions\" in obj, get: obj => obj.scaledPreviousPositions }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_scaledPositions_decorators, { kind: \"getter\", name: \"scaledPositions\", static: false, private: false, access: { has: obj => \"scaledPositions\" in obj, get: obj => obj.scaledPositions }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_deltaPositions_decorators, { kind: \"getter\", name: \"deltaPositions\", static: false, private: false, access: { has: obj => \"deltaPositions\" in obj, get: obj => obj.deltaPositions }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_deltaPosition_decorators, { kind: \"getter\", name: \"deltaPosition\", static: false, private: false, access: { has: obj => \"deltaPosition\" in obj, get: obj => obj.deltaPosition }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_scaledDeltaPositions_decorators, { kind: \"getter\", name: \"scaledDeltaPositions\", static: false, private: false, access: { has: obj => \"scaledDeltaPositions\" in obj, get: obj => obj.scaledDeltaPositions }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_scaledDeltaPosition_decorators, { kind: \"getter\", name: \"scaledDeltaPosition\", static: false, private: false, access: { has: obj => \"scaledDeltaPosition\" in obj, get: obj => obj.scaledDeltaPosition }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        /**\n         * @description Map containing the origins of the dragging points\n         */\n        origins = __runInitializers(this, _instanceExtraInitializers);\n        /**\n         * @description Map containing the previous positions of the dragging points\n         */\n        previousPositions;\n        /**\n         * @description Map containing the positions of the dragging points\n         */\n        positions;\n        constructor(properties) {\n            super({ ...properties, position: properties.positions.first });\n            this.origins = properties.origins;\n            this.previousPositions = properties.previousPositions;\n            this.positions = properties.positions; //TODO MOVE TO DEFAULT EVENT\n        }\n        /**\n         * @description Map of the origins mapped to the current canvas translation and scale\n         */\n        get scaledOrigins() {\n            if (!this.scalingAuthorized)\n                return this.origins;\n            return this.scalePositionsMap(this.origins);\n        }\n        /**\n         * @description Map of the previous positions mapped to the current canvas translation and scale\n         */\n        get scaledPreviousPositions() {\n            if (!this.scalingAuthorized)\n                return this.previousPositions;\n            return this.scalePositionsMap(this.previousPositions);\n        }\n        /**\n         * @description Map of the positions mapped to the current canvas translation and scale\n         */\n        get scaledPositions() {\n            if (!this.scalingAuthorized)\n                return this.positions;\n            return this.scalePositionsMap(this.positions);\n        }\n        get deltaPositions() {\n            return this.positions.mapValues((key, position) => {\n                const previousPosition = this.previousPositions.get(key);\n                if (previousPosition)\n                    return position.sub(previousPosition);\n            });\n        }\n        get deltaPosition() {\n            return Point.midPoint(...this.deltaPositions.valuesArray());\n        }\n        get scaledDeltaPositions() {\n            return this.scaledPositions.mapValues((key, position) => {\n                const previousPosition = this.scaledPreviousPositions.get(key);\n                if (previousPosition)\n                    return position.sub(previousPosition);\n            });\n        }\n        get scaledDeltaPosition() {\n            return Point.midPoint(...this.scaledDeltaPositions.valuesArray());\n        }\n    };\n})();\n\nclass TurboEventManagerPointerController extends TurboController {\n    keyName = \"pointer\";\n    pointerDown = (e) => this.pointerDownFn(e);\n    pointerMove = (e) => this.pointerMoveFn(e);\n    pointerUp = (e) => this.pointerUpFn(e);\n    pointerCancel = (e) => this.pointerCancelFn(e);\n    lostPointerCapture = (e) => this.lostPointerCaptureFn(e);\n    pointerDownFn(e) {\n        if (!e.composedPath().includes(this.model.lockState.lockOrigin)) {\n            document.activeElement?.blur?.();\n            this.element.unlock();\n        }\n        if (!this.element.enabled)\n            return;\n        //Check if it's touch\n        const isTouch = e.pointerType === \"touch\";\n        //Prevent default actions (especially useful for touch events on iOS and iPadOS)\n        if (this.element.preventDefaultMouse && !isTouch)\n            e.preventDefault();\n        if (this.element.preventDefaultTouch && isTouch)\n            e.preventDefault();\n        //Update input device\n        if (isTouch)\n            this.model.inputDevice = InputDevice.touch;\n        else if (this.model.inputDevice === InputDevice.unknown || this.model.inputDevice === InputDevice.touch)\n            this.model.inputDevice = InputDevice.mouse;\n        //Initialize origin & previous position using pointerId\n        const id = e.pointerId;\n        const position = new Point(e.clientX, e.clientY);\n        this.model.origins.set(id, position);\n        this.model.previousPositions.set(id, position);\n        //Capture this pointer so we keep receiving move/up even if the pointer leaves the element\n        const target = document.elementFromPoint(position.x, position.y);\n        if (target)\n            target.setPointerCapture?.(e.pointerId);\n        //Update click mode\n        this.model.activePointers.add(id);\n        this.model.utils.setClickMode(isTouch ? this.model.activePointers.size : e.button, isTouch);\n        //Return if click events are disabled\n        if (!this.element.clickEventEnabled)\n            return;\n        // Fire click start\n        this.fireClick(this.model.origins.first, TurboEventName.clickStart);\n        this.model.currentAction = ActionMode.click;\n        // Long-press timer\n        this.model.utils.setTimer(TurboEventName.longPress, () => {\n            if (this.model.currentAction !== ActionMode.click)\n                return;\n            this.model.currentAction = ActionMode.longPress;\n            this.fireClick(this.model.origins.first, TurboEventName.longPress);\n        }, this.model.longPressDuration);\n    }\n    pointerMoveFn(e) {\n        if (!this.element.enabled)\n            return;\n        if (!this.element.moveEventsEnabled && !this.element.dragEventEnabled)\n            return;\n        //Check if is touch\n        const isTouch = e.pointerType === \"touch\";\n        //Prevent default actions\n        if (this.element.preventDefaultMouse && !isTouch)\n            e.preventDefault();\n        if (this.element.preventDefaultTouch && isTouch)\n            e.preventDefault();\n        //New positions map\n        this.model.positions = new TurboMap();\n        // Only update the current pointer’s position (others remain tracked from prior moves)\n        this.model.positions.set(e.pointerId, new Point(e.clientX, e.clientY));\n        // Clear cached target origin if not dragging\n        if (this.model.currentAction !== ActionMode.drag)\n            this.model.lastTargetOrigin = null;\n        //Fire move event if enabled\n        if (this.element.moveEventsEnabled)\n            this.fireDrag(this.model.positions, TurboEventName.move);\n        //If drag events are enabled and user is interacting\n        if (this.model.currentAction !== ActionMode.none && this.element.dragEventEnabled) {\n            //Initialize drag\n            if (this.model.currentAction !== ActionMode.drag) {\n                //Check if any tracked origin moved beyond threshold\n                if (!Array.from(this.model.origins.entries()).some(([key, origin]) => {\n                    const p = (key === e.pointerId)\n                        ? this.model.positions.get(key)\n                        : this.model.previousPositions.get(key);\n                    return p && Point.dist(p, origin) > this.model.moveThreshold;\n                }))\n                    return;\n                //If didn't return --> fire drag start and set action to drag\n                clearCache(this);\n                this.fireDrag(this.model.origins, TurboEventName.dragStart);\n                this.model.currentAction = ActionMode.drag;\n            }\n            //Fire drag step\n            this.fireDrag(this.model.positions);\n        }\n        //Update previous positions for the moved pointer\n        this.model.previousPositions.set(e.pointerId, this.model.positions.get(e.pointerId));\n    }\n    pointerUpFn(e) {\n        if (!this.element.enabled)\n            return;\n        //Check if is touch\n        const isTouch = e.pointerType === \"touch\";\n        //Prevent default actions\n        if (this.element.preventDefaultMouse && !isTouch)\n            e.preventDefault();\n        if (this.element.preventDefaultTouch && isTouch)\n            e.preventDefault();\n        //Clear any timer set\n        this.model.utils.clearTimer(TurboEventName.longPress);\n        //Initialize a new positions map\n        this.model.positions = new TurboMap();\n        this.model.positions.set(e.pointerId, new Point(e.clientX, e.clientY));\n        //If action was drag --> fire drag end\n        if (this.model.currentAction === ActionMode.drag && this.element.dragEventEnabled) {\n            this.fireDrag(this.model.positions, TurboEventName.dragEnd);\n        }\n        //If click events are enabled\n        if (this.element.clickEventEnabled) {\n            //If action is click --> fire click\n            if (this.model.currentAction === ActionMode.click) {\n                this.fireClick(this.model.positions.first, TurboEventName.click);\n            }\n            //Fire click end\n            this.fireClick(this.model.origins.first, TurboEventName.clickEnd);\n        }\n        //Cleanup for this pointerId only\n        this.model.origins.delete(e.pointerId);\n        this.model.previousPositions.delete(e.pointerId);\n        this.model.activePointers.delete(e.pointerId);\n        //If no more active pointers, reset modes\n        if (this.model.activePointers.size === 0) {\n            this.model.currentAction = ActionMode.none;\n            this.model.currentClick = ClickMode.none;\n        }\n    }\n    pointerCancelFn(e) {\n        //Treat like an aborted drag/click\n        this.model.utils.clearTimer(TurboEventName.longPress);\n        this.model.origins.delete(e.pointerId);\n        this.model.previousPositions.delete(e.pointerId);\n        this.model.activePointers.delete(e.pointerId);\n        if (this.model.activePointers.size === 0) {\n            this.model.currentAction = ActionMode.none;\n            this.model.currentClick = ClickMode.none;\n        }\n    }\n    lostPointerCaptureFn(_e) {\n        // Optional: cleanup or fallback if needed\n    }\n    /**\n     * @description Fires a custom Turbo click event at the click target with the click position\n     * @param p\n     * @param eventName\n     * @private\n     */\n    fireClick(p, eventName = TurboEventName.click) {\n        if (!p)\n            return;\n        const target = document.elementFromPoint(p.x, p.y) || document;\n        this.emitter.fire(\"dispatchEvent\", target, TurboEvent, { position: p, eventName: eventName });\n    }\n    /**\n     * @description Fires a custom Turbo drag event at the target with the origin of the drag, the last drag position, and the current position\n     * @param positions\n     * @param eventName\n     * @private\n     */\n    fireDrag(positions, eventName = TurboEventName.drag) {\n        if (!positions)\n            return;\n        this.emitter.fire(\"dispatchEvent\", this.getFireOrigin(positions), TurboDragEvent, {\n            positions: positions,\n            previousPositions: this.model.previousPositions,\n            origins: this.model.origins,\n            eventName: eventName\n        });\n    }\n    getFireOrigin(positions, reload = false) {\n        if (!this.model.lastTargetOrigin || reload) {\n            const origin = this.model.origins.first ? this.model.origins.first : positions.first;\n            this.model.lastTargetOrigin = document.elementFromPoint(origin.x, origin.y);\n        }\n        return this.model.lastTargetOrigin;\n    }\n}\n\nclass TurboWeakSet {\n    _weakRefs;\n    constructor() {\n        this._weakRefs = new Set();\n    }\n    // Add an object as a WeakRef if it's not already in the set\n    add(obj) {\n        if (!this.has(obj))\n            this._weakRefs.add(new WeakRef(obj));\n        return this;\n    }\n    // Check if the set contains a WeakRef to the given object\n    has(obj) {\n        for (const weakRef of this._weakRefs) {\n            if (weakRef.deref() === obj)\n                return true;\n        }\n        return false;\n    }\n    // Delete the WeakRef associated with the given object\n    delete(obj) {\n        for (const weakRef of this._weakRefs) {\n            if (weakRef.deref() === obj) {\n                this._weakRefs.delete(weakRef);\n                return true;\n            }\n        }\n        return false;\n    }\n    // Clean up any WeakRefs whose objects have been garbage-collected\n    cleanup() {\n        for (const weakRef of this._weakRefs) {\n            if (weakRef.deref() === undefined)\n                this._weakRefs.delete(weakRef);\n        }\n    }\n    // Convert live objects in the TurboWeakSet to an array\n    toArray() {\n        const result = [];\n        for (const weakRef of this._weakRefs) {\n            const obj = weakRef.deref();\n            if (obj !== undefined)\n                result.push(obj);\n            else\n                this._weakRefs.delete(weakRef);\n        }\n        return result;\n    }\n    // Get the size of the TurboWeakSet (only live objects)\n    get size() {\n        this.cleanup();\n        return this.toArray().length;\n    }\n    // Clear all weak references\n    clear() {\n        this._weakRefs.clear();\n    }\n}\n\nclass TurboEventManagerDispatchController extends TurboController {\n    keyName = \"dispatch\";\n    boundHooks = new Map();\n    setupChangedCallbacks() {\n        super.setupChangedCallbacks();\n        this.emitter.add(\"dispatchEvent\", this.dispatchEvent);\n    }\n    dispatchEvent = (target, eventType, properties) => {\n        if (!target)\n            return;\n        properties.keys = this.model.currentKeys;\n        properties.toolName = this.element.getCurrentToolName(this.model.currentClick);\n        properties.clickMode = this.model.currentClick;\n        properties.eventManager = this.element;\n        properties.eventInitDict = { bubbles: true, cancelable: true, composed: true };\n        properties.authorizeScaling = this.element.authorizeEventScaling;\n        properties.scalePosition = this.element.scaleEventPosition;\n        if (properties.eventName === TurboKeyEventName.keyPressed)\n            this.element.setToolByKey(properties[\"keyPressed\"]);\n        else if (properties.eventName === TurboKeyEventName.keyReleased)\n            this.element.setTool(undefined, ClickMode.key, { select: false });\n        target.dispatchEvent(new eventType(properties));\n    };\n    getToolHandlingCallback(type, e) {\n        const toolName = this.element.getCurrentToolName(this.model.currentClick);\n        const path = e.composedPath?.() || [];\n        for (let i = path.length - 1; i >= 0; i--) {\n            if (!(path[i] instanceof Node))\n                continue;\n            if ($(path[i]).executeAction(type, toolName, e, { capture: true }, this.element)) {\n                e.stopPropagation();\n                break;\n            }\n        }\n        for (let i = 0; i < path.length; i++) {\n            if (!(path[i] instanceof Node))\n                continue;\n            if ($(path[i]).executeAction(type, toolName, e, undefined, this.element)) {\n                e.stopPropagation();\n                break;\n            }\n        }\n    }\n    setupCustomDispatcher(type) {\n        if (this.boundHooks.has(type))\n            return;\n        const hook = (e) => this.getToolHandlingCallback(type, e);\n        this.boundHooks.set(type, hook);\n        document.addEventListener(type, hook, { capture: true });\n    }\n    removeCustomDispatcher(type) {\n        const hook = this.boundHooks.get(type);\n        if (!hook)\n            return;\n        document.removeEventListener(type, hook, { capture: true });\n        this.boundHooks.delete(type);\n    }\n}\n\n/**\n * @class TurboHandler\n * @description The MVC base handler class. It's an extension of the model, and its main job is to provide some utility\n * functions to manipulate some of (or all of) the model's data.\n * @template {TurboModel} ModelType - The element's MVC model type.\n */\nclass TurboHandler {\n    /**\n     * @description The key of the handler. Used to retrieve it in the main component. If not set, if the element's\n     * class name is MyElement and the handler's class name is MyElementSomethingHandler, the key would\n     * default to \"something\".\n     */\n    keyName;\n    /**\n     * @description The MVC model.\n     * @protected\n     */\n    model;\n    constructor(model) {\n        if (this.model)\n            this.model = model;\n    }\n}\n\nclass TurboEventManagerUtilsHandler extends TurboHandler {\n    keyName = \"utils\";\n    setClickMode(button, isTouch = false) {\n        if (isTouch)\n            button--;\n        switch (button) {\n            case -1:\n                this.model.currentClick = ClickMode.none;\n                return;\n            case 0:\n                this.model.currentClick = ClickMode.left;\n                return;\n            case 1:\n                this.model.currentClick = ClickMode.middle;\n                return;\n            case 2:\n                this.model.currentClick = ClickMode.right;\n                return;\n            default:\n                this.model.currentClick = ClickMode.other;\n                return;\n        }\n    }\n    applyEventNames(eventNames) {\n        for (const eventName in eventNames)\n            DefaultEventName[eventName] = eventNames[eventName];\n    }\n    //Sets a timer function associated with a certain event name, with its duration\n    setTimer(timerName, callback, duration) {\n        this.clearTimer(timerName);\n        this.model.timerMap.set(timerName, setTimeout(() => {\n            callback();\n            this.clearTimer(timerName);\n        }, duration));\n    }\n    //Clears timer associated with the provided event name\n    clearTimer(timerName) {\n        const timer = this.model.timerMap.get(timerName);\n        if (!timer)\n            return;\n        clearTimeout(timer);\n        this.model.timerMap.delete(timerName);\n    }\n    selectTool(element, value) {\n        if (\"selected\" in element && typeof element[\"selected\"] === \"boolean\")\n            element[\"selected\"] = value;\n    }\n    activateTool(element, toolName, value) {\n        if (value)\n            $(element).onToolActivate(toolName).fire();\n        else\n            $(element).onToolDeactivate(toolName).fire();\n    }\n}\n\n/**\n * Define MVC-style accessors on a class prototype via Object.defineProperty.\n * Adds: selected, view, model, data, dataId, dataIndex, dataSize\n */\nfunction defineMvcAccessors(constructor) {\n    const prototype = constructor.prototype;\n    Object.defineProperty(prototype, \"view\", {\n        get() { return this.mvc?.view; },\n        set(view) {\n            if (!this.mvc)\n                throw new Error(\"view: missing this.mvc\");\n            this.mvc.view = view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(prototype, \"model\", {\n        get() { return this.mvc?.model; },\n        set(model) {\n            if (!this.mvc)\n                throw new Error(\"model: missing this.mvc\");\n            this.mvc.model = model;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(prototype, \"data\", {\n        get() { return this.mvc?.data; },\n        set(data) {\n            if (!this.mvc)\n                throw new Error(\"data: missing this.mvc\");\n            this.mvc.data = data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(prototype, \"dataId\", {\n        get() { return this.mvc?.dataId; },\n        set(v) {\n            if (!this.mvc)\n                throw new Error(\"dataId: missing this.mvc\");\n            this.mvc.dataId = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(prototype, \"dataIndex\", {\n        get() { return this.mvc?.dataIndex; },\n        set(v) {\n            if (!this.mvc)\n                throw new Error(\"dataIndex: missing this.mvc\");\n            this.mvc.dataIndex = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(prototype, \"dataSize\", {\n        get() { return this.mvc?.dataSize; },\n        enumerable: true,\n        configurable: true\n    });\n}\n\nfunction defineDefaultProperties(constructor) {\n    const prototype = constructor.prototype;\n    const selectedKey = Symbol(\"__selected__\");\n    const selectedClass = Symbol(\"__selectedClass__\");\n    const initializedKey = Symbol(\"__initialized__\");\n    Object.defineProperty(prototype, \"selected\", {\n        get() { return !!this[selectedKey]; },\n        set(value) {\n            const element = this instanceof Element ? this : this.element instanceof Element ? this.element : undefined;\n            if (!element) {\n                this[selectedKey] = value;\n                return;\n            }\n            const prevClass = this[selectedClass];\n            const nextClass = this.getPropertiesValue?.(null, \"defaultSelectedClass\", \"selected\") ?? \"selected\";\n            this[selectedKey] = value;\n            this[selectedClass] = nextClass;\n            if (prevClass && prevClass !== nextClass)\n                $(element).toggleClass(prevClass, false);\n            $(element).toggleClass(nextClass, !!value);\n        },\n        enumerable: true,\n        configurable: true,\n    });\n    Object.defineProperty(prototype, \"getPropertiesValue\", {\n        value: function (propertiesValue, configFieldName, defaultValue) {\n            if (propertiesValue !== undefined && propertiesValue !== null)\n                return propertiesValue;\n            let constructor = this.constructor;\n            while (constructor) {\n                const configValue = constructor.config?.[configFieldName];\n                if (configValue !== undefined && configValue !== null)\n                    return configValue;\n                constructor = Object.getPrototypeOf(constructor);\n            }\n            return defaultValue;\n        },\n        configurable: true,\n        enumerable: false,\n    });\n    Object.defineProperty(prototype, \"destroy\", {\n        value: function () { },\n        configurable: true,\n        enumerable: false,\n    });\n    Object.defineProperty(prototype, \"initialized\", {\n        get: function () {\n            return this[initializedKey] ?? false;\n        },\n        configurable: true,\n        enumerable: false,\n    });\n    Object.defineProperty(prototype, \"initialize\", {\n        value: function () {\n            if (this[initializedKey])\n                return;\n            this.setupUIElements?.();\n            this.setupUILayout?.();\n            this.setupUIListeners?.();\n            this.setupChangedCallbacks?.();\n            if (this.mvc && this.mvc instanceof Mvc)\n                this.mvc.initialize();\n            initializeEffects(this);\n            this[initializedKey] = true;\n        },\n        configurable: true,\n        enumerable: false,\n    });\n}\n\n/**\n * @class TurboHeadlessElement\n * @description TurboHeadlessElement class, similar to TurboElement but without extending HTMLElement.\n * @template {TurboView} ViewType - The element's view type, if initializing MVC.\n * @template {object} DataType - The element's data type, if initializing MVC.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if initializing MVC.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if initializing MVC.\n */\nclass TurboHeadlessElement {\n    /**\n     * @description Static configuration object.\n     */\n    static config = {};\n    /**\n     * @description Update the class's static configurations. Will only overwrite the set properties.\n     * @property {typeof this.config} value - The object containing the new configurations.\n     */\n    static configure(value) {\n        Object.entries(value).forEach(([key, val]) => {\n            if (val !== undefined)\n                this.config[key] = val;\n        });\n    }\n    /**\n     * @description The MVC handler of the element. If initialized, turns the element into an MVC structure.\n     * @protected\n     */\n    mvc;\n    constructor(properties = {}) {\n        this.mvc = new Mvc({ ...properties, element: this });\n    }\n}\n(() => {\n    defineDefaultProperties(TurboHeadlessElement);\n    defineMvcAccessors(TurboHeadlessElement);\n})();\n\n//TODO Create merged events maybe --> fire event x when \"mousedown\" | \"touchstart\" | \"mousemove\" etc.\n//ToDO Create \"interaction\" event --> when element interacted with\n/**\n * @description Class that manages default mouse, trackpad, and touch events, and accordingly fires custom events for\n * easier management of input.\n */\nlet TurboEventManager = (() => {\n    let _classSuper = TurboHeadlessElement;\n    let _instanceExtraInitializers = [];\n    let _keyController_decorators;\n    let _keyController_initializers = [];\n    let _keyController_extraInitializers = [];\n    let _wheelController_decorators;\n    let _wheelController_initializers = [];\n    let _wheelController_extraInitializers = [];\n    let _pointerController_decorators;\n    let _pointerController_initializers = [];\n    let _pointerController_extraInitializers = [];\n    let _dispatchController_decorators;\n    let _dispatchController_initializers = [];\n    let _dispatchController_extraInitializers = [];\n    let _set_keyEventsEnabled_decorators;\n    let _set_wheelEventsEnabled_decorators;\n    let _set_moveEventsEnabled_decorators;\n    let _set_mouseEventsEnabled_decorators;\n    let _set_touchEventsEnabled_decorators;\n    let _set_clickEventEnabled_decorators;\n    let _set_dragEventEnabled_decorators;\n    return class TurboEventManager extends _classSuper {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _keyController_decorators = [controller()];\n            _wheelController_decorators = [controller()];\n            _pointerController_decorators = [controller()];\n            _dispatchController_decorators = [controller()];\n            _set_keyEventsEnabled_decorators = [auto()];\n            _set_wheelEventsEnabled_decorators = [auto()];\n            _set_moveEventsEnabled_decorators = [auto()];\n            _set_mouseEventsEnabled_decorators = [auto()];\n            _set_touchEventsEnabled_decorators = [auto()];\n            _set_clickEventEnabled_decorators = [auto()];\n            _set_dragEventEnabled_decorators = [auto()];\n            __esDecorate(this, null, _set_keyEventsEnabled_decorators, { kind: \"setter\", name: \"keyEventsEnabled\", static: false, private: false, access: { has: obj => \"keyEventsEnabled\" in obj, set: (obj, value) => { obj.keyEventsEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_wheelEventsEnabled_decorators, { kind: \"setter\", name: \"wheelEventsEnabled\", static: false, private: false, access: { has: obj => \"wheelEventsEnabled\" in obj, set: (obj, value) => { obj.wheelEventsEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_moveEventsEnabled_decorators, { kind: \"setter\", name: \"moveEventsEnabled\", static: false, private: false, access: { has: obj => \"moveEventsEnabled\" in obj, set: (obj, value) => { obj.moveEventsEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_mouseEventsEnabled_decorators, { kind: \"setter\", name: \"mouseEventsEnabled\", static: false, private: false, access: { has: obj => \"mouseEventsEnabled\" in obj, set: (obj, value) => { obj.mouseEventsEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_touchEventsEnabled_decorators, { kind: \"setter\", name: \"touchEventsEnabled\", static: false, private: false, access: { has: obj => \"touchEventsEnabled\" in obj, set: (obj, value) => { obj.touchEventsEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_clickEventEnabled_decorators, { kind: \"setter\", name: \"clickEventEnabled\", static: false, private: false, access: { has: obj => \"clickEventEnabled\" in obj, set: (obj, value) => { obj.clickEventEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_dragEventEnabled_decorators, { kind: \"setter\", name: \"dragEventEnabled\", static: false, private: false, access: { has: obj => \"dragEventEnabled\" in obj, set: (obj, value) => { obj.dragEventEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _keyController_decorators, { kind: \"field\", name: \"keyController\", static: false, private: false, access: { has: obj => \"keyController\" in obj, get: obj => obj.keyController, set: (obj, value) => { obj.keyController = value; } }, metadata: _metadata }, _keyController_initializers, _keyController_extraInitializers);\n            __esDecorate(null, null, _wheelController_decorators, { kind: \"field\", name: \"wheelController\", static: false, private: false, access: { has: obj => \"wheelController\" in obj, get: obj => obj.wheelController, set: (obj, value) => { obj.wheelController = value; } }, metadata: _metadata }, _wheelController_initializers, _wheelController_extraInitializers);\n            __esDecorate(null, null, _pointerController_decorators, { kind: \"field\", name: \"pointerController\", static: false, private: false, access: { has: obj => \"pointerController\" in obj, get: obj => obj.pointerController, set: (obj, value) => { obj.pointerController = value; } }, metadata: _metadata }, _pointerController_initializers, _pointerController_extraInitializers);\n            __esDecorate(null, null, _dispatchController_decorators, { kind: \"field\", name: \"dispatchController\", static: false, private: false, access: { has: obj => \"dispatchController\" in obj, get: obj => obj.dispatchController, set: (obj, value) => { obj.dispatchController = value; } }, metadata: _metadata }, _dispatchController_initializers, _dispatchController_extraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        /*\n         *\n         *\n         * Static stuff\n         *\n         *\n         */\n        static managers = [];\n        static get instance() {\n            if (TurboEventManager.managers.length > 0)\n                return TurboEventManager.managers[0];\n            else\n                return new TurboEventManager();\n        }\n        static get allManagers() {\n            return [...this.managers];\n        }\n        static set allManagers(managers) {\n            this.managers = managers;\n        }\n        /*\n         *\n         *\n         * Controllers & handlers\n         *\n         *\n         */\n        keyController = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _keyController_initializers, void 0));\n        wheelController = (__runInitializers(this, _keyController_extraInitializers), __runInitializers(this, _wheelController_initializers, void 0));\n        pointerController = (__runInitializers(this, _wheelController_extraInitializers), __runInitializers(this, _pointerController_initializers, void 0));\n        dispatchController = (__runInitializers(this, _pointerController_extraInitializers), __runInitializers(this, _dispatchController_initializers, void 0));\n        /*\n         *\n         *\n         * Constructor\n         *\n         *\n         */\n        constructor(properties = {}) {\n            super();\n            __runInitializers(this, _dispatchController_extraInitializers);\n            this.mvc.generate({\n                model: TurboEventManagerModel,\n                controllers: [\n                    TurboEventManagerKeyController,\n                    TurboEventManagerWheelController,\n                    TurboEventManagerPointerController,\n                    TurboEventManagerDispatchController\n                ],\n                handlers: [TurboEventManagerUtilsHandler]\n            });\n            TurboEventManager.managers.push(this);\n            this.model.authorizeEventScaling = properties.authorizeEventScaling;\n            this.model.scaleEventPosition = properties.scaleEventPosition;\n            this.model.state.enabled = properties.enabled ?? true;\n            this.model.state.preventDefaultMouse = properties.preventDefaultMouse ?? true;\n            this.model.state.preventDefaultTouch = properties.preventDefaultTouch ?? true;\n            this.model.state.preventDefaultWheel = properties.preventDefaultWheel ?? true;\n            this.unlock();\n            this.model.moveThreshold = properties.moveThreshold || 10;\n            this.model.longPressDuration = properties.longPressDuration || 500;\n            if (!properties.disableKeyEvents)\n                this.keyEventsEnabled = true;\n            if (!properties.disableWheelEvents)\n                this.wheelEventsEnabled = true;\n            if (!properties.disableMouseEvents)\n                this.mouseEventsEnabled = true;\n            if (!properties.disableTouchEvents)\n                this.touchEventsEnabled = true;\n            if (!properties.disableDragEvents)\n                this.dragEventEnabled = true;\n            if (!properties.disableClickEvents)\n                this.clickEventEnabled = true;\n            if (!properties.disableMoveEvent)\n                this.moveEventsEnabled = true;\n            document.addEventListener(\"pointerdown\", this.pointerController.pointerDown, { passive: false });\n            document.addEventListener(\"pointermove\", this.pointerController.pointerMove, { passive: false });\n            document.addEventListener(\"pointerup\", this.pointerController.pointerUp, { passive: false });\n            document.addEventListener(\"pointercancel\", this.pointerController.pointerCancel, { passive: false });\n            //TODO\n            this.dispatchController.setupCustomDispatcher(\"pointerdown\");\n        }\n        /*\n         *\n         *\n         * Getters and setters\n         *\n         *\n         *\n         */\n        /**\n         * @description The currently identified input device. It is not 100% accurate, especially when differentiating\n         * between mouse and trackpad.\n         */\n        get inputDevice() {\n            return this.model.inputDevice;\n        }\n        //Delegate fired when the input device changes\n        get onInputDeviceChange() {\n            return this.model.onInputDeviceChange;\n        }\n        get currentClick() {\n            return this.model.currentClick;\n        }\n        get currentKeys() {\n            return this.model.currentKeys;\n        }\n        /**\n         * @description Delegate fired when a tool is changed on a certain click button/mode\n         */\n        get onToolChange() {\n            return this.model.onToolChange;\n        }\n        get authorizeEventScaling() {\n            return this.model.authorizeEventScaling;\n        }\n        set authorizeEventScaling(value) {\n            this.model.authorizeEventScaling = value;\n        }\n        get scaleEventPosition() {\n            return this.model.scaleEventPosition;\n        }\n        set scaleEventPosition(value) {\n            this.model.scaleEventPosition = value;\n        }\n        get moveThreshold() {\n            return this.model.moveThreshold;\n        }\n        set moveThreshold(value) {\n            this.model.moveThreshold = value;\n        }\n        get longPressDuration() {\n            return this.model.longPressDuration;\n        }\n        set longPressDuration(value) {\n            this.model.longPressDuration = value;\n        }\n        /*\n         *\n         *\n         * Enabling events setters\n         *\n         *\n         *\n         */\n        set keyEventsEnabled(value) {\n            $(document);\n            if (value) {\n                document.addEventListener(\"keydown\", this.keyController.keyDown);\n                document.addEventListener(\"keyup\", this.keyController.keyUp);\n            }\n            else {\n                document.removeEventListener(\"keydown\", this.keyController.keyDown);\n                document.removeEventListener(\"keyup\", this.keyController.keyUp);\n            }\n            this.applyAndHookEvents(TurboKeyEventName, DefaultKeyEventName, value);\n        }\n        set wheelEventsEnabled(value) {\n            if (value)\n                document.body.addEventListener(\"wheel\", this.wheelController.wheel, { passive: false });\n            else\n                document.body.removeEventListener(\"wheel\", this.wheelController.wheel);\n            this.applyAndHookEvents(TurboWheelEventName, DefaultWheelEventName, value);\n        }\n        set moveEventsEnabled(value) {\n            this.applyAndHookEvents(TurboMoveEventName, DefaultMoveEventName, value);\n        }\n        set mouseEventsEnabled(value) {\n            $(document);\n            //TODO\n            // if (value) {\n            //     doc.on(\"pointerdown\", this.pointerController.pointerDown, {passive: false, propagate: true});\n            //     doc.on(\"pointermove\", this.pointerController.pointerMove, {passive: false, propagate: true});\n            //     doc.on(\"pointerup\", this.pointerController.pointerUp, {passive: false, propagate: true});\n            //     doc.on(\"pointercancel\", this.pointerController.pointerCancel, {passive: false, propagate: true});\n            // } else {\n            //     doc.removeListener(\"mousedown\", this.pointerController.pointerDown);\n            //     doc.removeListener(\"mousemove\", this.pointerController.pointerMove);\n            //     doc.removeListener(\"mouseup\", this.pointerController.pointerUp);\n            //     doc.removeListener(\"mouseleave\", this.pointerController.pointerLeave);\n            // }\n        }\n        set touchEventsEnabled(value) {\n            $(document);\n            // if (value) {\n            //     doc.on(\"touchstart\", this.pointerController.pointerDown, {passive: false, propagate: true});\n            //     doc.on(\"touchmove\", this.pointerController.pointerMove, {passive: false, propagate: true});\n            //     doc.on(\"touchend\", this.pointerController.pointerUp, {passive: false, propagate: true});\n            //     doc.on(\"touchcancel\", this.pointerController.pointerUp, {passive: false, propagate: true});\n            // } else {\n            //     doc.removeListener(\"touchstart\", this.pointerController.pointerDown);\n            //     doc.removeListener(\"touchmove\", this.pointerController.pointerMove);\n            //     doc.removeListener(\"touchend\", this.pointerController.pointerUp);\n            //     doc.removeListener(\"touchcancel\", this.pointerController.pointerUp);\n            // }\n        }\n        set clickEventEnabled(value) {\n            this.applyAndHookEvents(TurboClickEventName, DefaultClickEventName, value);\n        }\n        set dragEventEnabled(value) {\n            this.applyAndHookEvents(TurboDragEventName, DefaultDragEventName, value);\n        }\n        /*\n         *\n         *\n         * State and lock management\n         *\n         *\n         *\n         */\n        /**\n         * @description Sets the lock state for the event manager.\n         * @param origin - The element that initiated the lock state.\n         * @param value - The state properties to set.\n         */\n        lock(origin, value) {\n            this.unlock();\n            this.model.lockState.lockOrigin = origin;\n            for (const key in value)\n                this.model.lockState[key] = value[key];\n        }\n        /**\n         * @description Resets the lock state to the default values.\n         */\n        unlock() {\n            const s = this.model.state;\n            const l = this.model.lockState;\n            l.enabled = s.enabled;\n            l.preventDefaultMouse = s.preventDefaultMouse;\n            l.preventDefaultTouch = s.preventDefaultTouch;\n            l.preventDefaultWheel = s.preventDefaultWheel;\n            l.lockOrigin = document.body;\n        }\n        get enabled() {\n            return this.model.state.enabled && this.model.lockState.enabled;\n        }\n        set enabled(value) {\n            this.model.state.enabled = value;\n        }\n        get preventDefaultWheel() {\n            return this.model.state.preventDefaultWheel && this.model.lockState.preventDefaultWheel;\n        }\n        set preventDefaultWheel(value) {\n            this.model.state.preventDefaultWheel = value;\n        }\n        get preventDefaultMouse() {\n            return this.model.state.preventDefaultMouse && this.model.lockState.preventDefaultMouse;\n        }\n        set preventDefaultMouse(value) {\n            this.model.state.preventDefaultMouse = value;\n        }\n        get preventDefaultTouch() {\n            return this.model.state.preventDefaultTouch && this.model.lockState.preventDefaultTouch;\n        }\n        set preventDefaultTouch(value) {\n            this.model.state.preventDefaultTouch = value;\n        }\n        /*\n         *\n         *\n         * Tool management\n         *\n         *\n         *\n         */\n        /**\n         * @description All attached tools in an array\n         */\n        get toolsArray() {\n            const array = [];\n            for (const tools of this.model.tools.values())\n                array.push(...tools.toArray());\n            return array;\n        }\n        getCurrentTool(mode = this.model.currentClick) {\n            return this.model.currentTools.get(mode);\n        }\n        /**\n         * @description Returns the instances of the tool currently held by the provided click mode\n         * @param mode\n         */\n        getCurrentTools(mode = this.model.currentClick) {\n            return this.getToolsByName(this.getCurrentToolName(mode));\n        }\n        /**\n         * @description Returns the name of the tool currently held by the provided click mode\n         * @param mode\n         */\n        getCurrentToolName(mode = this.model.currentClick) {\n            return this.getToolName(this.getCurrentTool(mode));\n        }\n        getToolName(tool) {\n            for (const [toolName, weakSet] of this.model.tools.entries()) {\n                if (weakSet.has(tool))\n                    return toolName;\n            }\n        }\n        getSimilarTools(tool) {\n            for (const [toolName, weakSet] of this.model.tools.entries()) {\n                if (weakSet.has(tool))\n                    return weakSet.toArray();\n            }\n            return [];\n        }\n        /**\n         * @description Returns the tool with the given name (or undefined)\n         * @param name\n         */\n        getToolsByName(name) {\n            return this.model.tools.get(name)?.toArray() || [];\n        }\n        /**\n         * @description Returns the first tool with the given name (or undefined)\n         * @param name\n         * @param predicate\n         */\n        getToolByName(name, predicate) {\n            const tools = this.getToolsByName(name);\n            return predicate ? tools?.find(predicate) : tools?.[0];\n        }\n        /**\n         * @description Returns the tools associated with the given key\n         * @param key\n         */\n        getToolsByKey(key) {\n            const toolName = this.model.mappedKeysToTool.get(key);\n            if (!toolName)\n                return [];\n            return this.getToolsByName(toolName);\n        }\n        /**\n         * @description Returns the first tool associated with the given key\n         * @param key\n         * @param predicate\n         */\n        getToolByKey(key, predicate) {\n            const tools = this.getToolsByKey(key);\n            return predicate ? tools?.find(predicate) : tools?.[0];\n        }\n        /**\n         * @description Adds a tool to the tools map, identified by its name. Optionally, provide a key to bind the tool to.\n         * @param toolName\n         * @param tool\n         * @param key\n         */\n        addTool(toolName, tool, key) {\n            if (!this.model.tools.has(toolName))\n                this.model.tools.set(toolName, new TurboWeakSet());\n            const tools = this.model.tools.get(toolName);\n            if (!tools.has(tool))\n                tools.add(tool);\n            if (key)\n                this.model.mappedKeysToTool.set(key, toolName);\n        }\n        /**\n         * @description Sets the provided tool as a current tool associated with the provided type\n         * @param tool\n         * @param type\n         * @param options\n         */\n        setTool(tool, type, options = {}) {\n            if (!isUndefined(tool) && !$(tool).isTool(this))\n                return;\n            //Initialize undefined options\n            if (options.select == undefined)\n                options.select = true;\n            if (options.activate == undefined)\n                options.activate = true;\n            if (options.setAsNoAction == undefined)\n                options.setAsNoAction = type == ClickMode.left;\n            //Get previous tool\n            const previousTool = this.model.currentTools.get(type);\n            if (previousTool) {\n                //Return if it's the same\n                if (previousTool === tool)\n                    return;\n                //Deselect and deactivate previous tool\n                this.getSimilarTools(previousTool).forEach(element => {\n                    if (options.select)\n                        this.model.utils.selectTool(element, false);\n                    if (options.activate)\n                        this.model.utils.activateTool(element, this.getToolName(previousTool), false);\n                });\n            }\n            //Select new tool (and maybe set it as the tool for no click mode)\n            this.model.currentTools.set(type, tool);\n            if (options.setAsNoAction)\n                this.model.currentTools.set(ClickMode.none, tool);\n            //Select and activate the tool\n            this.getSimilarTools(tool).forEach(element => {\n                if (options.activate)\n                    this.model.utils.activateTool(element, this.getToolName(tool), true);\n                if (options.select)\n                    this.model.utils.selectTool(element, true);\n            });\n            //Fire tool changed\n            this.onToolChange.fire(previousTool, tool, type);\n        }\n        /**\n         * @description Sets tool associated with the provided key as the current tool for the key mode\n         * @param key\n         */\n        setToolByKey(key) {\n            const toolName = this.model.mappedKeysToTool.get(key);\n            if (!toolName)\n                return false;\n            this.setTool(this.getToolByName(toolName), ClickMode.key, { select: false });\n            return true;\n        }\n        /*\n         *\n         *\n         * Utils\n         *\n         *\n         */\n        setupCustomDispatcher(type) {\n            return this.dispatchController.setupCustomDispatcher(type);\n        }\n        applyAndHookEvents(turboEventNames, defaultEventNames, applyTurboEvents) {\n            this.model.utils.applyEventNames(applyTurboEvents ? turboEventNames : defaultEventNames);\n            for (const name in turboEventNames) {\n                if (applyTurboEvents)\n                    this.dispatchController.setupCustomDispatcher(name);\n                else\n                    this.dispatchController.removeCustomDispatcher(name);\n            }\n        }\n        destroy() {\n            this.keyEventsEnabled = false;\n            this.wheelEventsEnabled = false;\n            this.mouseEventsEnabled = false;\n            this.touchEventsEnabled = false;\n            this.dragEventEnabled = false;\n            this.clickEventEnabled = false;\n            this.onToolChange.clear();\n            return this;\n        }\n    };\n})();\n\nclass EventFunctionsUtils {\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {});\n        return this.dataMap.get(element);\n    }\n    getBoundListenersSet(element) {\n        let set = this.data(element).boundListeners;\n        if (!set) {\n            set = new Set();\n            this.data(element).boundListeners = set;\n        }\n        return set;\n    }\n    getPreventDefaultListeners(element) {\n        let map = this.data(element).preventDefaultListeners;\n        if (!map) {\n            map = {};\n            this.data(element).preventDefaultListeners = map;\n        }\n        return map;\n    }\n    bypassManager(element, eventManager, bypassResults) {\n        if (typeof bypassResults == \"boolean\")\n            eventManager.lock(element, {\n                enabled: bypassResults,\n                preventDefaultWheel: bypassResults,\n                preventDefaultMouse: bypassResults,\n                preventDefaultTouch: bypassResults\n            });\n        else\n            eventManager.lock(element, {\n                enabled: bypassResults.enabled ?? false,\n                preventDefaultWheel: bypassResults.preventDefaultWheel ?? false,\n                preventDefaultMouse: bypassResults.preventDefaultMouse ?? false,\n                preventDefaultTouch: bypassResults.preventDefaultTouch ?? false,\n            });\n    }\n    getBoundListeners(element, type, toolName, options, manager = TurboEventManager.instance) {\n        if (!options)\n            options = {};\n        return [...this.getBoundListenersSet(element)]\n            .filter(entry => entry.type === type && entry.manager === manager && entry.toolName === toolName)\n            .filter(entry => {\n            if (!options)\n                return true;\n            for (const [option, value] of Object.entries(options)) {\n                if (entry.options?.[option] !== value)\n                    return false;\n            }\n            return true;\n        });\n    }\n}\n\nconst utils$6 = new EventFunctionsUtils();\nfunction setupEventFunctions() {\n    /**\n     * @description Initializes a `boundListeners` set in the Node prototype, that will hold all the element's bound\n     * listeners.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"boundListeners\", {\n        get: function () {\n            return utils$6.getBoundListenersSet(this);\n        },\n        configurable: true,\n        enumerable: true\n    });\n    /**\n     * @description If you want the element to bypass the event manager and allow native events to seep through,\n     * you can set this field to a predicate that defines when to bypass the manager.\n     * @param {Event} e The event.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"bypassManagerOn\", {\n        get: function () {\n            return utils$6.data(this)[\"bypassCallback\"];\n        },\n        set: function (value) {\n            utils$6.data(this)[\"bypassCallback\"] = value;\n        },\n        configurable: true,\n        enumerable: true\n    });\n    /**\n     * @description Adds an event listener to the element.\n     * @param {string} type - The type of the event.\n     * @param toolName - The name of the tool. Set to null or undefined to check for listeners not bound to a tool.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {ListenerOptions} [options] - An options object that specifies characteristics\n     * about the event listener.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.onTool = function _onTool(type, toolName, listener, options, manager = TurboEventManager.instance) {\n        if (this.hasToolListener(type, toolName, listener, manager))\n            return this;\n        const bundledListener = (e) => listener(e, this);\n        manager.setupCustomDispatcher?.(type);\n        utils$6.getBoundListenersSet(this).add({ target: this, type, toolName, listener, bundledListener, options, manager });\n        return this;\n    };\n    /**\n     * @description Adds an event listener to the element.\n     * @param {string} type - The type of the event.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {ListenerOptions} [options] - An options object that specifies characteristics\n     * about the event listener.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.on = function _on(type, listener, options, manager = TurboEventManager.instance) {\n        return this.onTool(type, undefined, listener, options, manager);\n    };\n    /**\n     * @description\n     * @param type\n     * @param toolName\n     * @param event\n     * @param options\n     * @param manager\n     */\n    TurboSelector.prototype.executeAction = function _executeAction(type, toolName, event, options, manager = TurboEventManager.instance) {\n        if (!type)\n            return false;\n        if (!options)\n            options = {};\n        const activeTool = toolName ?? manager.getCurrentToolName();\n        if (this.bypassManagerOn)\n            utils$6.bypassManager(this, manager, this.bypassManagerOn(event));\n        const firedListeners = new Set();\n        const run = (target, tool) => {\n            const ts = target instanceof TurboSelector ? target : $(target);\n            const boundSet = utils$6.getBoundListenersSet(target);\n            const entries = [...utils$6.getBoundListeners(target, type, tool, options, manager)];\n            if (entries.length === 0)\n                return false;\n            let stopPropagation = false;\n            for (const entry of entries) {\n                if (firedListeners.has(entry))\n                    continue;\n                try {\n                    if (entry.listener(event, ts))\n                        stopPropagation = true;\n                }\n                finally {\n                    firedListeners.add(entry);\n                    if (entry.options?.once)\n                        boundSet.delete(entry);\n                }\n            }\n            return stopPropagation;\n        };\n        if (activeTool && run(this, activeTool))\n            return true;\n        if (!options.capture && activeTool && !this.isToolIgnored(activeTool, type, manager)\n            && this.applyTool(activeTool, type, event, manager))\n            return true;\n        const embeddedTarget = this.getEmbeddedToolTarget(manager);\n        const objectTools = this.getToolNames(manager);\n        if (embeddedTarget && objectTools.length > 0) {\n            let ret = false;\n            for (const toolName of objectTools) {\n                if (run(embeddedTarget, toolName))\n                    ret = true;\n            }\n            if (ret)\n                return true;\n            const embeddedTargetSel = $(embeddedTarget);\n            if (!options.capture)\n                for (const toolName of objectTools) {\n                    if (!embeddedTargetSel.isToolIgnored(toolName, type, manager)\n                        && $(embeddedTarget).applyTool(toolName, type, event, manager))\n                        ret = true;\n                }\n            if (ret)\n                return true;\n        }\n        return run(this, undefined);\n    };\n    /**\n     * @description Checks if the given event listener is bound to the element (in its boundListeners list).\n     * @param {string} type - The type of the event. Set to null or undefined to get all event types.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {boolean} - Whether the element has the given listener.\n     */\n    TurboSelector.prototype.hasListener = function _hasListener(type, listener, manager = TurboEventManager.instance) {\n        return this.hasToolListener(type, undefined, listener, manager);\n    };\n    /**\n     * @description Checks if the given event listener is bound to the element (in its boundListeners list).\n     * @param {string} type - The type of the event. Set to null or undefined to get all event types.\n     * @param {string} toolName - The name of the tool the listener is attached to. Set to null or undefined\n     * to check for listeners not bound to a tool.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {boolean} - Whether the element has the given listener.\n     */\n    TurboSelector.prototype.hasToolListener = function _hasToolListener(type, toolName, listener, manager = TurboEventManager.instance) {\n        return utils$6.getBoundListeners(this, type, toolName, undefined, manager)\n            .filter(entry => entry.listener === listener).length > 0;\n    };\n    /**\n     * @description Checks if the element has bound listeners of the given type (in its boundListeners list).\n     * @param {string} type - The type of the event. Set to null or undefined to get all event types.\n     * @param {string} toolName - The name of the tool to consider (if any). Set to null or undefined\n     * to check for listeners not bound to a tool.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {boolean} - Whether the element has the given listener.\n     */\n    TurboSelector.prototype.hasListenersByType = function _hasListenersByType(type, toolName, manager = TurboEventManager.instance) {\n        return utils$6.getBoundListeners(this, type, toolName, undefined, manager).length > 0;\n    };\n    /**\n     * @description Removes an event listener that is bound to the element (in its boundListeners list).\n     * @param {string} type - The type of the event.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeListener = function _removeListener(type, listener, manager = TurboEventManager.instance) {\n        return this.removeToolListener(type, undefined, listener, manager);\n    };\n    /**\n     * @description Removes an event listener that is bound to the element (in its boundListeners list).\n     * @param {string} type - The type of the event.\n     * @param {string} toolName - The name of the tool the listener is attached to. Set to null or undefined\n     * to check for listeners not bound to a tool.\n     * @param {(e: Event, el: this) => void} listener - The function that receives a notification.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeToolListener = function _removeToolListener(type, toolName, listener, manager = TurboEventManager.instance) {\n        const boundListeners = utils$6.getBoundListenersSet(this);\n        utils$6.getBoundListeners(this, type, toolName, undefined, manager)\n            .filter(entry => entry.listener === listener)\n            .forEach(entry => {\n            entry.target.removeEventListener(entry.type, entry.bundledListener, entry.options);\n            boundListeners.delete(entry);\n        });\n        return this;\n    };\n    /**\n     * @description Removes all event listeners bound to the element (in its boundListeners list) assigned to the\n     * specified type.\n     * @param {string} type - The type of the event. Set to null or undefined to consider all types.\n     * @param {string} toolName - The name of the tool associated (if any). Set to null or undefined\n     * to check for listeners not bound to a tool.\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeListenersByType = function _removeListenersByType(type, toolName, manager = TurboEventManager.instance) {\n        const boundListeners = utils$6.getBoundListenersSet(this);\n        utils$6.getBoundListeners(this, type, toolName, undefined, manager)\n            .forEach(entry => {\n            entry.target.removeEventListener(entry.type, entry.bundledListener, entry.options);\n            boundListeners.delete(entry);\n        });\n        return this;\n    };\n    /**\n     * @description Removes all event listeners bound to the element (in its boundListeners list).\n     * @param {TurboEventManager} manager - The associated event manager. Defaults to the first created manager,\n     * or a new instantiated one if none already exist.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.removeAllListeners = function _removeListeners(manager = TurboEventManager.instance) {\n        const set = this.boundListeners;\n        [...set].filter(entry => entry.manager === manager)\n            .forEach(entry => {\n            entry.target.removeEventListener(entry.type, entry.bundledListener, entry.options);\n            set.delete(entry);\n        });\n        return this;\n    };\n    /**\n     * @description Prevent default browser behavior on the provided event types. By default, all basic input events\n     * will be processed.\n     * @param {PreventDefaultOptions} options - An options object to customize the behavior of the function.\n     */\n    TurboSelector.prototype.preventDefault = function _preventDefault(options) {\n        if (!options)\n            options = {};\n        const manager = options.manager ?? TurboEventManager.instance;\n        const types = options.types ?? BasicInputEvents;\n        const phase = options.phase ?? \"capture\";\n        const stop = options.stop ?? false;\n        utils$6.data(this.element).preventDefaultOn = options.preventDefaultOn\n            ?? utils$6.data(this.element).preventDefaultOn ?? (() => true);\n        const preventDefaultListeners = utils$6.getPreventDefaultListeners(this);\n        if (options.clearPreviousListeners)\n            for (const [type, listener] of Object.entries(preventDefaultListeners)) {\n                this.removeListener(type, listener);\n                delete preventDefaultListeners[type];\n            }\n        const shouldNotBePassive = new Set(NonPassiveEvents);\n        for (const type of new Set(types)) {\n            const handler = (event) => {\n                if (!utils$6.data(this.element).preventDefaultOn(type, event))\n                    return false;\n                event.preventDefault?.();\n                if (stop === \"immediate\")\n                    event.stopImmediatePropagation?.();\n                else if (stop === \"stop\")\n                    event.stopPropagation?.();\n                return true;\n            };\n            preventDefaultListeners[type] = handler;\n            const options = {};\n            if (phase === \"capture\")\n                options.capture = true;\n            if (shouldNotBePassive.has(type))\n                options.passive = false;\n            this.on(type, handler, options, manager);\n        }\n        return this;\n    };\n}\n\nclass StyleFunctionsUtils {\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {});\n        return this.dataMap.get(element);\n    }\n    setStyle(selector, attribute, value, instant = false, apply = true) {\n        if (instant) {\n            selector.element.style[attribute] = value.toString();\n            return;\n        }\n        let pendingStyles = this.data(selector.element)[\"pendingStyles\"];\n        if (!pendingStyles || typeof pendingStyles !== \"object\") {\n            pendingStyles = {};\n            this.data(selector.element)[\"pendingStyles\"] = pendingStyles;\n        }\n        pendingStyles[attribute] = value;\n        if (apply)\n            this.applyStyles(selector);\n        return;\n    }\n    /**\n     * @description Apply the pending styles to the element.\n     */\n    applyStyles(selector) {\n        const pendingStyles = this.data(selector.element)[\"pendingStyles\"];\n        if (!pendingStyles || typeof pendingStyles !== \"object\")\n            return;\n        requestAnimationFrame(() => {\n            for (const property in pendingStyles) {\n                if (property == \"cssText\")\n                    selector.element.style.cssText += \";\" + pendingStyles[\"cssText\"];\n                else\n                    selector.element.style[property] = pendingStyles[property];\n            }\n            this.data(selector.element)[\"pendingStyles\"] = {};\n        });\n    }\n}\n\nconst utils$5 = new StyleFunctionsUtils();\nfunction setupStyleFunctions() {\n    /**\n     * @description The closest root to the element in the document (the closest ShadowRoot, or the document's head).\n     */\n    Object.defineProperty(TurboSelector.prototype, \"closestRoot\", {\n        get: function () {\n            let node = this.element;\n            while (node) {\n                if (node instanceof Element && node.shadowRoot)\n                    return node.shadowRoot;\n                node = node.parentElement;\n            }\n            return document.head;\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Set a certain style attribute of the element to the provided value.\n     * @param {keyof CSSStyleDeclaration} attribute - A string representing the style attribute to set.\n     * @param {string | number} value - A string representing the value to set the attribute to.\n     * @param {boolean} [instant=false] - If true, will set the fields directly. Otherwise, will set them on next\n     * animation frame.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.setStyle = function _setStyle(attribute, value, instant = false) {\n        if (!attribute || value == undefined)\n            return this;\n        if (!(this.element instanceof HTMLElement) && !(this.element instanceof SVGElement))\n            return this;\n        utils$5.setStyle(this, attribute, value, instant);\n        return this;\n    };\n    /**\n     * @description Set a certain style attribute of the element to the provided value.\n     * @param {keyof CSSStyleDeclaration} attribute - A string representing the style attribute to set.\n     * @param {string} value - A string representing the value to set the attribute to.\n     * @param {string} [separator=\", \"] - The separator to use between the existing and new value.\n     * @param {boolean} [instant=false] - If true, will set the fields directly. Otherwise, will set them on next\n     * animation frame.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.appendStyle = function _appendStyle(attribute, value, separator = \", \", instant = false) {\n        if (!attribute || value == undefined)\n            return this;\n        if (!(this.element instanceof HTMLElement) && !(this.element instanceof SVGElement))\n            return this;\n        const currentStyle = (this.element.style[attribute] || \"\");\n        separator = currentStyle.length > 0 ? separator : \"\";\n        utils$5.setStyle(this, attribute, currentStyle + separator + value, instant);\n        return this;\n    };\n    /**\n     * @description Parses and applies the given CSS to the element's inline styles.\n     * @param {StylesType} styles - A CSS string of style attributes and their values, seperated by semicolons,\n     * or an object of CSS properties. Use the css literal function for autocompletion.\n     * @param {boolean} [instant=false] - If true, will set the fields directly. Otherwise, will set them on next\n     * animation frame.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.setStyles = function _setStyles(styles, instant = false) {\n        if (!styles || typeof styles == \"number\")\n            return this;\n        if (!(this.element instanceof HTMLElement) && !(this.element instanceof SVGElement))\n            return this;\n        let stylesObject = {};\n        if (typeof styles === \"object\")\n            stylesObject = styles;\n        else if (typeof styles == \"string\") {\n            styles.split(\";\").forEach(entry => {\n                const [property, value] = entry.split(\":\").map(part => part.trim());\n                if (!property || !value)\n                    return;\n                stylesObject[property] = value;\n            });\n        }\n        Object.entries(stylesObject).forEach(([key, value]) => utils$5.setStyle(this, key, value, instant, false));\n        if (!instant)\n            utils$5.applyStyles(this);\n        return this;\n    };\n}\n\nclass ToolFunctionsUtils {\n    elements = new WeakMap();\n    tools = new WeakMap();\n    getOrCreate(map, key, factory) {\n        let value = map.get(key);\n        if (!value) {\n            value = factory();\n            map.set(key, value);\n        }\n        return value;\n    }\n    getElementData(element, manager) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        const es = this.getOrCreate(this.elements, element, () => new WeakMap());\n        return this.getOrCreate(es, manager, () => ({\n            tools: new Set(),\n            ignoreAllTools: false,\n            ignoredTools: new Map(),\n            activationDelegates: new Map(),\n            deactivationDelegates: new Map(),\n        }));\n    }\n    getToolsData(manager, toolName) {\n        const byTool = this.getOrCreate(this.tools, manager, () => new Map());\n        return this.getOrCreate(byTool, toolName, () => ({\n            behaviors: new Map()\n        }));\n    }\n    getActivationDelegate(element, toolName, manager) {\n        const map = this.getElementData(element, manager).activationDelegates;\n        if (!map.get(toolName))\n            map.set(toolName, new Delegate());\n        return map.get(toolName);\n    }\n    getDeactivationDelegate(element, toolName, manager) {\n        const map = this.getElementData(element, manager).deactivationDelegates;\n        if (!map.get(toolName))\n            map.set(toolName, new Delegate());\n        return map.get(toolName);\n    }\n    saveTool(element, toolName, manager) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return;\n        this.getElementData(element, manager).tools.add(toolName);\n    }\n    getToolNames(element, manager) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return [];\n        return [...this.getElementData(element, manager).tools];\n    }\n    setEmbeddedToolTarget(element, target, manager) {\n        if (target instanceof TurboSelector)\n            target = target.element;\n        if (!target)\n            return;\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return;\n        this.getElementData(element, manager).embeddedTarget = target;\n    }\n    getEmbeddedToolTarget(element, manager) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return;\n        return this.getElementData(element, manager).embeddedTarget;\n    }\n    addToolBehavior(toolName, type, callback, manager) {\n        const behaviors = this.getToolsData(manager, toolName).behaviors;\n        const set = this.getOrCreate(behaviors, type, () => new Set());\n        set.add(callback);\n    }\n    getToolBehaviors(toolName, type, manager) {\n        const behaviors = this.getToolsData(manager, toolName).behaviors;\n        return [...this.getOrCreate(behaviors, type, () => new Set())];\n    }\n    removeToolBehaviors(toolName, type, manager) {\n        const behaviors = this.getToolsData(manager, toolName).behaviors;\n        this.getOrCreate(behaviors, type, () => new Set()).clear();\n    }\n    clearToolBehaviors(manager) {\n        this.getOrCreate(this.tools, manager, () => new Map()).clear();\n    }\n    ignoreTool(element, toolName, type, ignore, manager) {\n        const ignoredTools = this.getElementData(element, manager).ignoredTools;\n        if (!type) {\n            if (ignore)\n                ignoredTools.set(toolName, \"all\");\n            else\n                ignoredTools.delete(toolName);\n        }\n        else {\n            const ignoredTool = ignoredTools.get(toolName);\n            if (!ignore) {\n                if (ignoredTool instanceof Set)\n                    ignoredTool.delete(type);\n                return;\n            }\n            if (!(ignoredTool instanceof Set))\n                ignoredTools.set(toolName, new Set());\n            ignoredTools.get(toolName).add(type);\n        }\n    }\n    isToolIgnored(element, toolName, type, manager) {\n        const ignoredTool = this.getElementData(element, manager).ignoredTools?.get(toolName);\n        if (!ignoredTool)\n            return false;\n        if (ignoredTool === \"all\" || !type)\n            return true;\n        return ignoredTool.has(type);\n    }\n}\n\nconst utils$4 = new ToolFunctionsUtils();\nfunction setupToolFunctions() {\n    /*\n     *\n     * Basic tool manipulation\n     *\n     */\n    TurboSelector.prototype.makeTool = function _makeTool(toolName, options) {\n        if (!toolName)\n            return this;\n        if (!options)\n            options = {};\n        if (!options.manager)\n            options.manager = TurboEventManager.instance;\n        options.manager.addTool(toolName, this.element, options.key);\n        if (options.customActivation && typeof options.customActivation === \"function\") {\n            options.customActivation(this, options.manager);\n        }\n        else {\n            options.activationEvent ??= DefaultEventName.click;\n            options.clickMode ??= ClickMode.left;\n            this.on(options.activationEvent, () => {\n                options.manager.setTool(this.element, options.clickMode);\n                return true;\n            }, undefined, options.manager);\n        }\n        utils$4.saveTool(this, toolName, options.manager);\n        if (options.onActivate)\n            utils$4.getActivationDelegate(this, toolName, options.manager).add(options.onActivate);\n        if (options.onDeactivate)\n            utils$4.getDeactivationDelegate(this, toolName, options.manager).add(options.onDeactivate);\n        return this;\n    };\n    TurboSelector.prototype.isTool = function _isTool(manager = TurboEventManager.instance) {\n        return utils$4.getToolNames(this.element, manager).length > 0;\n    };\n    TurboSelector.prototype.getToolNames = function _getToolName(manager = TurboEventManager.instance) {\n        return utils$4.getToolNames(this.element, manager);\n    };\n    TurboSelector.prototype.getToolName = function _getToolName(manager = TurboEventManager.instance) {\n        const toolNames = utils$4.getToolNames(this.element, manager);\n        if (toolNames.length > 0)\n            return toolNames[0];\n    };\n    /*\n     *\n     * Tool activation manipulation\n     *\n     */\n    TurboSelector.prototype.onToolActivate = function _onActivate(toolName, manager = TurboEventManager.instance) {\n        if (!toolName)\n            toolName = this.getToolName(manager);\n        return utils$4.getActivationDelegate(this, toolName, manager);\n    };\n    TurboSelector.prototype.onToolDeactivate = function _onDeactivate(toolName, manager = TurboEventManager.instance) {\n        if (!toolName)\n            toolName = this.getToolName(manager);\n        return utils$4.getDeactivationDelegate(this, toolName, manager);\n    };\n    /*\n     *\n     * Tool behavior manipulation\n     *\n     */\n    TurboSelector.prototype.addToolBehavior = function _addToolBehavior(type, callback, toolName = this.getToolName(), manager = TurboEventManager.instance) {\n        if (type && toolName) {\n            manager.setupCustomDispatcher?.(type);\n            utils$4.addToolBehavior(toolName, type, callback, manager);\n        }\n        return this;\n    };\n    TurboSelector.prototype.hasToolBehavior = function _hasToolBehavior(type, toolName = this.getToolName(), manager = TurboEventManager.instance) {\n        if (!type || !toolName)\n            return false;\n        return utils$4.getToolBehaviors(toolName, type, manager).length > 0;\n    };\n    TurboSelector.prototype.removeToolBehaviors = function _removeToolBehaviors(type, toolName = this.getToolName(), manager = TurboEventManager.instance) {\n        if (type && toolName)\n            utils$4.removeToolBehaviors(toolName, type, manager);\n        return this;\n    };\n    TurboSelector.prototype.clearToolBehaviors = function _clearToolBehaviors(manager = TurboEventManager.instance) {\n        utils$4.clearToolBehaviors(manager);\n        return this;\n    };\n    /*\n     *\n     * Embedded tool manipulation\n     *\n     */\n    TurboSelector.prototype.embedTool = function _embedTool(target, manager = TurboEventManager.instance) {\n        if (this.isTool(manager))\n            utils$4.setEmbeddedToolTarget(this.element, target, manager);\n        return this;\n    };\n    TurboSelector.prototype.isEmbeddedTool = function _isEmbeddedTool(manager = TurboEventManager.instance) {\n        return !!utils$4.getEmbeddedToolTarget(this.element, manager);\n    };\n    TurboSelector.prototype.getEmbeddedToolTarget = function _getEmbeddedToolTarget(manager = TurboEventManager.instance) {\n        return utils$4.getEmbeddedToolTarget(this.element, manager);\n    };\n    /*\n     *\n     * Apply tool\n     *\n     */\n    TurboSelector.prototype.applyTool = function _applyTool(toolName, type, event, manager = TurboEventManager.instance) {\n        let pass = false;\n        const behaviors = utils$4.getToolBehaviors(toolName, type, manager);\n        const options = {};\n        options.embeddedTarget = utils$4.getEmbeddedToolTarget(this.element, manager);\n        options.isEmbedded = !!options.embeddedTarget;\n        behaviors.forEach(behavior => {\n            if (behavior(event, this.element, options))\n                pass = true;\n        });\n        return pass;\n    };\n    TurboSelector.prototype.ignoreTool = function _ignoreTool(toolName, type, ignore = true, manager = TurboEventManager.instance) {\n        utils$4.ignoreTool(this.element, toolName, type, ignore, manager);\n        return this;\n    };\n    TurboSelector.prototype.ignoreAllTools = function _ignoreAllTools(ignore = true, manager = TurboEventManager.instance) {\n        utils$4.getElementData(this.element, manager).ignoreAllTools = ignore;\n        return this;\n    };\n    TurboSelector.prototype.isToolIgnored = function _isToolIgnored(toolName, type, manager = TurboEventManager.instance) {\n        if (utils$4.getElementData(this.element, manager).ignoreAllTools)\n            return true;\n        return utils$4.isToolIgnored(this.element, toolName, type, manager);\n    };\n}\n\nclass SubstrateFunctionsUtils {\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {\n                substrates: new Map(),\n                onChange: new Delegate()\n            });\n        return this.dataMap.get(element);\n    }\n    createSubstrate(element, substrate) {\n        const data = {\n            objects: element instanceof Element ? element.children : element.childNodes,\n            temporaryMetadata: new WeakMap(),\n            persistentMetadata: new WeakMap(),\n            onActivate: new Delegate(),\n            onDeactivate: new Delegate(),\n            solvers: new Set()\n        };\n        this.data(element).substrates.set(substrate, data);\n        return data;\n    }\n    setCurrent(element, substrate) {\n        if (!this.getSubstrates(element).includes(substrate))\n            return false;\n        this.data(element).current = substrate;\n        return true;\n    }\n    getSubstrateData(element, substrate) {\n        return this.data(element).substrates.get(substrate);\n    }\n    getSubstrates(element) {\n        return [...this.data(element).substrates.keys()];\n    }\n    getPersistentMetadata(element, substrate, object) {\n        const substrateData = this.getSubstrateData(element, substrate);\n        if (!substrateData || !substrateData.persistentMetadata)\n            return {};\n        let metadata = substrateData.persistentMetadata.get(object);\n        if (!metadata) {\n            metadata = {};\n            substrateData.persistentMetadata.set(object, metadata);\n        }\n        return metadata;\n    }\n    setPersistentMetadata(element, substrate, object, metadata) {\n        const substrateData = this.getSubstrateData(element, substrate);\n        if (!substrateData || !substrateData.persistentMetadata)\n            return;\n        substrateData.persistentMetadata.set(object, metadata);\n    }\n    getTemporaryMetadata(element, substrate, object) {\n        const substrateData = this.getSubstrateData(element, substrate);\n        if (!substrateData || !substrateData.temporaryMetadata)\n            return;\n        let metadata = substrateData.temporaryMetadata.get(object);\n        if (!metadata) {\n            metadata = {};\n            substrateData.temporaryMetadata.set(object, metadata);\n        }\n        return metadata;\n    }\n    setTemporaryMetadata(element, substrate, object, metadata) {\n        const substrateData = this.getSubstrateData(element, substrate);\n        if (!substrateData || !substrateData.temporaryMetadata)\n            return;\n        substrateData.temporaryMetadata.set(object, metadata);\n    }\n}\n\nconst utils$3 = new SubstrateFunctionsUtils();\nfunction setupSubstrateFunctions() {\n    TurboSelector.prototype.makeSubstrate = function _makeSubstrate(name, options) {\n        utils$3.createSubstrate(this, name);\n        if (options?.onActivate)\n            this.onSubstrateActivate(name).add(options.onActivate);\n        if (options?.onDeactivate)\n            this.onSubstrateDeactivate(name).add(options.onDeactivate);\n        if (!this.currentSubstrate)\n            this.currentSubstrate = name;\n        return this;\n    };\n    Object.defineProperty(TurboSelector.prototype, \"substrates\", {\n        get: function () { return utils$3.getSubstrates(this.element); },\n        configurable: false,\n        enumerable: true\n    });\n    Object.defineProperty(TurboSelector.prototype, \"currentSubstrate\", {\n        get: function () { return utils$3.data(this).current; },\n        set: function (value) {\n            if (!value)\n                return;\n            const prev = this.currentSubstrate;\n            if (utils$3.setCurrent(this, value))\n                this.onSubstrateChange.fire(prev, value);\n        },\n        configurable: false,\n        enumerable: true\n    });\n    Object.defineProperty(TurboSelector.prototype, \"onSubstrateChange\", {\n        get: function () { return utils$3.data(this).onChange; },\n        configurable: false,\n        enumerable: true\n    });\n    TurboSelector.prototype.onSubstrateActivate = function _onSubstrateActivate(name = this.currentSubstrate) {\n        return utils$3.getSubstrateData(this, name)?.onActivate ?? new Delegate();\n    };\n    TurboSelector.prototype.onSubstrateDeactivate = function _onSubstrateDeactivate(name = this.currentSubstrate) {\n        return utils$3.getSubstrateData(this, name)?.onDeactivate ?? new Delegate();\n    };\n    TurboSelector.prototype.getSubstrateObjectList = function _getSubstrateObjectList(substrate = this.currentSubstrate) {\n        const set = new Set();\n        if (!substrate)\n            return set;\n        Array.from(utils$3.getSubstrateData(this, substrate).objects).forEach(object => {\n            if (!utils$3.getPersistentMetadata(this, substrate, object).ignored)\n                set.add(object);\n        });\n        return set;\n    };\n    TurboSelector.prototype.setSubstrateObjectList = function _setSubstrateObjectList(list, substrate = this.currentSubstrate) {\n        if (!list || !substrate)\n            return this;\n        utils$3.getSubstrateData(this, substrate).objects = list;\n        return this;\n    };\n    TurboSelector.prototype.addObjectToSubstrate = function _addObjectToSubstrate(object, substrate = this.currentSubstrate) {\n        if (!object || !substrate)\n            return this;\n        utils$3.getPersistentMetadata(this, substrate, object).ignored = false;\n        const list = utils$3.getSubstrateData(this, substrate).objects;\n        if (list instanceof HTMLCollection || list instanceof NodeList)\n            return this;\n        try {\n            if (!list.has(object))\n                list.add(object);\n        }\n        catch { }\n        return this;\n    };\n    TurboSelector.prototype.removeObjectFromSubstrate = function _removeObjectFromSubstrate(object, substrate = this.currentSubstrate) {\n        if (!object || !substrate)\n            return this;\n        utils$3.getPersistentMetadata(this, substrate, object).ignored = true;\n        const list = utils$3.getSubstrateData(this, substrate).objects;\n        if (list instanceof Set)\n            list.delete(object);\n        return this;\n    };\n    TurboSelector.prototype.hasObjectInSubstrate = function _hasObjectInSubstrate(object, substrate = this.currentSubstrate) {\n        if (!object || !substrate)\n            return false;\n        const list = this.getSubstrateObjectList(substrate);\n        for (const obj of list) {\n            if (obj === object)\n                return true;\n        }\n        return false;\n    };\n    TurboSelector.prototype.wasObjectProcessedBySubstrate = function _wasObjectProcessedBySubstrate(object, substrate = this.currentSubstrate) {\n        if (!object || !substrate)\n            return false;\n        return !!utils$3.getTemporaryMetadata(this, substrate, object)?.processed;\n    };\n    TurboSelector.prototype.addSolver = function _addSolver(callback, name = this.currentSubstrate) {\n        utils$3.getSubstrateData(this, name).solvers?.add(callback);\n        return this;\n    };\n    TurboSelector.prototype.removeSolver = function _removeSolver(callback, name = this.currentSubstrate) {\n        utils$3.getSubstrateData(this, name).solvers?.delete(callback);\n        return this;\n    };\n    TurboSelector.prototype.clearSolvers = function _clearSolvers(name = this.currentSubstrate) {\n        utils$3.getSubstrateData(this, name).solvers?.clear();\n        return this;\n    };\n    TurboSelector.prototype.resolveSubstrate = function _resolveSubstrate(properties = {}, substrate = this.currentSubstrate) {\n        if (!properties)\n            properties = {};\n        properties.substrate = properties.substrate ?? substrate;\n        if (!properties.substrate)\n            return this;\n        if (!properties.manager)\n            properties.manager = TurboEventManager.instance;\n        if (!properties.eventOptions)\n            properties.eventOptions = {};\n        const data = utils$3.getSubstrateData(this, properties.substrate);\n        if (!data)\n            return this;\n        data.solvers?.forEach(solver => {\n            data.temporaryMetadata = new WeakMap();\n            if (properties.eventTarget) {\n                data.temporaryMetadata.set(properties.eventTarget, { processed: true, isMainTarget: true });\n                solver({ ...properties, target: properties.eventTarget });\n            }\n            let target;\n            do {\n                target = Array\n                    .from(this.getSubstrateObjectList(properties.substrate))\n                    .find(entry => !data.temporaryMetadata.get(entry)?.processed);\n                if (target) {\n                    data.temporaryMetadata.set(target, { processed: true });\n                    solver({ ...properties, target });\n                }\n            } while (target);\n        });\n        return this;\n    };\n}\n\nconst onceRegistry = new WeakMap();\n/**\n * @function callOnce\n * @template {(...args: any[]) => any} Type\n * @description Function wrapper that ensures the passed function is called only once.\n * Subsequent calls will just return the cached computed result (if any) of the first call of that function.\n * @param {Type} fn - The function to process.\n *\n * @example\n * ```ts\n * const init = callOnce(function () { ... });\n * const out = init();\n * ```\n */\nfunction callOnce(fn) {\n    if (onceRegistry.has(fn))\n        return onceRegistry.get(fn);\n    let called = false;\n    let result;\n    let promise;\n    const wrapper = function (...args) {\n        if (called)\n            return result;\n        if (promise)\n            return promise;\n        try {\n            const out = fn.apply(this, args);\n            if (out instanceof Promise) {\n                promise = out.then((val) => {\n                    result = val;\n                    called = true;\n                    promise = null;\n                    return val;\n                }).catch((err) => {\n                    promise = null;\n                    throw err;\n                });\n                return promise;\n            }\n            else {\n                result = out;\n                called = true;\n                return out;\n            }\n        }\n        catch (err) {\n            throw err;\n        }\n    };\n    onceRegistry.set(fn, wrapper);\n    return wrapper;\n}\n/**\n * @decorator\n * @function callOncePerInstance\n * @description Stage-3 method decorator. It ensures a method in a class is called only once per instance.\n * Subsequent calls will be canceled and log a warning. Works for instance or static methods.\n *\n * @example\n * ```ts\n *   class A {\n *     @callOnce init() { ... }\n *   }\n * ```\n */\nfunction callOncePerInstance(value, context) {\n    if (context.kind !== \"method\")\n        throw new Error(`@callOnce can only be used on methods (got: ${context.kind}).`);\n    const name = String(context.name);\n    const flag = Symbol(`__callOnce__${name}`);\n    return function (...args) {\n        if (this[flag]) {\n            console.warn(`Function ${name} has already been called once on this instance and will not be called again.`);\n            return;\n        }\n        this[flag] = true;\n        return value.apply(this, args);\n    };\n}\n\nfunction areEqual(...entries) {\n    if (entries.length < 2)\n        return true;\n    for (let i = 0; i < entries.length - 1; i++) {\n        if (entries[i] != entries[i + 1])\n            return false;\n    }\n    return true;\n}\nfunction equalToAny(entry, ...values) {\n    if (values.length < 1)\n        return true;\n    for (const value of values) {\n        if (entry == value)\n            return true;\n    }\n    return false;\n}\nfunction eachEqualToAny(values, ...entries) {\n    if (entries.length < 1)\n        return true;\n    for (const entry of entries) {\n        let equals = false;\n        for (const value of values) {\n            if (entry == value)\n                equals = true;\n        }\n        if (!equals)\n            return false;\n    }\n    return true;\n}\n\nfunction trim(value, max, min = 0) {\n    if (value < min)\n        value = min;\n    if (value > max)\n        value = max;\n    return value;\n}\nfunction mod(value, modValue = 0) {\n    while (value < 0)\n        value += modValue;\n    while (value >= modValue)\n        value -= modValue;\n    return value;\n}\n\n/**\n * @class StatefulReifect\n * @description A class to manage and apply dynamic state-based properties, styles, classes, and transitions to a\n * set of objects.\n *\n * @template {string | number | symbol} State - The type of the reifier's states.\n * @template {object} ClassType - The object type this reifier will be applied to.\n */\nlet StatefulReifect = (() => {\n    let _instanceExtraInitializers = [];\n    let _set_enabled_decorators;\n    let _set_propertiesEnabled_decorators;\n    let _set_stylesEnabled_decorators;\n    let _set_classesEnabled_decorators;\n    let _set_replaceWithEnabled_decorators;\n    let _set_transitionEnabled_decorators;\n    let _set_properties_decorators;\n    let _set_styles_decorators;\n    let _set_classes_decorators;\n    let _set_replaceWith_decorators;\n    let _set_transitionProperties_decorators;\n    let _set_transitionDuration_decorators;\n    let _set_transitionTimingFunction_decorators;\n    let _set_transitionDelay_decorators;\n    let _set_transition_decorators;\n    return class StatefulReifect {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n            _set_enabled_decorators = [auto()];\n            _set_propertiesEnabled_decorators = [auto()];\n            _set_stylesEnabled_decorators = [auto()];\n            _set_classesEnabled_decorators = [auto()];\n            _set_replaceWithEnabled_decorators = [auto()];\n            _set_transitionEnabled_decorators = [auto()];\n            _set_properties_decorators = [auto()];\n            _set_styles_decorators = [auto()];\n            _set_classes_decorators = [auto()];\n            _set_replaceWith_decorators = [auto()];\n            _set_transitionProperties_decorators = [auto()];\n            _set_transitionDuration_decorators = [auto()];\n            _set_transitionTimingFunction_decorators = [auto()];\n            _set_transitionDelay_decorators = [auto()];\n            _set_transition_decorators = [auto()];\n            __esDecorate(this, null, _set_enabled_decorators, { kind: \"setter\", name: \"enabled\", static: false, private: false, access: { has: obj => \"enabled\" in obj, set: (obj, value) => { obj.enabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_propertiesEnabled_decorators, { kind: \"setter\", name: \"propertiesEnabled\", static: false, private: false, access: { has: obj => \"propertiesEnabled\" in obj, set: (obj, value) => { obj.propertiesEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_stylesEnabled_decorators, { kind: \"setter\", name: \"stylesEnabled\", static: false, private: false, access: { has: obj => \"stylesEnabled\" in obj, set: (obj, value) => { obj.stylesEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_classesEnabled_decorators, { kind: \"setter\", name: \"classesEnabled\", static: false, private: false, access: { has: obj => \"classesEnabled\" in obj, set: (obj, value) => { obj.classesEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_replaceWithEnabled_decorators, { kind: \"setter\", name: \"replaceWithEnabled\", static: false, private: false, access: { has: obj => \"replaceWithEnabled\" in obj, set: (obj, value) => { obj.replaceWithEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transitionEnabled_decorators, { kind: \"setter\", name: \"transitionEnabled\", static: false, private: false, access: { has: obj => \"transitionEnabled\" in obj, set: (obj, value) => { obj.transitionEnabled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_properties_decorators, { kind: \"setter\", name: \"properties\", static: false, private: false, access: { has: obj => \"properties\" in obj, set: (obj, value) => { obj.properties = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_styles_decorators, { kind: \"setter\", name: \"styles\", static: false, private: false, access: { has: obj => \"styles\" in obj, set: (obj, value) => { obj.styles = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_classes_decorators, { kind: \"setter\", name: \"classes\", static: false, private: false, access: { has: obj => \"classes\" in obj, set: (obj, value) => { obj.classes = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_replaceWith_decorators, { kind: \"setter\", name: \"replaceWith\", static: false, private: false, access: { has: obj => \"replaceWith\" in obj, set: (obj, value) => { obj.replaceWith = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transitionProperties_decorators, { kind: \"setter\", name: \"transitionProperties\", static: false, private: false, access: { has: obj => \"transitionProperties\" in obj, set: (obj, value) => { obj.transitionProperties = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transitionDuration_decorators, { kind: \"setter\", name: \"transitionDuration\", static: false, private: false, access: { has: obj => \"transitionDuration\" in obj, set: (obj, value) => { obj.transitionDuration = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transitionTimingFunction_decorators, { kind: \"setter\", name: \"transitionTimingFunction\", static: false, private: false, access: { has: obj => \"transitionTimingFunction\" in obj, set: (obj, value) => { obj.transitionTimingFunction = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transitionDelay_decorators, { kind: \"setter\", name: \"transitionDelay\", static: false, private: false, access: { has: obj => \"transitionDelay\" in obj, set: (obj, value) => { obj.transitionDelay = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_transition_decorators, { kind: \"setter\", name: \"transition\", static: false, private: false, access: { has: obj => \"transition\" in obj, set: (obj, value) => { obj.transition = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        timeRegex = (__runInitializers(this, _instanceExtraInitializers), /^(\\d+(?:\\.\\d+)?)(ms|s)?$/i);\n        //List of attached objects\n        attachedObjects = [];\n        _states;\n        values;\n        /**\n         * @description Creates an instance of StatefulReifier.\n         * @param {StatefulReifectProperties<State, ClassType>} properties - The configuration properties.\n         */\n        constructor(properties) {\n            //Initializing enabled state\n            this.enable({\n                global: true, properties: true, classes: true, styles: true,\n                replaceWith: true, transition: true\n            });\n            this.properties = properties.properties || {};\n            this.classes = properties.classes || {};\n            this.styles = properties.styles || {};\n            this.replaceWith = properties.replaceWith || {};\n            this.transition = properties.transition ?? \"all 0s linear 0s\";\n            if (properties.transitionProperties)\n                this.transitionProperties = properties.transitionProperties;\n            if (properties.transitionDuration !== undefined)\n                this.transitionDuration = properties.transitionDuration;\n            if (properties.transitionTimingFunction)\n                this.transitionTimingFunction = properties.transitionTimingFunction;\n            if (properties.transitionDelay !== undefined)\n                this.transitionDelay = properties.transitionDelay;\n            //Disable transition if undefined\n            if (!properties.transition && !properties.transitionProperties && !properties.transitionDuration\n                && !properties.transitionTimingFunction && !properties.transitionDelay)\n                this.transitionEnabled = false;\n            if (properties.states)\n                this.states = properties.states;\n            if (properties.attachedObjects)\n                this.attachAll(...properties.attachedObjects);\n        }\n        /*\n         *\n         * *********************************\n         *\n         * Attached objects management\n         *\n         * *********************************\n         *\n         */\n        /**\n         * @function attach\n         * @description Attaches an object to the reifier.\n         * @param {ClassType} object - The object to attach.\n         * @param {(state: State, index: number, total: number, object: ClassType) => void} [onSwitch] - Optional\n         * callback fired when the reifier is applied to the object. The callback takes as parameters:\n         * - `state: State`: The state being applied to the object.\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         * @param {number} [index] - Optional index to specify the position at which to insert the object in the reifier's\n         * attached list.\n         * @returns {this} - The reifier itself, for method chaining.\n         */\n        attach(object, onSwitch, index) {\n            const data = this.getData(object);\n            if (data && onSwitch)\n                data.onSwitch = onSwitch;\n            if (data)\n                return;\n            this.attachObject(object, index, onSwitch);\n            return this;\n        }\n        /**\n         * @function attachAll\n         * @description Attaches multiple objects to the reifier.\n         * @param {...ClassType[]} objects - The objects to attach.\n         * @returns {this} - The reifier itself, for method chaining.\n         */\n        attachAll(...objects) {\n            objects.forEach(object => {\n                if (this.getData(object))\n                    return;\n                this.attachObject(object);\n            });\n            return this;\n        }\n        /**\n         * @function attachAllAt\n         * @description Attaches multiple objects to the reifier at a specified index.\n         * @param {number} index - The index to specify the position at which to insert the objects in the reifier's\n         * attached list.\n         * @param {...ClassType[]} objects - The objects to attach.\n         * @returns {this} - The reifier itself, for method chaining.\n         */\n        attachAllAt(index, ...objects) {\n            objects.forEach((object, count) => {\n                if (this.getData(object))\n                    return;\n                this.attachObject(object, index + count);\n            });\n            return this;\n        }\n        /**\n         * @function detach\n         * @description Detaches one or more objects from the reifier.\n         * @param {...ClassType[]} objects - The objects to detach.\n         * @returns {this} - The reifier itself, for method chaining.\n         */\n        detach(...objects) {\n            objects.forEach(object => {\n                const data = this.getData(object);\n                if (!data)\n                    return;\n                this.detachObject(data);\n            });\n            return this;\n        }\n        /**\n         * @protected\n         * @function attachObject\n         * @description Function used to generate a data entry for the given object, and add it to the attached list at\n         * the provided index (if any).\n         * @param {ClassType} object - The object to attach\n         * @param {number} [index] - Optional index to specify the position at which to insert the object in the reifier's\n         * attached list.\n         * @param {(state: State, index: number, total: number, object: ClassType) => void} [onSwitch] - Optional\n         * callback fired when the reifier is applied to the object. The callback takes as parameters:\n         * - `state: State`: The state being applied to the object.\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         * @returns {ReifectObjectData<State, ClassType>} - The created data entry.\n         */\n        attachObject(object, index, onSwitch) {\n            if (index == undefined || isNaN(index))\n                index = this.attachedObjects.length;\n            if (index < 0)\n                index = 0;\n            const data = this.generateNewData(object, onSwitch);\n            this.attachedObjects.splice(index, 0, data);\n            $(object).reifects?.attach(this);\n            data.lastState = this.stateOf(object);\n            this.applyResolvedValues(data, false, true);\n            // this.applyTransition(data);\n            return data;\n        }\n        /**\n         * @protected\n         * @function detachObject\n         * @description Function used to remove a data entry from the attached objects list.\n         * @param {ReifectObjectData<State, ClassType>} data - The data entry to remove.\n         */\n        detachObject(data) {\n            this.attachedObjects.splice(this.attachedObjects.indexOf(data), 1);\n        }\n        /**\n         * @function getData\n         * @description Retrieve the data entry of a given object.\n         * @param {ClassType} object - The object to find the data of.\n         * @returns {ReifectObjectData<State, ClassType>} - The corresponding data, or `null` if was not found.\n         */\n        getData(object) {\n            if (!object)\n                return null;\n            for (const entry of this.attachedObjects) {\n                const entryObject = this.getObject(entry);\n                if (entryObject && entryObject == object)\n                    return entry;\n            }\n            return null;\n        }\n        /**\n         * @function getObject\n         * @description Retrieves the object attached to the given data entry.\n         * @param {ReifectObjectData<State, ClassType>} data - The data entry to get the corresponding object of.\n         * @returns {ClassType} The corresponding object, or `null` if was garbage collected.\n         */\n        getObject(data) {\n            if (!data)\n                return null;\n            const object = data.object.deref();\n            return object || null;\n        }\n        /*\n         *\n         * *********************************\n         *\n         * States stuff\n         *\n         * *********************************\n         *\n         */\n        /**\n         * @description All possible states.\n         */\n        get states() {\n            return this._states;\n        }\n        set states(value) {\n            if (!value)\n                this._states = this.getAllStates();\n            else\n                this._states = value;\n        }\n        /**\n         * @function stateOf\n         * @description Determine the current state of the reifect on the provided object.\n         * @param {ClassType} object - The object to determine the state for.\n         * @returns {State | undefined} - The current state of the reifect or undefined if not determinable.\n         */\n        stateOf(object) {\n            if (!object)\n                return undefined;\n            const data = this.getData(object);\n            if (!data)\n                return undefined;\n            if (data.lastState)\n                return data.lastState;\n            if (!(object instanceof HTMLElement))\n                return this.states[0];\n            if (!data.resolvedValues)\n                this.processRawProperties(data);\n            for (const state of this.states) {\n                if (!data.resolvedValues?.styles?.[state])\n                    continue;\n                let matches = true;\n                for (const [property, value] of Object.entries(data.resolvedValues.styles[state])) {\n                    if (object.style[property] != value) {\n                        matches = false;\n                        break;\n                    }\n                }\n                if (!matches)\n                    continue;\n                data.lastState = state;\n                return state;\n            }\n            return this.states[0];\n        }\n        getAllStates() {\n            const states = [...this.states];\n            for (const values of [this.properties,\n                this.classes, this.styles, this.replaceWith]) {\n                if (typeof values != \"object\")\n                    continue;\n                for (const state of Object.keys(values)) {\n                    if (!states.includes(state))\n                        states.push(state);\n                }\n            }\n            if (states.length == 0)\n                console.warn(\"No states found for this particular reifect:\", this);\n            return states;\n        }\n        /**\n         * @protected\n         * @function parseState\n         * @description Parses a boolean into the corresponding state value.\n         * @param {State | boolean} value - The value to parse.\n         * @returns {State} The parsed value, or `null` if the boolean could not be parsed.\n         */\n        parseState(value) {\n            if (typeof value != \"boolean\")\n                return this.states.includes(value) ? value : this.states[0];\n            else\n                for (const str of value ? [\"true\", \"on\", \"in\", \"enabled\", \"shown\"]\n                    : [\"false\", \"off\", \"out\", \"disabled\", \"hidden\"]) {\n                    if (!this.states.includes(str))\n                        continue;\n                    return str;\n                }\n            return this.states[0];\n        }\n        /*\n         *\n         * *********************************\n         *\n         * Enabled stuff\n         *\n         * *********************************\n         *\n         */\n        set enabled(value) {\n            this.refreshResolvedValues();\n        }\n        set propertiesEnabled(value) {\n            this.refreshProperties();\n        }\n        set stylesEnabled(value) {\n            this.refreshStyles();\n        }\n        set classesEnabled(value) {\n            this.refreshClasses();\n        }\n        set replaceWithEnabled(value) {\n            this.refreshReplaceWith();\n        }\n        set transitionEnabled(value) {\n            this.refreshTransition();\n        }\n        /**\n         * @function enable\n         * @description Sets/updates the `enabled` value corresponding to the provided object for this reifier.\n         * @param {ClassType} object - The object to set the state of.\n         * @param {boolean | ReifectEnabledObject} value - The value to set/update with. Setting it to a boolean will\n         * accordingly update the value of `enabled.global`.\n         */\n        enable(value, object) {\n            if (typeof value === \"boolean\")\n                this.enabled = value;\n            else if (!value)\n                return;\n            else\n                Object.entries(value).forEach(([key, value]) => {\n                    if (key == \"global\")\n                        this.enabled = value;\n                    else\n                        this[key + \"Enabled\"] = value;\n                });\n        }\n        enableObject(object, value) {\n            const data = this.getData(object);\n            if (!data)\n                return;\n            if (typeof value == \"boolean\")\n                data.enabled.global = value;\n            else if (!value)\n                return;\n            else\n                Object.entries(value).forEach(([key, value]) => data.enabled[key] = value);\n        }\n        /**\n         * @function getObjectEnabledState\n         * @description Returns the `enabled` value corresponding to the provided object for this reifier.\n         * @param {ClassType} object - The object to get the state of.\n         * @returns {ReifectEnabledObject} - The corresponding enabled state.\n         */\n        getObjectEnabledState(object) {\n            return this.getData(object)?.enabled;\n        }\n        /*\n         *\n         * *********************************\n         *\n         * Properties stuff\n         *\n         * *********************************\n         *\n         */\n        /**\n         * @description The properties to be assigned to the objects. It could take:\n         * - A record of `{key: value}` pairs.\n         * - A record of `{state: {key: value} pairs or an interpolation function that would return a record of\n         * {key: value} pairs}`.\n         * - An interpolation function that would return a record of `{key: value}` pairs based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set properties(value) {\n        }\n        /**\n         * @description The styles to be assigned to the objects (only if they are eligible elements). It could take:\n         * - A record of `{CSS property: value}` pairs.\n         * - A record of `{state: {CSS property: value} pairs or an interpolation function that would return a record of\n         * {key: value} pairs}`.\n         * - An interpolation function that would return a record of `{key: value}` pairs based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set styles(value) {\n        }\n        /**\n         * @description The classes to be assigned to the objects (only if they are eligible elements). It could take:\n         * - A string of space-separated classes.\n         * - An array of classes.\n         * - A record of `{state: space-separated class string, array of classes, or an interpolation function that would\n         * return any of the latter}`.\n         * - An interpolation function that would return a string of space-separated classes or an array of classes based\n         * on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set classes(value) {\n        }\n        /**\n         * @description The object that should replace (in the DOM as well if eligible) the attached objects. It could take:\n         * - The object to be replaced with.\n         * - A record of `{state: object to be replaced with, or an interpolation function that would return an object\n         * to be replaced with}`.\n         * - An interpolation function that would return the object to be replaced with based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set replaceWith(value) {\n        }\n        /**\n         * @description The property(ies) to apply a CSS transition on, on the attached objects. Defaults to \"all\". It\n         * could take:\n         * - A string of space-separated CSS properties.\n         * - An array of CSS properties.\n         * - A record of `{state: space-separated CSS properties string, array of CSS properties, or an interpolation\n         * function that would return any of the latter}`.\n         * - An interpolation function that would return a string of space-separated CSS properties or an array of\n         * CSS properties based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set transitionProperties(value) {\n        }\n        /**\n         * @description The duration of the CSS transition to apply on the attached objects. Defaults to 0. It could take:\n         * - A numerical value (in seconds).\n         * - A record of `{state: duration (number in seconds) or an interpolation function that would return a duration\n         * (number in seconds)}`.\n         * - An interpolation function that would return a duration (number in seconds) based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set transitionDuration(value) {\n        }\n        /**\n         * @description The timing function of the CSS transition to apply on the attached objects. Defaults to \"linear.\"\n         * It could take:\n         * - A string representing the timing function to apply.\n         * - A record of `{state: timing function (string) or an interpolation function that would return a timing\n         * function (string)}`.\n         * - An interpolation function that would return a timing function (string) based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set transitionTimingFunction(value) {\n        }\n        /**\n         * @description The delay of the CSS transition to apply on the attached objects. Defaults to 0. It could take:\n         * - A numerical value (in seconds).\n         * - A record of `{state: delay (number in seconds) or an interpolation function that would return a delay\n         * (number in seconds)}`.\n         * - An interpolation function that would return a delay (number in seconds) based on the state value.\n         *\n         * The interpolation function would take as arguments:\n         * - `state: State`: the state being applied to the object(s). Only passed to the callback function if it is\n         * defined for the whole field (and not for a specific state).\n         * - `index: number`: the index of the object in the applied list.\n         * - `total: number`: the total number of objects in the applied list.\n         * - `object: ClassType`: the object itself.\n         */\n        set transitionDelay(value) {\n        }\n        set transition(value) {\n            if (!value)\n                return;\n            const object = typeof value === \"string\"\n                ? this.processTransitionString(value)\n                : this.processTransitionObject(value);\n            if (object.transitionProperties !== undefined)\n                this.transitionProperties = object.transitionProperties;\n            if (object.transitionDuration !== undefined)\n                this.transitionDuration = object.transitionDuration;\n            if (object.transitionDelay !== undefined)\n                this.transitionDelay = object.transitionDelay;\n            if (object.transitionTimingFunction !== undefined)\n                this.transitionTimingFunction = object.transitionTimingFunction;\n        }\n        processTransitionObject(transitionObject) {\n            const transitionValues = {};\n            for (const [state, entry] of Object.entries(transitionObject)) {\n                if (!this.states.includes(state))\n                    continue;\n                if (typeof entry !== \"string\")\n                    continue;\n                const object = this.processTransitionString(entry);\n                if (object.transitionProperties !== undefined)\n                    transitionValues.transitionProperties[state] = object.transitionProperties;\n                if (object.transitionDuration !== undefined)\n                    transitionValues.transitionDuration[state] = object.transitionDuration;\n                if (object.transitionDelay !== undefined)\n                    transitionValues.transitionDelay[state] = object.transitionDelay;\n                if (object.transitionTimingFunction !== undefined)\n                    transitionValues.transitionTimingFunction[state] = object.transitionTimingFunction;\n            }\n            return transitionValues;\n        }\n        processTransitionString(transitionString) {\n            // Normalize commas → spaces, split & filter\n            const tokens = transitionString.trim().replace(/,/g, \" \").split(/\\s+/).filter(t => t.length > 0);\n            const object = { transitionProperties: [] };\n            let i = 0;\n            //Properties\n            while (i < tokens.length && !this.timeRegex.test(tokens[i])) {\n                object.transitionProperties.push(tokens[i]);\n                i++;\n            }\n            //Duration\n            if (i < tokens.length) {\n                const duration = this.parseTime(tokens[i]);\n                if (!isNaN(duration))\n                    object.transitionDuration = duration;\n                i++;\n            }\n            //Timing function\n            if (i < tokens.length) {\n                object.transitionTimingFunction = tokens[i];\n                i++;\n            }\n            //Delay\n            if (i < tokens.length) {\n                const delay = this.parseTime(tokens[i]);\n                if (!isNaN(delay))\n                    object.transitionDelay = delay;\n                i++;\n            }\n            return object;\n        }\n        /**\n         * @function getTransitionString\n         * @description Gets the CSS transition string for the specified direction.\n         * @param {ReifectObjectData<State, ClassType>} data - The target element's transition data entry.\n         * @param state\n         * @returns {string} The CSS transition string.\n         */\n        getTransitionString(data, state = data.lastState) {\n            let transitionString = \"\";\n            data.resolvedValues.transitionProperties[state].forEach(property => transitionString\n                += \", \" + property + \" \" + (data.resolvedValues.transitionDuration[state] || 0) + \"s \"\n                    + (data.resolvedValues.transitionTimingFunction[state] || \"linear\") + \" \"\n                    + (data.resolvedValues.transitionDelay[state] || 0) + \"s\");\n            return transitionString.substring(2);\n        }\n        /*\n         *\n         * *********************************\n         *\n         * Usage methods\n         *\n         * *********************************\n         *\n         */\n        initialize(state, objects, options) {\n            if (!this.enabled)\n                return;\n            state = this.parseState(state);\n            options = this.initializeOptions(options, objects);\n            this.getEnabledObjectsData(objects, options).forEach(data => {\n                if (options.recomputeProperties || !data.resolvedValues)\n                    this.processRawProperties(data, options.propertiesOverride);\n                data.lastState = state;\n                this.applyResolvedValues(data, true, options?.applyStylesInstantly);\n                if (data.onSwitch)\n                    data.onSwitch(state, data.objectIndex, data.totalObjectCount, this.getObject(data));\n            });\n        }\n        apply(state, objects, options) {\n            if (!this.enabled)\n                return;\n            state = this.parseState(state);\n            options = this.initializeOptions(options, objects);\n            this.getEnabledObjectsData(objects, options).forEach(data => {\n                if (options.recomputeProperties || !data.resolvedValues)\n                    this.processRawProperties(data, options.propertiesOverride);\n                data.lastState = state;\n                this.applyResolvedValues(data, false, options?.applyStylesInstantly);\n                if (data.onSwitch)\n                    data.onSwitch(state, data.objectIndex, data.totalObjectCount, this.getObject(data));\n            });\n        }\n        toggle(objects, options) {\n            if (!this.enabled)\n                return;\n            if (!objects)\n                objects = [];\n            else if (objects instanceof HTMLCollection)\n                objects = [...objects];\n            else if (!Array.isArray(objects))\n                objects = [objects];\n            const previousState = this.getData(objects[0])?.lastState;\n            const nextStateIndex = mod(!previousState ? 0 : this.states.indexOf(previousState) + 1, this.states.length);\n            this.apply(this.states[nextStateIndex], objects, options);\n        }\n        /**\n         * @function reloadFor\n         * @description Generates the transition CSS string for the provided transition with the correct interpolation\n         * information.\n         * @param {ClassType} object - The element to apply the string to.\n         * @returns {this} Itself for method chaining.\n         */\n        reloadFor(object) {\n            if (!this.enabled)\n                return this;\n            const data = this.getData(object);\n            if (!data || !data.enabled || !data.enabled.global)\n                return this;\n            this.applyResolvedValues(data);\n            return this;\n        }\n        reloadTransitionFor(object) {\n            if (!this.enabled || !this.transitionEnabled)\n                return this;\n            const data = this.getData(object);\n            if (!data || !data.enabled || !data.enabled.global || !data.enabled.transition)\n                return this;\n            this.applyTransition(data, data.lastState);\n            return this;\n        }\n        getEnabledObjectsData(objects, options) {\n            if (!this.enabled) {\n                console.warn(\"The reifier object you are trying to access is disabled.\");\n                return [];\n            }\n            if (!objects)\n                objects = [];\n            else if (objects instanceof HTMLCollection)\n                objects = [...objects];\n            else if (!Array.isArray(objects))\n                objects = [objects];\n            options = this.initializeOptions(options, objects);\n            if (options.attachObjects)\n                objects.forEach(element => this.attach(element));\n            if (options.executeForAll) {\n                objects = [];\n                this.attachedObjects.forEach(entry => {\n                    const object = entry.object.deref();\n                    if (object)\n                        objects.push(object);\n                });\n            }\n            const enabledObjectsData = [];\n            objects.forEach((object) => {\n                const data = this.getData(object) || this.generateNewData(object);\n                if (!this.filterEnabledObjects(data))\n                    return;\n                if (options.recomputeIndices || data.objectIndex == undefined)\n                    data.objectIndex = enabledObjectsData.length;\n                enabledObjectsData.push(data);\n            });\n            enabledObjectsData.forEach(data => {\n                if (options.recomputeIndices || data.totalObjectCount == undefined) {\n                    data.totalObjectCount = enabledObjectsData.length;\n                }\n            });\n            return enabledObjectsData;\n        }\n        /*\n         *\n         * *********************************\n         *\n         * Property setting stuff\n         *\n         * *********************************\n         *\n         */\n        applyResolvedValues(data, skipTransition = false, applyStylesInstantly = false) {\n            this.applyStyles(data, data.lastState, applyStylesInstantly);\n            if (!skipTransition) {\n                const handler = $(data.object.deref()).reifects;\n                if (this.attachedObjects.includes(data) && handler)\n                    handler.reloadTransitions();\n                else\n                    this.applyTransition(data, data.lastState);\n            }\n            this.applyReplaceWith(data, data.lastState);\n            this.applyProperties(data, data.lastState);\n            this.applyClasses(data, data.lastState);\n        }\n        refreshResolvedValues() {\n            this.refreshProperties();\n            this.refreshStyles();\n            this.refreshClasses();\n            this.refreshReplaceWith();\n            this.refreshTransition();\n        }\n        applyProperties(data, state = data.lastState) {\n            if (!this.enabled || !this.propertiesEnabled)\n                return;\n            if (!data.enabled.global || !data.enabled.properties)\n                return;\n            const properties = data.resolvedValues?.properties?.[state];\n            if (!properties)\n                return;\n            const object = data.object.deref();\n            if (!object)\n                return;\n            for (const [field, value] of Object.entries(properties)) {\n                if (!field || value == undefined)\n                    continue;\n                try {\n                    object[field] = value;\n                }\n                catch (e) {\n                    console.error(`Unable to set property ${field} to ${value}: ${e.message}`);\n                }\n            }\n        }\n        refreshProperties() {\n            if (!this.enabled || !this.propertiesEnabled)\n                return;\n            this.attachedObjects.forEach(data => this.applyProperties(data));\n        }\n        applyReplaceWith(data, state = data.lastState) {\n            if (!this.enabled || !this.replaceWithEnabled)\n                return;\n            if (!data.enabled.global || !data.enabled.replaceWith)\n                return;\n            const newObject = data.resolvedValues?.replaceWith?.[state];\n            if (!newObject)\n                return;\n            try {\n                const object = data.object.deref();\n                if (object && object instanceof Node && newObject instanceof Node)\n                    object.parentNode?.replaceChild(newObject, object);\n                data.object = new WeakRef(newObject);\n            }\n            catch (e) {\n                console.error(`Unable to replace object: ${e.message}`);\n            }\n        }\n        refreshReplaceWith() {\n            if (!this.enabled || !this.replaceWithEnabled)\n                return;\n            this.attachedObjects.forEach(data => this.applyReplaceWith(data));\n        }\n        applyClasses(data, state = data.lastState) {\n            if (!this.enabled || !this.classesEnabled)\n                return;\n            if (!data.enabled.global || !data.enabled.classes)\n                return;\n            const classes = data.resolvedValues?.classes;\n            if (!classes)\n                return;\n            const object = data.object.deref();\n            if (!object || !(object instanceof Element))\n                return;\n            for (const [key, value] of Object.entries(classes)) {\n                $(object).toggleClass(value, state == key);\n            }\n        }\n        refreshClasses() {\n            if (!this.enabled || !this.classesEnabled)\n                return;\n            this.attachedObjects.forEach(data => this.applyClasses(data));\n        }\n        applyStyles(data, state = data.lastState, applyStylesInstantly = false) {\n            if (!this.enabled || !this.stylesEnabled)\n                return;\n            if (!data.enabled.global || !data.enabled.styles)\n                return;\n            if (!data.resolvedValues?.styles)\n                return;\n            const object = data.object.deref();\n            if (!object || !(object instanceof Element))\n                return;\n            $(object).setStyles(data.resolvedValues.styles[state], applyStylesInstantly);\n        }\n        refreshStyles() {\n            if (!this.enabled || !this.stylesEnabled)\n                return;\n            this.attachedObjects.forEach(data => this.applyStyles(data));\n        }\n        applyTransition(data, state = data.lastState) {\n            if (!this.enabled || !this.transitionEnabled)\n                return;\n            if (!data.enabled.global || !data.enabled.transition)\n                return;\n            const object = data.object.deref();\n            if (!object || !(object instanceof Element) || !data.resolvedValues)\n                return;\n            $(object).appendStyle(\"transition\", this.getTransitionString(data, state), \", \", true);\n        }\n        refreshTransition() {\n            for (const data of this.attachedObjects) {\n                const handler = $(data.object?.deref()).reifects;\n                if (handler)\n                    handler.reloadTransitions();\n            }\n        }\n        //General methods (to be overridden for custom functionalities)\n        filterEnabledObjects(data) {\n            if (!data.enabled || !data.enabled.global) {\n                console.warn(\"The reified properties instance you are trying to set on an object is \" +\n                    \"disabled for this particular object.\");\n                return false;\n            }\n            return true;\n        }\n        //Utilities\n        processRawProperties(data, override) {\n            if (!data.resolvedValues)\n                data.resolvedValues = {\n                    properties: undefined,\n                    styles: undefined,\n                    classes: undefined,\n                    replaceWith: undefined,\n                    transitionProperties: undefined,\n                    transitionDuration: undefined,\n                    transitionTimingFunction: undefined,\n                    transitionDelay: undefined\n                };\n            if (isNull(override))\n                return;\n            const rawProperties = {\n                properties: this.properties,\n                styles: this.styles,\n                classes: this.classes,\n                replaceWith: this.replaceWith,\n                transitionProperties: this.transitionProperties,\n                transitionDuration: this.transitionDuration,\n                transitionTimingFunction: this.transitionTimingFunction,\n                transitionDelay: this.transitionDelay,\n                ...(override || {})\n            };\n            data.resolvedValues.properties = {};\n            this.states.forEach(state => this.processRawPropertyForState(data, \"properties\", rawProperties.properties, state));\n            if (\"transitionProperties\" in rawProperties) {\n                data.resolvedValues.transitionProperties = {};\n                this.states.forEach(state => this.processRawPropertyForState(data, \"transitionProperties\", rawProperties.transitionProperties, state));\n            }\n            for (const [field, values] of Object.entries(rawProperties)) {\n                if (field == \"transitionProperties\" || field == \"properties\")\n                    continue;\n                data.resolvedValues[field] = {};\n                this.states.forEach(state => this.processRawPropertyForState(data, field, values, state));\n            }\n        }\n        generateNewData(object, onSwitch) {\n            return {\n                object: new WeakRef(object),\n                enabled: { global: true, properties: true, classes: true, styles: true, replaceWith: true, transition: true },\n                lastState: this.stateOf(object),\n                onSwitch: onSwitch\n            };\n        }\n        initializeOptions(options, objects) {\n            if (!objects)\n                objects = [];\n            else if (objects instanceof HTMLCollection)\n                objects = [...objects];\n            else if (!Array.isArray(objects))\n                objects = [objects];\n            options = options || {};\n            options.attachObjects = options.attachObjects ?? true;\n            options.executeForAll = options.executeForAll ?? (objects.length === 0);\n            options.recomputeIndices = options.recomputeIndices ?? (objects.length !== 0);\n            options.recomputeProperties = options.recomputeProperties ?? (objects.length !== 0);\n            return options;\n        }\n        /**\n         * @description Clone the reifect to create a new copy with the same properties but no attached objects.\n         * @returns {StatefulReifect<State, ClassType>} - The new reifect.\n         */\n        clone() {\n            return new StatefulReifect({\n                states: this.states,\n                properties: this.properties,\n                classes: this.classes,\n                styles: this.styles,\n                replaceWith: this.replaceWith,\n                transitionProperties: this.transitionProperties,\n                transitionDuration: this.transitionDuration,\n                transitionTimingFunction: this.transitionTimingFunction,\n                transitionDelay: this.transitionDelay,\n            });\n        }\n        processRawPropertyForState(data, field, value, state) {\n            let resolvedValue;\n            const object = data.object.deref();\n            if (!object)\n                return;\n            if (typeof value == \"function\") {\n                resolvedValue = value(state, data.objectIndex, data.totalObjectCount, object);\n            }\n            else if (typeof value == \"object\" && eachEqualToAny(this.states, ...Object.keys(value))) {\n                const currentValue = value[state];\n                if (typeof currentValue == \"function\")\n                    resolvedValue = currentValue(data.objectIndex, data.totalObjectCount, object);\n                else\n                    resolvedValue = currentValue;\n            }\n            else\n                resolvedValue = value;\n            if ((field == \"properties\" || field == \"transitionProperties\") && typeof resolvedValue == \"string\") {\n                resolvedValue = resolvedValue.split(\" \");\n            }\n            else if (field == \"styles\") {\n                if (data.resolvedValues.styles[state] == undefined)\n                    data.resolvedValues.styles[state] = {};\n                if (typeof resolvedValue == \"number\") {\n                    data.resolvedValues.transitionProperties[state].forEach(property => data.resolvedValues.styles[state][property] = resolvedValue);\n                    return;\n                }\n                else if (typeof resolvedValue == \"string\") {\n                    const splitStyles = resolvedValue.split(\";\")\n                        .map(entry => entry.split(\":\")\n                        .map(part => part.trim()));\n                    if (splitStyles.length == 1 && splitStyles[0].length == 1) {\n                        data.resolvedValues.transitionProperties[state].forEach(property => data.resolvedValues.styles[state][property] = splitStyles[0][0]);\n                        return;\n                    }\n                }\n            }\n            data.resolvedValues[field][state] = resolvedValue;\n        }\n        /**\n         * @description Processes string durations like \"200ms\" or \"0.3s\", or even \"100\".\n         * @param value\n         * @private\n         */\n        parseTime(value) {\n            const matches = value.match(this.timeRegex);\n            if (!matches)\n                return NaN;\n            const num = parseFloat(matches[1]);\n            const unit = matches[2]?.toLowerCase() ?? \"s\";\n            return unit === \"ms\" ? num / 1000 : num;\n        }\n    };\n})();\nfunction statefulReifier(properties) {\n    return new StatefulReifect(properties);\n}\n\nvar Direction;\n(function (Direction) {\n    Direction[\"vertical\"] = \"vertical\";\n    Direction[\"horizontal\"] = \"horizontal\";\n})(Direction || (Direction = {}));\nvar SideH;\n(function (SideH) {\n    SideH[\"left\"] = \"left\";\n    SideH[\"right\"] = \"right\";\n})(SideH || (SideH = {}));\nvar SideV;\n(function (SideV) {\n    SideV[\"top\"] = \"top\";\n    SideV[\"bottom\"] = \"bottom\";\n})(SideV || (SideV = {}));\nvar Side;\n(function (Side) {\n    Side[\"top\"] = \"top\";\n    Side[\"bottom\"] = \"bottom\";\n    Side[\"left\"] = \"left\";\n    Side[\"right\"] = \"right\";\n})(Side || (Side = {}));\nvar InOut;\n(function (InOut) {\n    InOut[\"in\"] = \"in\";\n    InOut[\"out\"] = \"out\";\n})(InOut || (InOut = {}));\nvar OnOff;\n(function (OnOff) {\n    OnOff[\"on\"] = \"on\";\n    OnOff[\"off\"] = \"off\";\n})(OnOff || (OnOff = {}));\nvar Open;\n(function (Open) {\n    Open[\"open\"] = \"open\";\n    Open[\"closed\"] = \"closed\";\n})(Open || (Open = {}));\nvar Shown;\n(function (Shown) {\n    Shown[\"visible\"] = \"visible\";\n    Shown[\"hidden\"] = \"hidden\";\n})(Shown || (Shown = {}));\nvar AccessLevel;\n(function (AccessLevel) {\n    AccessLevel[\"public\"] = \"public\";\n    AccessLevel[\"protected\"] = \"protected\";\n    AccessLevel[\"private\"] = \"private\";\n})(AccessLevel || (AccessLevel = {}));\nvar Range;\n(function (Range) {\n    Range[\"min\"] = \"min\";\n    Range[\"max\"] = \"max\";\n})(Range || (Range = {}));\n\n/**\n * @class ReifectHandler\n * @description A class to handle reifects for an attached element.\n * @template {object = Node} ClassType\n */\nclass ReifectHandler {\n    attachedNode;\n    reifects;\n    _enabled;\n    /**\n     * @constructor\n     * @param {Node} attachedNode - The element to attach transitions to.\n     */\n    constructor(attachedNode) {\n        this.attachedNode = attachedNode;\n        this.reifects = [];\n        this._enabled = {};\n        this.enabled = true;\n    }\n    //Set management\n    /**\n     * @function attach\n     * @description Attach one or more transitions to the element.\n     * @param {StatefulReifect<any, ClassType>[]} reifects - The transition(s) to attach.\n     * @returns {this} The element's TransitionHandler instance.\n     */\n    attach(...reifects) {\n        reifects.forEach(entry => {\n            if (this.reifects.some(ref => ref.deref() == entry))\n                return;\n            this.reifects.push(new WeakRef(entry));\n            entry.attach(this.attachedNode);\n        });\n        return this;\n    }\n    /**\n     * @function detach\n     * @description Detach one or more transitions from the element.\n     * @param {StatefulReifect<any, ClassType>[]} reifects - The transition(s) to detach.\n     * @returns {this} The element's TransitionHandler instance.\n     */\n    detach(...reifects) {\n        reifects.forEach(entry => {\n            const attachedEntry = this.reifects.find(ref => ref.deref() == entry);\n            if (!attachedEntry)\n                return;\n            this.reifects.splice(this.reifects.indexOf(attachedEntry), 1);\n            entry.detach(this.attachedNode);\n        });\n        return this;\n    }\n    //Transition methods\n    /**\n     * @function initialize\n     * @description Initializes the element to the corresponding transition direction and styles.\n     * @param {StatefulReifect<State, ClassType>} reifect - The transition to initialize.\n     * @param {InOut} direction - The direction of the transition.\n     * @param {ReifectAppliedOptions<State, ClassType>} [options] - Optional styles to override the defaults. Set to\n     * `null` to not set any styles on the element.\n     * @returns {this} The element's TransitionHandler instance.\n     * @template {string | symbol | number} State\n     * @template {object} ClassType\n     */\n    initialize(reifect, direction, options) {\n        reifect.initialize(direction, this.attachedNode, options);\n        return this;\n    }\n    /**\n     * @function initialize\n     * @description Initializes the element to the corresponding transition direction and styles.\n     * @param {StatefulReifect<State, ClassType>} reifect - The transition to initialize.\n     * @param {InOut} direction - The direction of the transition.\n     * @param {ReifectAppliedOptions<State, ClassType>} [options] - Optional styles to override the defaults. Set to `null` to\n     * not set any styles on the element.\n     * @returns {this} The element's TransitionHandler instance.\n     * @template {string | symbol | number} State\n     * @template {object} ClassType\n     */\n    apply(reifect, direction, options) {\n        reifect.apply(direction, this.attachedNode, options);\n        return this;\n    }\n    /**\n     * @function initialize\n     * @description Initializes the element to the corresponding transition direction and styles.\n     * @param {StatefulReifect<State, ClassType>} reifect - The transition to initialize.\n     * @param {ReifectAppliedOptions<State, ClassType>} [options] - Optional styles to override the defaults. Set to\n     * `null` to not set any styles on the element.\n     * @returns {this} The element's TransitionHandler instance.\n     * @template {string | symbol | number} State\n     * @template {object} ClassType\n     */\n    toggle(reifect, options) {\n        reifect.toggle(this.attachedNode, options);\n        return this;\n    }\n    /**\n     * @private\n     * @function clear\n     * @description Clears the set transition styles on the element.\n     */\n    clear() {\n        if (!(this.attachedNode instanceof Node))\n            return;\n        $(this.attachedNode).setStyle(\"transition\", \"\", true);\n    }\n    /**\n     * @function reload\n     * @description Reloads all transitions attached to the element. Doesn't recompute styles.\n     */\n    reload() {\n        this.clear();\n        this.reifects.forEach(reifect => reifect.deref()?.reloadFor(this.attachedNode));\n    }\n    /**\n     * @function reload\n     * @description Reloads all transitions attached to the element. Doesn't recompute styles.\n     */\n    reloadTransitions() {\n        this.clear();\n        this.reifects.forEach(reifect => reifect.deref()?.reloadTransitionFor(this.attachedNode));\n    }\n    //State management\n    /**\n     * @description The enabled state of the reifect (as a {@link ReifectEnabledObject}). Setting it to a boolean will\n     * accordingly update the value of `enabled.global`.\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        if (typeof value == \"boolean\")\n            this._enabled.global = value;\n        else if (!value)\n            return;\n        else\n            for (const [key, state] of Object.entries(value))\n                this._enabled[key] = state;\n    }\n    getReifectEnabledState(reifect) {\n        return reifect.getObjectEnabledState(this.attachedNode);\n    }\n    enableReifect(reifect, value) {\n        reifect.enableObject(this.attachedNode, value);\n    }\n}\n\nclass ReifectFunctionsUtils {\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {});\n        return this.dataMap.get(element);\n    }\n}\n\nconst utils$2 = new ReifectFunctionsUtils();\nconst showTransition = new StatefulReifect({\n    states: [Shown.visible, Shown.hidden],\n    styles: (state) => `visibility: ${state}`\n});\nfunction setupReifectFunctions() {\n    /**\n     * @description Adds a readonly \"reifects\" property to Node prototype.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"reifects\", {\n        get: function () {\n            if (!this.element)\n                return;\n            const data = utils$2.data(this.element);\n            if (!data.reifects)\n                data.reifects = new ReifectHandler(this);\n            return data.reifects;\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Adds a configurable \"showTransition\" property to Node prototype. Defaults to a global\n     * transition assigned to all nodes.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"showTransition\", {\n        get: function () {\n            if (!this.element)\n                return;\n            const data = utils$2.data(this.element);\n            if (!data.showTransition)\n                data.showTransition = showTransition;\n            return data.showTransition;\n        },\n        set: function (value) {\n            if (!this.element)\n                return;\n            utils$2.data(this.element).showTransition = value;\n        },\n        configurable: true,\n        enumerable: true\n    });\n    /**\n     * @description Boolean indicating whether the node is shown or not, based on its showTransition.\n     */\n    Object.defineProperty(TurboSelector.prototype, \"isShown\", {\n        get: function () {\n            if (!this.element)\n                return;\n            const state = this.showTransition.stateOf(this);\n            if (state == Shown.visible)\n                return true;\n            else if (state == Shown.hidden)\n                return false;\n            return this.element.style.display != \"none\" && this.element.style.visibility != \"hidden\" && this.element.style.opacity != \"0\";\n        },\n        configurable: false,\n        enumerable: true\n    });\n    /**\n     * @description Show or hide the element (based on CSS) by transitioning in/out of the element's showTransition.\n     * @param {boolean} b - Whether to show the element or not\n     * @param {ReifectAppliedOptions<Shown>} [options={executeForAll: false}] - The options to pass to the reifect\n     * execution.\n     * @returns {this} Itself, allowing for method chaining.\n     */\n    TurboSelector.prototype.show = function _show(b, options = { executeForAll: false }) {\n        if (!this.element)\n            return;\n        this.showTransition.apply(b ? Shown.visible : Shown.hidden, this.element, options);\n        return this;\n    };\n}\n\nfunction turbo(tagOrElement) {\n    turbofy();\n    let el;\n    if (!tagOrElement)\n        tagOrElement = \"div\";\n    if (typeof tagOrElement === \"string\")\n        el = element({ tag: tagOrElement });\n    else if (typeof tagOrElement === \"object\") {\n        if (tagOrElement instanceof TurboSelector)\n            return tagOrElement;\n        if (tagOrElement instanceof Node)\n            el = tagOrElement;\n        else if (tagOrElement[\"element\"] && typeof tagOrElement[\"element\"] === \"object\")\n            el = tagOrElement[\"element\"];\n        else\n            el = tagOrElement;\n    }\n    const turboSelector = new TurboSelector();\n    turboSelector.element = el;\n    return turboSelector;\n}\nfunction tu(tagOrElement) {\n    return turbo(tagOrElement);\n}\nfunction t(tagOrElement) {\n    return turbo(tagOrElement);\n}\nfunction $(tagOrElement) {\n    return turbo(tagOrElement);\n}\nconst turbofy = callOnce(function (options = {}) {\n    if (!options.excludeHierarchyFunctions)\n        setupHierarchyFunctions();\n    if (!options.excludeMiscFunctions)\n        setupMiscFunctions();\n    if (!options.excludeClassFunctions)\n        setupClassFunctions();\n    if (!options.excludeElementFunctions)\n        setupElementFunctions();\n    if (!options.excludeEventFunctions)\n        setupEventFunctions();\n    if (!options.excludeStyleFunctions)\n        setupStyleFunctions();\n    if (!options.excludeToolFunctions)\n        setupToolFunctions();\n    if (!options.excludeSubstrateFunctions)\n        setupSubstrateFunctions();\n    if (!options.excludeReifectFunctions)\n        setupReifectFunctions();\n});\n\n/**\n * @internal\n */\nfunction keyFromArgs(args) {\n    if (!args || args.length === 0)\n        return \"__no_args__\";\n    return JSON.stringify(args.map((v) => {\n        if (typeof v === \"function\")\n            return `function:${v.name}`;\n        if (v && typeof v === \"object\") {\n            try {\n                return JSON.stringify(Object.entries(v).sort());\n            }\n            catch {\n                return \"[[unserializable-object]]\";\n            }\n        }\n        return v === undefined ? \"undefined\" : v;\n    }));\n}\n/**\n * @internal\n */\nfunction cacheKeySymbolFor(name) {\n    return Symbol(`__cache__${name}`);\n}\n/**\n * @internal\n */\nfunction initInvalidation(instance, name, isGetterCache, cacheKey, timeouts, options, deleteFn) {\n    // onEvent: attach to instance if it’s an EventTarget, else to document\n    if (options.onEvent) {\n        const target = typeof instance?.addEventListener === \"function\" ? instance : document;\n        const names = Array.isArray(options.onEvent)\n            ? options.onEvent\n            : String(options.onEvent).split(/\\s+/).filter(Boolean);\n        for (const evt of names)\n            $(target).on(evt, () => deleteFn());\n    }\n    // onFieldChange: wrap methods / define property setters to invalidate\n    if (options.onFieldChange) {\n        const list = Array.isArray(options.onFieldChange)\n            ? options.onFieldChange\n            : [options.onFieldChange];\n        for (const fieldOrFn of list) {\n            const fieldName = typeof fieldOrFn === \"string\" ? fieldOrFn : fieldOrFn.name;\n            if (!fieldName)\n                continue;\n            const desc = getFirstDescriptorInChain(instance, fieldName);\n            // If it's a method, wrap it (on the instance) to invalidate before/after\n            const existing = instance[fieldName];\n            if (typeof existing === \"function\") {\n                const originalFn = existing;\n                Object.defineProperty(instance, fieldName, {\n                    configurable: true,\n                    enumerable: desc?.enumerable ?? true,\n                    writable: true,\n                    value: function (...args) {\n                        deleteFn(); // invalidate first\n                        return originalFn.apply(this, args);\n                    },\n                });\n            }\n            else {\n                // Data / accessor property — define an instance-level accessor that invalidates on set\n                const getFallback = () => desc?.get ? desc.get.call(instance) : existing;\n                const setFallback = (nv) => {\n                    if (desc?.set)\n                        desc.set.call(instance, nv);\n                    else {\n                        // define on instance to shadow proto\n                        Object.defineProperty(instance, fieldName, {\n                            configurable: true,\n                            enumerable: true,\n                            writable: true,\n                            value: nv,\n                        });\n                    }\n                };\n                Object.defineProperty(instance, fieldName, {\n                    configurable: true,\n                    enumerable: desc?.enumerable ?? true,\n                    get() {\n                        return getFallback();\n                    },\n                    set(nv) {\n                        deleteFn();\n                        setFallback(nv);\n                    },\n                });\n            }\n        }\n    }\n    // onCallback (polling) — clears on a \"destroy\" event if the instance supports it\n    if (options.onCallback) {\n        const id = setInterval(() => {\n            const res = options.onCallback.call(instance);\n            if (res instanceof Promise) {\n                res.then((v) => deleteFn(Boolean(v)));\n            }\n            else {\n                deleteFn(Boolean(res));\n            }\n        }, options.onCallbackFrequency ?? 50);\n        if (typeof instance?.addEventListener === \"function\") {\n            instance.addEventListener(\"destroy\", () => clearInterval(id), { once: true });\n        }\n    }\n    // convenience time-based deletion helpers are scheduled where we write cache\n}\n\n/**\n * @decorator\n * @function cache\n * @description Stage-3 decorator that memorizes expensive reads.\n *\n * **What it does**\n * - **Method**: caches the return value **per unique arguments** (using a stable key from args).\n * - **Getter**: caches the value **once per instance** until invalidated.\n * - **Accessor**: wraps the `get` path like a cached getter; the `set` path invalidates cached value.\n *\n * @param {CacheOptions} [options] - Optional caching configuration to define when to clear it (on event, after\n * timeout, on next frame, on callback, etc.).\n *\n * @example\n * ```ts\n * class IconRenderer {\n *   #value = 0;\n *\n *   // Accessor: cached read; any write invalidates immediately\n *   @cache({clearOnNextFrame: true}) accessor data = {\n *     get: () => this.#value,\n *     set: (v: number) => { this.#value = v; }\n *   };\n *\n *   // Caches per argument list (e.g., same path ⇒ same result until invalidation)\n *   @cache({timeout: 5_000}) async loadSvg(path: string): Promise<string> {\n *     // ...expensive IO\n *     return fetch(path).then(r => r.text());\n *   }\n * }\n * ```\n */\n//TODO FIX THEN TEST ON ICON loadSvg\nfunction cache(options = {}) {\n    return function (value, context) {\n        const { kind, name, static: isStatic } = context;\n        const key = name;\n        const cacheKey = cacheKeySymbolFor(key);\n        const setupKey = Symbol(`__cache__setup__${key}`);\n        const timeouts = [];\n        const deleteCallback = function (hard = true) {\n            if (!hard)\n                return;\n            const slot = this[cacheKey];\n            if (!slot)\n                return;\n            if (slot instanceof Map)\n                slot.clear();\n            else\n                delete this[cacheKey];\n            for (const t of timeouts)\n                clearTimeout(t);\n            timeouts.length = 0;\n        };\n        // one-time per-instance setup\n        const ensureSetup = function () {\n            if (this[setupKey])\n                return;\n            this[setupKey] = true;\n            initInvalidation(this, key, kind === \"getter\" || kind === \"accessor\", cacheKey, timeouts, options, deleteCallback.bind(this));\n        };\n        if (kind === \"method\") {\n            const original = value;\n            context.addInitializer(function () {\n                if (!this[cacheKey])\n                    this[cacheKey] = new Map();\n            });\n            return function (...args) {\n                ensureSetup.call(this);\n                const map = this[cacheKey] ?? (this[cacheKey] = new Map());\n                const k = keyFromArgs(args);\n                if (map.has(k))\n                    return map.get(k);\n                const result = original.apply(this, args);\n                map.set(k, result);\n                // timeouts/RAF per-entry:\n                if (options.timeout) {\n                    const tid = setTimeout(() => map.delete(k), options.timeout);\n                    timeouts.push(tid);\n                }\n                if (options.clearOnNextFrame) {\n                    const raf = (typeof requestAnimationFrame === \"function\"\n                        ? requestAnimationFrame\n                        : (fn) => setTimeout(fn, 0));\n                    raf(() => deleteCallback.call(this));\n                }\n                return result;\n            };\n        }\n        // ---- GETTER -----------------------------------------------------------\n        if (kind === \"getter\") {\n            const originalGet = value;\n            return function () {\n                ensureSetup.call(this);\n                if (this[cacheKey] === undefined) {\n                    this[cacheKey] = originalGet.call(this);\n                    if (options.timeout) {\n                        const tid = setTimeout(() => deleteCallback.call(this), options.timeout);\n                        timeouts.push(tid);\n                    }\n                    if (options.clearOnNextFrame) {\n                        const raf = (typeof requestAnimationFrame === \"function\"\n                            ? requestAnimationFrame\n                            : (fn) => setTimeout(fn, 0));\n                        raf(() => deleteCallback.call(this));\n                    }\n                }\n                return this[cacheKey];\n            };\n        }\n        // ---- ACCESSOR (wrap read path; keep set untouched) --------------------\n        if (kind === \"accessor\") {\n            const orig = value;\n            return {\n                get() {\n                    ensureSetup.call(this);\n                    if (this[cacheKey] === undefined) {\n                        const out = orig.get ? orig.get.call(this) : undefined;\n                        this[cacheKey] = out;\n                        if (options.timeout) {\n                            const tid = setTimeout(() => deleteCallback.call(this), options.timeout);\n                            timeouts.push(tid);\n                        }\n                        if (options.clearOnNextFrame) {\n                            const raf = (typeof requestAnimationFrame === \"function\"\n                                ? requestAnimationFrame\n                                : (fn) => setTimeout(fn, 0));\n                            raf(() => deleteCallback.call(this));\n                        }\n                    }\n                    return this[cacheKey];\n                },\n                set(v) {\n                    // when the underlying value changes, invalidate cache immediately\n                    deleteCallback.call(this);\n                    if (orig.set)\n                        orig.set.call(this, v);\n                },\n                init(initial) {\n                    // keep normal accessor init behavior\n                    return initial;\n                },\n            };\n        }\n    };\n}\n/**\n * @function clearCache\n * @description Clear *all* cache entries created by `@cache` on an instance.\n * @param {any} instance - The instance for which the cache should be cleared.\n */\nfunction clearCache(instance) {\n    for (const sym of Object.getOwnPropertySymbols(instance)) {\n        if (String(sym).startsWith(\"Symbol(__cache__\")) {\n            delete instance[sym];\n        }\n    }\n}\n/**\n * @function clearCacheEntry\n * @description Clear a specific cache entry for a given method, function, or getter.\n * @param {any} instance - The instance for which the cache should be cleared.\n * @param {string | Function} field - The name (or the function itself) of the field to clear.\n */\nfunction clearCacheEntry(instance, field) {\n    const name = typeof field === \"function\" ? field.name : field;\n    const sym = Object.getOwnPropertySymbols(instance).find((s) => String(s) === `Symbol(__cache__${name})`);\n    if (sym)\n        delete instance[sym];\n}\n\nclass DefineDecoratorUtils {\n    prototypeMap = new WeakMap;\n    dataMap = new WeakMap;\n    data(element) {\n        if (element instanceof TurboSelector)\n            element = element.element;\n        if (!element)\n            return {};\n        if (!this.dataMap.has(element))\n            this.dataMap.set(element, {});\n        return this.dataMap.get(element);\n    }\n    prototype(prototype) {\n        if (!prototype)\n            return {};\n        if (!this.prototypeMap.has(prototype))\n            this.prototypeMap.set(prototype, {});\n        return this.prototypeMap.get(prototype);\n    }\n    fieldSetInPrototype(prototype, field) {\n        while (prototype && prototype !== HTMLElement.prototype) {\n            if (this.prototype(prototype)[field])\n                return true;\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        return false;\n    }\n    skipAttributeChangedCallback(prototype) {\n        return this.fieldSetInPrototype(prototype, \"setupAttributeChangedCallback\");\n    }\n    skipConnectedCallback(prototype) {\n        return this.fieldSetInPrototype(prototype, \"setupConnectedCallback\");\n    }\n    getNamesOfPrototypeChain(prototype) {\n        const result = [];\n        while (prototype && prototype !== HTMLElement.prototype) {\n            const name = this.prototype(prototype).name;\n            if (name)\n                result.push(name);\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        return result;\n    }\n}\n\nconst utils$1 = new DefineDecoratorUtils();\n/**\n * @decorator\n * @function define\n * @description Stage-3 **class** decorator factory. It:\n * - Registers the element with customElements (name inferred if omitted).\n * - Adds the defined (or inferred) customElement name as a class to all instances of this class (and the class's children).\n * - Publishes a *live* `observedAttributes` getter that lists all attributes associated with `@observed` fields in\n *   this class and its ancestors.\n * - Sets up an `attributeChangedCallback()` function to mirror changes from attributes to their associated\n * `@observed` fields.\n *\n * @param {string} [elementName] - The name of the custom HTML element. It is inferred if omitted.\n * @param {DefineOptions} [options] - Custom {@link DefineOptions} options object.\n *\n * @example\n * ```ts\n * @define() // name will be \"my-el\" (kebab case of class name).\n * class MyEl extends HTMLElement { ... }\n *\n * @define(\"my-el\") // explicit name\n * class MyEl extends HTMLElement { ... }\n * ````\n */\nfunction define(elementName, options = { injectAttributeBridge: true }) {\n    return function (Base, context) {\n        const name = elementName ?? camelToKebabCase(context.name);\n        const prototype = Base.prototype;\n        if (name)\n            utils$1.prototype(prototype).name = name;\n        Object.defineProperty(Base, \"observedAttributes\", {\n            configurable: true,\n            enumerable: false,\n            get: function () {\n                const combined = new Set();\n                let constructor = this;\n                while (constructor && constructor !== Function.prototype) {\n                    const set = constructor[Symbol.metadata]?.observedAttributes;\n                    if (set)\n                        for (const entry of set)\n                            combined.add(entry);\n                    constructor = Object.getPrototypeOf(constructor);\n                }\n                return Array.from(combined);\n            },\n        });\n        if (options.injectAttributeBridge !== false && !utils$1.skipAttributeChangedCallback(prototype)) {\n            utils$1.prototype(prototype).setupAttributeChangedCallback = true;\n            const wrapper = function (name, oldValue, newValue) {\n                getSuperMethod(this, \"attributeChangedCallback\", wrapper)?.call(this, name, oldValue, newValue);\n                if (newValue === oldValue)\n                    return;\n                if (utils$1.data(this).attributeBridgePass)\n                    return;\n                const property = kebabToCamelCase(name);\n                if (!(property in this))\n                    return;\n                try {\n                    utils$1.data(this).attributeBridgePass = true;\n                    this[property] = newValue === null ? undefined : parse(newValue);\n                }\n                finally {\n                    utils$1.data(this).attributeBridgePass = false;\n                }\n            };\n            Object.defineProperty(prototype, \"attributeChangedCallback\", {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: wrapper\n            });\n        }\n        if (!utils$1.skipConnectedCallback(prototype)) {\n            utils$1.prototype(prototype).setupConnectedCallback = true;\n            const wrapper = function () {\n                getSuperMethod(this, \"connectedCallback\", wrapper)?.call(this);\n                if (!(this instanceof HTMLElement))\n                    return;\n                for (const attribute of this.constructor.observedAttributes ?? []) {\n                    const value = this[kebabToCamelCase(attribute)];\n                    if (value === undefined)\n                        continue;\n                    const stringValue = stringify(value);\n                    if (this.getAttribute(attribute) !== stringValue)\n                        this.setAttribute(attribute, stringValue);\n                }\n                utils$1.getNamesOfPrototypeChain(Object.getPrototypeOf(this)).forEach(name => this.classList?.add(name));\n            };\n            Object.defineProperty(prototype, \"connectedCallback\", {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: wrapper,\n            });\n        }\n        context.addInitializer(function () {\n            if (name && !customElements.get(name))\n                customElements.define(name, Base);\n        });\n        return Base;\n    };\n}\n\n/**\n * @decorator\n * @function expose\n * @description Stage-3 decorator that augments fields, accessors, and methods to expose fields and methods\n * from inner instances.\n * @param {string} rootKey - The property key of the instance to expose from.\n *\n * @example\n * ```ts\n * protected model: TurboModel;\n * @expose(\"model\") public color: string;\n * ```\n * Is equivalent to:\n * ```ts\n * protected model: TurboModel;\n *\n * public get color(): string {\n *    return this.model.color;\n * }\n *\n * public set color(value: string) {\n *    this.model.color = value;\n * }\n * ```\n */\nfunction expose(rootKey) {\n    return function (value, context) {\n        const { kind, name } = context;\n        const key = String(name);\n        if (kind === \"method\") {\n            return function (...args) {\n                const root = this[rootKey];\n                const fn = root?.[key];\n                if (typeof fn === \"function\")\n                    return fn.apply(root, args);\n            };\n        }\n        context.addInitializer(function () {\n            const read = function () { return this[rootKey]?.[key]; };\n            const write = function (value) {\n                if (this[rootKey])\n                    this[rootKey][key] = value;\n            };\n            if (kind === \"field\" || kind === \"accessor\") {\n                const descriptor = getFirstDescriptorInChain(this, key);\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor?.enumerable ?? true,\n                    get: () => read.call(this),\n                    set: (value) => write.call(this, value),\n                });\n            }\n        });\n    };\n}\n\nclass ObserveUtils {\n    constructorMap = new WeakMap();\n    constructorData(target) {\n        let obj = this.constructorMap.get(target);\n        if (!obj) {\n            obj = { installed: new Map() };\n            this.constructorMap.set(target, obj);\n        }\n        return obj;\n    }\n}\n\nif (!(\"metadata\" in Symbol)) {\n    Object.defineProperty(Symbol, \"metadata\", {\n        value: Symbol.for(\"Symbol.metadata\"),\n        writable: false, enumerable: false, configurable: true,\n    });\n}\nconst utils = new ObserveUtils();\n/**\n * @decorator\n * @function observe\n * @description Stage-3 decorator for fields, getters, setters, and accessors that reflects a property to an HTML\n * attribute. So when the value of the property changes, it is reflected in the element's HTML attributes.\n * It also records the attribute name into the class's `observedAttributed` to listen for changes on the HTML.\n *\n * @example\n * ```ts\n * @define()\n * class MyClass extends HTMLElement {\n *    @observe fieldName: string = \"hello\";\n * }\n * ```\n *\n * Leads to:\n * ```html\n * <my-class field-name=\"hello\"></my-class>\n * ```\n *\n */\nfunction observe(value, context) {\n    const { kind, name, static: isStatic } = context;\n    const key = String(name);\n    const attribute = camelToKebabCase(key);\n    const backing = Symbol(`__observed_${key}`);\n    if (context.metadata) {\n        const observedAttributes = context.metadata.observedAttributes;\n        if (!Object.prototype.hasOwnProperty.call(context.metadata, \"observedAttributes\"))\n            context.metadata.observedAttributes = new Set(observedAttributes);\n        else if (!observedAttributes)\n            context.metadata.observedAttributes = new Set();\n        context.metadata.observedAttributes.add(attribute);\n    }\n    context.addInitializer(function () {\n        const prototype = isStatic ? this : getFirstPrototypeInChainWith(this, key);\n        let customGetter;\n        let customSetter;\n        if (kind === \"field\" || kind === \"accessor\")\n            try {\n                this[backing] = this[name];\n            }\n            catch { }\n        const read = function () {\n            return customGetter ? customGetter.call(this) : this[backing];\n        };\n        const write = function (value) {\n            const previous = this[key];\n            if (previous === value)\n                return;\n            if (customSetter)\n                customSetter.call(this, value);\n            else\n                this[backing] = value;\n            this.setAttribute?.(attribute, stringify(this[key]));\n        };\n        if (kind === \"field\" || kind === \"accessor\") {\n            const accessor = value;\n            if (accessor?.get)\n                customGetter = accessor.get;\n            if (accessor?.set)\n                customSetter = accessor.set;\n            const descriptor = getFirstDescriptorInChain(this, key);\n            if (descriptor?.get)\n                customGetter = descriptor.get;\n            if (descriptor?.set)\n                customSetter = descriptor.set;\n            Object.defineProperty(this, key, {\n                configurable: true,\n                enumerable: descriptor?.enumerable ?? true,\n                get: () => read.call(this),\n                set: (value) => write.call(this, value),\n            });\n        }\n        else if (kind === \"getter\" || kind === \"setter\") {\n            const installed = utils.constructorData(prototype).installed;\n            if (installed.get(key))\n                return;\n            installed.set(key, true);\n            const descriptor = getFirstDescriptorInChain(prototype, key) ?? {};\n            if (typeof descriptor.get === \"function\")\n                customGetter = descriptor.get;\n            if (typeof descriptor.set === \"function\")\n                customSetter = descriptor.set;\n            Object.defineProperty(prototype, key, {\n                configurable: true,\n                enumerable: !!descriptor?.enumerable,\n                get: function () { return read.call(this); },\n                set: function (value) { write.call(this, value); },\n            });\n        }\n    });\n}\n\n/**\n * @decorator\n * @function solver\n * @description Stage-3 decorator that turns methods into substrate solvers.\n * @example\n * ```ts\n * @solver private constrainPosition(properties: SubstrateSolverProperties) {...}\n * ```\n * Is equivalent to:\n * ```ts\n * private constrainPosition(properties: SubstrateSolverProperties) {...}\n *\n * public initialize() {\n *   ...\n *   $(this).addSolver(this.constrainPosition);\n * }\n * ```\n */\nfunction solver(value, context) {\n    const { name } = context;\n    context.addInitializer(function () { this[\"solverKeys\"]?.push(name); });\n    return value;\n}\n\n/**\n * @description Create a flex column element.\n * @param {TurboProperties<Tag>} properties - Object containing properties of the element.\n * @returns {ValidHTMLElement<Tag>} The created flex element.\n * @template {HTMLTag} Tag\n */\nfunction flexCol(properties) {\n    const el = element(properties);\n    $(el).setStyles({ display: \"flex\", flexDirection: \"column\" }, true);\n    return el;\n}\n/**\n * @description Create a flex column element.\n * @param {TurboProperties<Tag>} properties - Object containing properties of the element.\n * @returns {ValidHTMLElement<Tag>} The created flex element.\n * @template {HTMLTag} Tag\n */\nfunction flexColCenter(properties) {\n    const el = flexCol(properties);\n    $(el).setStyles({ justifyContent: \"center\", alignItems: \"center\" }, true);\n    return el;\n}\n/**\n * @description Create a flex row element.\n * @param {TurboProperties<Tag>} properties - Object containing properties of the element.\n * @returns {ValidHTMLElement<Tag>} The created flex element.\n * @template {HTMLTag} Tag\n */\nfunction flexRow(properties) {\n    const el = element(properties);\n    $(el).setStyles({ display: \"flex\", flexDirection: \"row\" }, true);\n    return el;\n}\n/**\n * @description Create a flex row element.\n * @param {TurboProperties<Tag>} properties - Object containing properties of the element.\n * @returns {ValidHTMLElement<Tag>} The created flex element.\n * @template {HTMLTag} Tag\n */\nfunction flexRowCenter(properties) {\n    const el = flexRow(properties);\n    $(el).setStyles({ justifyContent: \"center\", alignItems: \"center\" }, true);\n    return el;\n}\n/**\n * @description Create a spacer element.\n * @param {TurboProperties<Tag>} properties - Object containing properties of the element.\n * @returns {ValidHTMLElement<Tag>} The created spacer element.\n * @template {HTMLTag} Tag\n */\nfunction spacer(properties) {\n    const el = element(properties);\n    $(el).setStyle(\"flexGrow\", 1, true);\n    return el;\n}\n\n/**\n * @class TurboView\n * @template {object} ElementType - The type of the element attached to the view.\n * @template {TurboModel} ModelType - The model type used in this view.\n * @template {TurboEmitter} EmitterType - The emitter type used in this view.\n * @description A base view class for MVC elements, providing structure for initializing and managing UI setup and\n * event listeners. Designed to be devoid of logic and only handle direct UI changes.\n */\nclass TurboView {\n    /**\n     * @description The main component this view is attached to.\n     */\n    element;\n    /**\n     * @description The model instance this view is bound to.\n     */\n    model;\n    /**\n     * @description The emitter instance used for event communication.\n     */\n    emitter;\n    /**\n     * @constructor\n     * @param {TurboViewProperties<ElementType, ModelType, EmitterType>} properties - Properties to initialize the view with.\n     */\n    constructor(properties) {\n        this.element = properties.element;\n        if (properties.model)\n            this.model = properties.model;\n        if (properties.emitter)\n            this.emitter = properties.emitter;\n    }\n    /**\n     * @function initialize\n     * @description Initializes the view by setting up change callbacks, UI elements, layout, and event listeners.\n     */\n    initialize() {\n        this.setupUIElements();\n        this.setupUILayout();\n        this.setupUIListeners();\n        this.setupChangedCallbacks();\n    }\n    /**\n     * @function setupChangedCallbacks\n     * @description Setup method for initializing data/model change listeners and associated UI logic.\n     * @protected\n     */\n    setupChangedCallbacks() {\n        initializeEffects(this);\n    }\n    /**\n     * @function setupUIElements\n     * @description Setup method for initializing and storing sub-elements of the UI.\n     * @protected\n     */\n    setupUIElements() {\n    }\n    /**\n     * @function setupUILayout\n     * @description Setup method for creating the layout structure and injecting sub-elements into the DOM tree.\n     * @protected\n     */\n    setupUILayout() {\n    }\n    /**\n     * @function setupUIListeners\n     * @description Setup method for defining DOM and input event listeners.\n     * @protected\n     */\n    setupUIListeners() {\n    }\n}\n\n/**\n * @class TurboInteractor\n * @extends TurboController\n * @template {object} ElementType - The type of the main component.\n * @template {TurboView} ViewType - The element's MVC view type.\n * @template {TurboModel} ModelType - The element's MVC model type.\n * @template {TurboEmitter} EmitterType - The element's MVC emitter type.\n * @description Class representing an MVC interactor. It holds event listeners to set up on the element itself, or\n * the custom defined target.\n */\nclass TurboInteractor extends TurboController {\n    #target_accessor_storage;\n    /**\n     * @description The target of the event listeners. Defaults to the element itself.\n     */\n    get target() { return this.#target_accessor_storage; }\n    set target(value) { this.#target_accessor_storage = value; }\n    /**\n     * @readonly\n     * @description The name of the tool (if any) to listen for.\n     */\n    toolName;\n    /**\n     * @readonly\n     * @description The associated event manager. Defaults to `TurboEventManager.instance`.\n     */\n    manager;\n    /**\n     *\n     * @readonly\n     * @description Optional custom options to define per event type.\n     */\n    options;\n    constructor(properties) {\n        super(properties);\n        this.manager = properties.manager ?? this.manager ?? TurboEventManager.instance;\n        this.toolName = properties.toolName ?? this.toolName ?? undefined;\n        this.options = properties.listenerOptions ?? {};\n        const host = this.element;\n        this.target = properties.target ?? this.target ?? host instanceof Node ? host\n            : host?.element instanceof Node ? host.element\n                : undefined;\n    }\n    /**\n     * @function initialize\n     * @description Initialization function that sets up all the defined evnt listeners and attaches them to the target.\n     */\n    initialize() {\n        super.initialize();\n        const target = this.target ?? this;\n        for (const [methodName, eventName] of Object.entries(DefaultEventName)) {\n            const handler = this[methodName];\n            if (typeof handler !== \"function\")\n                continue;\n            const options = this.options?.[methodName];\n            if (this.toolName)\n                $(target).onTool(eventName, this.toolName, e => handler.call(this, e), options, this.manager);\n            else\n                $(target).on(eventName, e => handler.call(this, e), options, this.manager);\n        }\n    }\n}\n\n/**\n * @class TurboSubstrate\n * @extends TurboController\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n * @description Class representing a substrate in MVC, bound to the provided element.\n */\nclass TurboSubstrate extends TurboController {\n    /**\n     * @description The name of the substrate.\n     */\n    substrateName;\n    /**\n     * @description The property keys of the substrate solvers defined in the instance.\n     */\n    solverKeys = [];\n    /**\n     * @description The list of objects constrained by the substrate. Retrieving it will return a shallow copy as a\n     * Set. Use {@link addObject} and {@link removeObject} to manipulate the list.\n     */\n    get objectList() {\n        return $(this).getSubstrateObjectList(this.substrateName);\n    }\n    set objectList(value) {\n        $(this).setSubstrateObjectList(value, this.substrateName);\n    }\n    constructor(properties) {\n        super(properties);\n        this.substrateName = properties.substrateName ?? this.substrateName ?? undefined;\n        if (properties.onActivate)\n            this.onActivate = properties.onActivate;\n        if (properties.onDeactivate)\n            this.onDeactivate = properties.onDeactivate;\n    }\n    /**\n     * @function initialize\n     * @override\n     * @description Initialization function that calls {@link makeSubstrate} on `this.element`, sets it up, and attaches\n     * all the defined solvers.\n     */\n    initialize() {\n        super.initialize();\n        if (!this.substrateName)\n            return;\n        $(this).makeSubstrate(this.substrateName, {\n            onActivate: typeof this.onActivate === \"function\" ? this.onActivate.bind(this) : undefined,\n            onDeactivate: typeof this.onDeactivate === \"function\" ? this.onDeactivate.bind(this) : undefined,\n        });\n        this.solverKeys.forEach((key) => {\n            $(this).addSolver(props => this[key]?.(props));\n        });\n    }\n    /**\n     * @function addObject\n     * @description Adds the provided object to the substrate's list.\n     * @param {object} object - The object to add.\n     */\n    addObject(object) {\n        $(this).addObjectToSubstrate(object, this.substrateName);\n    }\n    /**\n     * @function removeObject\n     * @description Removes the provided object from the substrate's list.\n     * @param {object} object - The object to remove.\n     */\n    removeObject(object) {\n        $(this).removeObjectFromSubstrate(object, this.substrateName);\n    }\n    /**\n     * @function hasObject\n     * @description Whether the provided object is included in the substrate's list.\n     * @param {object} object - The object to check.\n     * @return {boolean} - Whether the object is present.\n     */\n    hasObject(object) {\n        return $(this).hasObjectInSubstrate(object, this.substrateName);\n    }\n    /**\n     * @function isProcessed\n     * @description Whether the provided object is processed within the current resolving loop.\n     * @param {object} object - The object to check.\n     * @return {boolean} - Whether the object was processed.\n     */\n    isProcessed(object) {\n        return $(this).wasObjectProcessedBySubstrate(object, this.substrateName);\n    }\n    /**\n     * @function addSolver\n     * @description Add the given function as a solver in the substrate.\n     * @param {SubstrateSolver} fn - The solver function to execute when calling {@link resolve}.\n     */\n    addSolver(fn) {\n        $(this).addSolver(fn, this.substrateName);\n    }\n    /**\n     * @function removeSolver\n     * @description Remove the given function from the substrate's list of solvers.\n     * @param {SubstrateSolver} fn - The solver function to remove.\n     */\n    removeSolver(fn) {\n        $(this).removeSolver(fn, this.substrateName);\n    }\n    /**\n     * @function clearSolvers\n     * @description Remove all solvers attached to the substrate.\n     */\n    clearSolvers() {\n        $(this).clearSolvers(this.substrateName);\n    }\n    /**\n     * @function resolve\n     * @description Resolve the substrate by calling all the solvers on each of the objects in the substrate's list.\n     * @param {SubstrateSolverProperties} [properties={}] - Optional properties to provide context to the resolving loop.\n     */\n    resolve(properties = {}) {\n        $(this).resolveSubstrate({ ...properties, substrate: this.substrateName });\n    }\n}\n\n/**\n * @class TurboTool\n * @extends TurboController\n * @template {object} ElementType - The type of the element.\n * @template {TurboView} ViewType - The element's view type, if any.\n * @template {TurboModel} ModelType - The element's model type, if any.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if any.\n * @description Class representing a tool in MVC, bound to the provided element.\n */\nclass TurboTool extends TurboController {\n    /**\n     * @description The name of the tool.\n     */\n    toolName;\n    /**\n     * @readonly\n     * @description The target of this tool. If defined, will embed the tool.\n     */\n    embeddedTarget;\n    /**\n     * @readonly\n     * @description The associated event manager. Defaults to `TurboEventManager.instance`.\n     */\n    manager;\n    /**\n     * @readonly\n     * @description Custom activation event to listen to. Defaults to the default click event name.\n     */\n    activationEvent = DefaultEventName.click;\n    /**\n     * @readonly\n     * @description Click mode that will hold this tool when activated. Defaults to `ClickMode.left`.\n     */\n    clickMode = ClickMode.left;\n    /**\n     * @readonly\n     * @description Optional keyboard key to map to this tool. When pressed, it will be set as the current key tool.\n     */\n    key;\n    constructor(properties) {\n        super(properties);\n        this.toolName = properties.toolName ?? this.toolName ?? undefined;\n        if (properties.embeddedTarget)\n            this.embeddedTarget = properties.embeddedTarget;\n        if (properties.onActivate)\n            this.onActivate = properties.onActivate;\n        if (properties.onDeactivate)\n            this.onDeactivate = properties.onDeactivate;\n        if (properties.activationEvent)\n            this.activationEvent = properties.activationEvent;\n        if (properties.clickMode)\n            this.clickMode = properties.clickMode;\n        if (properties.customActivation)\n            this.customActivation = properties.customActivation;\n        if (properties.key)\n            this.key = properties.key;\n        this.manager = properties.manager ?? this.manager ?? TurboEventManager.instance;\n    }\n    /**\n     * @function initialize\n     * @override\n     * @description Initialization function that calls {@link makeTool} on `this.element`, sets it up, and attaches\n     * all the defined tool behaviors.\n     */\n    initialize() {\n        super.initialize();\n        if (!this.toolName)\n            return;\n        $(this).makeTool(this.toolName, {\n            onActivate: typeof this.onActivate === \"function\" ? this.onActivate.bind(this) : undefined,\n            onDeactivate: typeof this.onDeactivate === \"function\" ? this.onDeactivate.bind(this) : undefined,\n            activationEvent: this.activationEvent,\n            clickMode: this.clickMode,\n            customActivation: typeof this.customActivation === \"function\" ? this.customActivation.bind(this) : undefined,\n            key: this.key,\n            manager: this.manager,\n        });\n        if (this.embeddedTarget)\n            $(this).embedTool(this.embeddedTarget, this.manager);\n        for (const [methodName, eventName] of Object.entries(DefaultEventName)) {\n            const handler = this[methodName];\n            if (typeof handler !== \"function\")\n                continue;\n            $(this).addToolBehavior(eventName, (e, target) => handler.call(this, e, target), this.toolName, this.manager);\n        }\n    }\n}\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z$3 = \"turbo-button{align-items:center;background-color:#dadada;border:1px solid #000;border-radius:.4em;color:#000;display:inline-flex;flex-direction:row;gap:.4em;padding:.5em .7em;text-decoration:none}turbo-button>h4{flex-grow:1}\";\nstyleInject(css_248z$3);\n\n/**\n * @description Converts a string of tags into an Element.\n * @param {string} text - The string to convert\n * @return The Element\n */\nfunction textToElement(text) {\n    let wrapper = document.createElement(\"div\");\n    wrapper.innerHTML = text;\n    return wrapper.children[0];\n}\nfunction createProxy(self, proxied) {\n    return new Proxy(self, {\n        get(target, prop, receiver) {\n            if (prop in target)\n                return Reflect.get(target, prop, receiver);\n            if (prop in proxied)\n                return Reflect.get(proxied, prop, receiver);\n            return undefined;\n        },\n        set(target, prop, value, receiver) {\n            if (prop in target)\n                return Reflect.set(target, prop, value, receiver);\n            return Reflect.set(proxied, prop, value, receiver);\n        }\n    });\n}\n\n/**\n * @description Fetches an SVG from the given path\n * @param {string} path - The path to the SVG\n * @param logError\n * @returns An SVGElement promise\n */\nfunction fetchSvg(path, logError = true) {\n    return new Promise((resolve, reject) => {\n        if (!path || path.length === 0) {\n            reject(new Error(\"Invalid path\"));\n            return;\n        }\n        fetch(path)\n            .then(response => {\n            if (!response.ok)\n                throw new Error(\"Network response was not ok while loading your SVG\");\n            return response.text();\n        })\n            .then(svgText => {\n            const svg = textToElement(svgText);\n            if (!svg)\n                throw new Error(\"Error parsing SVG text\");\n            resolve(svg);\n        })\n            .catch(error => {\n            if (!logError)\n                reject(error);\n            console.error(\"Error fetching SVG:\", error);\n            reject(error);\n        });\n    });\n}\n\nfunction defineUIPrototype(constructor) {\n    const prototype = constructor.prototype;\n    const unsetDefaultClassesKey = Symbol(\"__unset_default_classes__\");\n    Object.defineProperty(prototype, \"unsetDefaultClasses\", {\n        get: function () { return this[unsetDefaultClassesKey] ?? false; },\n        set: function (value) {\n            this[unsetDefaultClassesKey] = value;\n            const defaultClasses = this.constructor?.config?.defaultClasses;\n            if (!defaultClasses)\n                return;\n            $(this).toggleClass(defaultClasses, value);\n        },\n        enumerable: true,\n        configurable: true,\n    });\n}\n\n/**\n * @class TurboElement\n * @extends HTMLElement\n * @description Base TurboElement class, extending the base HTML element with a few useful tools and functions.\n * @template {TurboView} ViewType - The element's view type, if initializing MVC.\n * @template {object} DataType - The element's data type, if initializing MVC.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if initializing MVC.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if initializing MVC.\n * */\nclass TurboElement extends HTMLElement {\n    /**\n     * @description Static configuration object.\n     */\n    static config = {\n        shadowDOM: false,\n        defaultSelectedClass: \"selected\"\n    };\n    /**\n     * @description The MVC handler of the element. If initialized, turns the element into an MVC structure.\n     * @protected\n     */\n    mvc = new Mvc({ element: this });\n    /**\n     * @description Delegate fired when the element is attached to DOM.\n     */\n    onAttach = new Delegate();\n    /**\n     * @description Delegate fired when the element is detached from the DOM.\n     */\n    onDetach = new Delegate();\n    /**\n     * @description Delegate fired when the element is adopted by a new parent in the DOM.\n     */\n    onAdopt = new Delegate();\n    /**\n     * @description Update the class's static configurations. Will only overwrite the set properties.\n     * @property {typeof this.config} value - The object containing the new configurations.\n     */\n    static configure(value) {\n        Object.entries(value).forEach(([key, val]) => {\n            if (val !== undefined)\n                this.config[key] = val;\n        });\n    }\n    /**\n     * @function setupChangedCallbacks\n     * @description Setup method intended to initialize change listeners and callbacks. Called on `initialize()`.\n     * @protected\n     */\n    setupChangedCallbacks() {\n    }\n    /**\n     * @function setupUIElements\n     * @description Setup method intended to initialize all direct sub-elements attached to this element, and store\n     * them in fields. Called on `initialize()`.\n     * @protected\n     */\n    setupUIElements() {\n    }\n    /**\n     * @function setupUILayout\n     * @description Setup method to create the layout structure of the element by adding all created sub-elements to\n     * this element's child tree. Called on `initialize()`.\n     * @protected\n     */\n    setupUILayout() {\n    }\n    /**\n     * @function setupUIListeners\n     * @description Setup method to initialize and define all input/DOM event listeners of the element. Called on\n     * `initialize()`.\n     * @protected\n     */\n    setupUIListeners() {\n    }\n    /**\n     * @function connectedCallback\n     * @description function called when the element is attached to the DOM.\n     */\n    connectedCallback() {\n        this.onAttach.fire();\n    }\n    /**\n     * @function disconnectedCallback\n     * @description function called when the element is detached from the DOM.\n     */\n    disconnectedCallback() {\n        this.onDetach.fire();\n    }\n    /**\n     * @function adoptedCallback\n     * @description function called when the element is adopted by a new parent in the DOM.\n     */\n    adoptedCallback() {\n        this.onAdopt.fire();\n    }\n}\n(() => {\n    defineDefaultProperties(TurboElement);\n    defineMvcAccessors(TurboElement);\n    defineUIPrototype(TurboElement);\n})();\n\n/**\n * Icon class for creating icon elements.\n * @class TurboIcon\n * @extends TurboElement\n */\nlet TurboIcon = (() => {\n    let _classDecorators = [define(\"turbo-icon\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _type_decorators;\n    let _type_initializers = [];\n    let _type_extraInitializers = [];\n    let _directory_decorators;\n    let _directory_initializers = [];\n    let _directory_extraInitializers = [];\n    let _set_icon_decorators;\n    let _set_iconColor_decorators;\n    let _loadSvg_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _type_decorators = [observe, auto({\n                    initialValueCallback: function () { return this.getPropertiesValue(this.type, \"defaultType\", \"svg\"); },\n                    preprocessValue: function (value) {\n                        if (!value || value.length == 0)\n                            return this.type;\n                        if (value[0] == \".\")\n                            value = value.substring(1);\n                        return value;\n                    },\n                    callAfter: function () { this.generateIcon(); },\n                })];\n            _directory_decorators = [observe, auto({\n                    initialValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultDirectory\", \"\"); },\n                    preprocessValue: function (value) {\n                        if (isUndefined(value))\n                            return this.directory;\n                        if (value.length > 0 && !value.endsWith(\"/\"))\n                            value += \"/\";\n                        return value;\n                    },\n                    callAfter: function () { this.generateIcon(); }\n                })];\n            _set_icon_decorators = [observe, auto()];\n            _set_iconColor_decorators = [observe, auto()];\n            _loadSvg_decorators = [cache()];\n            __esDecorate(this, null, _set_icon_decorators, { kind: \"setter\", name: \"icon\", static: false, private: false, access: { has: obj => \"icon\" in obj, set: (obj, value) => { obj.icon = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_iconColor_decorators, { kind: \"setter\", name: \"iconColor\", static: false, private: false, access: { has: obj => \"iconColor\" in obj, set: (obj, value) => { obj.iconColor = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _loadSvg_decorators, { kind: \"method\", name: \"loadSvg\", static: false, private: false, access: { has: obj => \"loadSvg\" in obj, get: obj => obj.loadSvg }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _type_decorators, { kind: \"field\", name: \"type\", static: false, private: false, access: { has: obj => \"type\" in obj, get: obj => obj.type, set: (obj, value) => { obj.type = value; } }, metadata: _metadata }, _type_initializers, _type_extraInitializers);\n            __esDecorate(null, null, _directory_decorators, { kind: \"field\", name: \"directory\", static: false, private: false, access: { has: obj => \"directory\" in obj, get: obj => obj.directory, set: (obj, value) => { obj.directory = value; } }, metadata: _metadata }, _directory_initializers, _directory_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = {\n            ...TurboElement.config,\n            defaultType: \"svg\",\n            customLoaders: {}\n        };\n        static imageTypes = [\"png\", \"jpg\", \"jpeg\", \"gif\", \"webp\",\n            \"PNG\", \"JPG\", \"JPEG\", \"GIF\", \"WEBP\"];\n        _element = __runInitializers(this, _instanceExtraInitializers);\n        _loadToken = 0;\n        onLoaded;\n        /**\n         * @description The type of the icon.\n         */\n        type = __runInitializers(this, _type_initializers, void 0);\n        /**\n         * @description The user-provided (or statically configured) directory to the icon's file.\n         */\n        directory = (__runInitializers(this, _type_extraInitializers), __runInitializers(this, _directory_initializers, void 0));\n        /**\n         * @description The path to the icon's source file.\n         */\n        get path() {\n            let extension = getFileExtension(this.icon);\n            const icon = this.icon?.replace(extension, \"\");\n            if (extension.length === 0 && this.type?.length > 0)\n                extension = \".\" + this.type;\n            return this.directory + icon + extension;\n        }\n        /**\n         * @description The name (or path) of the icon. Might include the file extension (to override the icon's type).\n         * Setting it will update the icon accordingly.\n         */\n        set icon(value) {\n            const ext = getFileExtension(value).substring(1);\n            if (ext)\n                this.type = ext;\n            this.generateIcon();\n        }\n        /**\n         * @description The assigned color to the icon (if any)\n         */\n        set iconColor(value) {\n            this.updateColor(value);\n        }\n        /**\n         * @description The child element of the icon element (an HTML image or an SVG element).\n         */\n        set element(value) {\n            this._element = value;\n        }\n        get element() {\n            return this._element;\n        }\n        //Utilities\n        loadSvg(path) {\n            return fetchSvg(path);\n        }\n        loadImg(path) {\n            return img({ src: path, alt: this.icon });\n        }\n        updateColor(value = this.iconColor) {\n            if (value && this.element instanceof SVGElement)\n                this.element.style.fill = value;\n        }\n        generateIcon() {\n            const path = this.path;\n            const type = getFileExtension(path)?.substring(1);\n            if (this.element instanceof HTMLImageElement\n                && equalToAny(type, ...this.constructor.imageTypes)) {\n                this.element.src = this.path;\n                this.element.alt = this.icon;\n                return;\n            }\n            this.clear();\n            if (!this.icon)\n                return;\n            const token = ++this._loadToken;\n            const element = this.getLoader(type)(path);\n            if (element instanceof Element)\n                this.setupLoadedElement(element);\n            else\n                element.then(element => {\n                    if (token !== this._loadToken)\n                        return;\n                    this.setupLoadedElement(element);\n                }).catch(error => console.error(`Failed to load icon: ${error}`));\n        }\n        getLoader(type) {\n            if (!type)\n                return;\n            const customLoader = this.constructor.config.customLoaders[type];\n            if (customLoader)\n                return customLoader;\n            if (equalToAny(type, \"svg\", \"SVG\"))\n                return this.loadSvg.bind(this);\n            if (equalToAny(type, ...this.constructor.imageTypes))\n                return this.loadImg.bind(this);\n            throw new Error(`Unsupported icon type: ${type}`);\n        }\n        setupLoadedElement(element) {\n            if (this.element || !element)\n                return;\n            if (element.parentElement)\n                element = element.cloneNode(true);\n            $(this).addChild(element);\n            this.updateColor();\n            this.onLoaded?.(element);\n            this.element = element;\n        }\n        clear() {\n            $(this.element).destroy();\n            this.element = null;\n        }\n        constructor() {\n            super(...arguments);\n            __runInitializers(this, _directory_extraInitializers);\n        }\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction icon(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-icon\";\n    return element({ ...properties });\n}\n\n/**\n * Class for creating a rich turbo element (an element that is possibly accompanied by icons (or other elements) on\n * its left and/or right).\n * @class TurboRichElement\n * @extends TurboElement\n * @template {ValidTag} ElementTag - The tag of the main element to create the rich element from.\n */\nlet TurboRichElement = (() => {\n    let _classDecorators = [define(\"turbo-rich-element\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _elementTag_decorators;\n    let _elementTag_initializers = [];\n    let _elementTag_extraInitializers = [];\n    let _set_leftCustomElements_decorators;\n    let _set_leftIcon_decorators;\n    let _set_prefixEntry_decorators;\n    let _set_element_decorators;\n    let _set_suffixEntry_decorators;\n    let _set_rightIcon_decorators;\n    let _set_rightCustomElements_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _elementTag_decorators = [auto({ initialValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultElementTag\", \"h4\"); } })];\n            _set_leftCustomElements_decorators = [auto({ executeSetterBeforeStoring: true })];\n            _set_leftIcon_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (typeof value == \"string\") {\n                            if (this.leftIcon) {\n                                this.leftIcon.icon = value;\n                                return this.leftIcon;\n                            }\n                            value = icon({ icon: value });\n                        }\n                        $(this).remChild(this.leftIcon);\n                        this.addAtPosition(value, \"leftIcon\");\n                        return value;\n                    }\n                })];\n            _set_prefixEntry_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (typeof value == \"string\") {\n                            if (this.prefixEntry) {\n                                this.prefixEntry.textContent = value;\n                                return this.prefixEntry;\n                            }\n                            value = element({ text: value });\n                        }\n                        $(this).remChild(this.prefixEntry);\n                        this.addAtPosition(value, \"prefixEntry\");\n                        return value;\n                    }\n                })];\n            _set_element_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (typeof value === \"string\") {\n                            if (this.element && \"textContent\" in this.element) {\n                                this.element.textContent = value;\n                                return this.element;\n                            }\n                            value = element({ tag: this.elementTag, text: value });\n                        }\n                        else if (typeof value === \"object\" && !(value instanceof Element)) {\n                            if (!value.tag)\n                                value.tag = this.elementTag;\n                            value = element(value);\n                        }\n                        $(this).remChild(this.element);\n                        this.addAtPosition(value, \"element\");\n                        return value;\n                    }\n                })];\n            _set_suffixEntry_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (typeof value == \"string\") {\n                            if (this.suffixEntry) {\n                                this.suffixEntry.textContent = value;\n                                return this.suffixEntry;\n                            }\n                            value = element({ text: value });\n                        }\n                        $(this).remChild(this.suffixEntry);\n                        this.addAtPosition(value, \"suffixEntry\");\n                        return value;\n                    }\n                })];\n            _set_rightIcon_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (typeof value == \"string\") {\n                            if (this.rightIcon) {\n                                this.rightIcon.icon = value;\n                                return this.rightIcon;\n                            }\n                            value = icon({ icon: value });\n                        }\n                        $(this).remChild(this.rightIcon);\n                        this.addAtPosition(value, \"rightIcon\");\n                        return value;\n                    }\n                })];\n            _set_rightCustomElements_decorators = [auto({ executeSetterBeforeStoring: true })];\n            __esDecorate(this, null, _set_leftCustomElements_decorators, { kind: \"setter\", name: \"leftCustomElements\", static: false, private: false, access: { has: obj => \"leftCustomElements\" in obj, set: (obj, value) => { obj.leftCustomElements = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_leftIcon_decorators, { kind: \"setter\", name: \"leftIcon\", static: false, private: false, access: { has: obj => \"leftIcon\" in obj, set: (obj, value) => { obj.leftIcon = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_prefixEntry_decorators, { kind: \"setter\", name: \"prefixEntry\", static: false, private: false, access: { has: obj => \"prefixEntry\" in obj, set: (obj, value) => { obj.prefixEntry = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_element_decorators, { kind: \"setter\", name: \"element\", static: false, private: false, access: { has: obj => \"element\" in obj, set: (obj, value) => { obj.element = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_suffixEntry_decorators, { kind: \"setter\", name: \"suffixEntry\", static: false, private: false, access: { has: obj => \"suffixEntry\" in obj, set: (obj, value) => { obj.suffixEntry = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_rightIcon_decorators, { kind: \"setter\", name: \"rightIcon\", static: false, private: false, access: { has: obj => \"rightIcon\" in obj, set: (obj, value) => { obj.rightIcon = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_rightCustomElements_decorators, { kind: \"setter\", name: \"rightCustomElements\", static: false, private: false, access: { has: obj => \"rightCustomElements\" in obj, set: (obj, value) => { obj.rightCustomElements = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _elementTag_decorators, { kind: \"field\", name: \"elementTag\", static: false, private: false, access: { has: obj => \"elementTag\" in obj, get: obj => obj.elementTag, set: (obj, value) => { obj.elementTag = value; } }, metadata: _metadata }, _elementTag_initializers, _elementTag_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = {\n            ...TurboElement.config,\n            defaultElementTag: \"h4\"\n        };\n        childrenOrder = (__runInitializers(this, _instanceExtraInitializers), [\"leftCustomElements\", \"leftIcon\",\n            \"prefixEntry\", \"element\", \"suffixEntry\", \"rightIcon\", \"rightCustomElements\"]);\n        /**\n         * @description Adds a given element or elements to the button at a specified position.\n         * @param {Element | Element[] | null} element - The element(s) to add.\n         * @param {this[\"childrenOrder\"][number]} type - The type of child element being added.\n         */\n        addAtPosition(element, type) {\n            if (!element || !type)\n                return;\n            let nextSiblingIndex = 0;\n            for (let i = 0; i < this.childrenOrder.length; i++) {\n                const key = this.childrenOrder[i];\n                if (key === type)\n                    break;\n                const el = this[key];\n                if (el && el instanceof Element)\n                    nextSiblingIndex++;\n                else if (el && Array.isArray(el))\n                    nextSiblingIndex += el.length;\n            }\n            $(this).addChild(element, nextSiblingIndex);\n        }\n        /**\n         * @description The tag of the text element in the button\n         */\n        elementTag = __runInitializers(this, _elementTag_initializers, void 0);\n        /**\n         * @description The custom element(s) on the left. Can be set to new element(s) by a simple assignment.\n         */\n        set leftCustomElements(value) {\n            $(this).remChild(this.leftCustomElements);\n            this.addAtPosition(value, \"leftCustomElements\");\n        }\n        /**\n         * @description The left icon element. Can be set with a new icon by a simple assignment (the name/path of the\n         * icon, or a Turbo/HTML element).\n         */\n        set leftIcon(value) { }\n        get leftIcon() { return; }\n        /**\n         * @description The left icon element. Can be set with a new icon by a simple assignment (the name/path of the\n         * icon, or a Turbo/HTML element).\n         */\n        set prefixEntry(value) { }\n        get prefixEntry() { return; }\n        /**\n         * @description The text element. Can be set to a new element by a simple assignment. Setting the value to a new\n         * string will update the text's textContent with the given string.\n         */\n        set element(value) { }\n        get element() { return; }\n        /**\n         * @description The text element. Can be set to a new element by a simple assignment. Setting the value to a new\n         * string will update the text's textContent with the given string.\n         */\n        get text() {\n            const element = this.element;\n            if (!element)\n                return \"\";\n            return element.textContent;\n        }\n        set text(value) {\n            if (!value)\n                value = \"\";\n            this.element = value;\n        }\n        /**\n         * @description The left icon element. Can be set with a new icon by a simple assignment (the name/path of the\n         * icon, or a Turbo/HTML element).\n         */\n        set suffixEntry(value) { }\n        get suffixEntry() { return; }\n        /**\n         * @description The right icon element. Can be set with a new icon by a simple assignment (the name/path of the\n         * icon, or a Turbo/HTML element).\n         */\n        set rightIcon(value) { }\n        get rightIcon() { return; }\n        /**\n         * @description The custom element(s) on the right. Can be set to new element(s) by a simple assignment.\n         */\n        set rightCustomElements(value) {\n            $(this).remChild(this.rightCustomElements);\n            this.addAtPosition(value, \"rightCustomElements\");\n        }\n        constructor() {\n            super(...arguments);\n            __runInitializers(this, _elementTag_extraInitializers);\n        }\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction richElement(properties) {\n    if (properties.text && !properties.element)\n        properties.element = properties.text;\n    if (properties.elementTag && typeof properties.element === \"object\" && !(properties.element instanceof Element)) {\n        properties.element.tag = properties.elementTag;\n    }\n    if (!properties.tag)\n        properties.tag = \"turbo-rich-element\";\n    return element({ ...properties, text: undefined });\n}\n\n/**\n * Button class for creating Turbo button elements.\n * @class TurboButton\n * @extends TurboElement\n */\nlet TurboButton = (() => {\n    let _classDecorators = [define(\"turbo-button\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboRichElement;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = { ...TurboRichElement.config, defaultElementTag: \"h4\" };\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction button(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-button\";\n    return richElement({ ...properties });\n}\n\nlet TurboIconSwitch = (() => {\n    let _classDecorators = [define(\"turbo-icon-switch\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboIcon;\n    let _instanceExtraInitializers = [];\n    let _set_switchReifect_decorators;\n    let _set_defaultState_decorators;\n    let _set_appendStateToIconName_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_switchReifect_decorators = [auto({\n                    preprocessValue: function (value) {\n                        if (value instanceof StatefulReifect)\n                            return value;\n                        else\n                            return new StatefulReifect(value || {});\n                    }\n                })];\n            _set_defaultState_decorators = [auto()];\n            _set_appendStateToIconName_decorators = [auto()];\n            __esDecorate(this, null, _set_switchReifect_decorators, { kind: \"setter\", name: \"switchReifect\", static: false, private: false, access: { has: obj => \"switchReifect\" in obj, set: (obj, value) => { obj.switchReifect = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_defaultState_decorators, { kind: \"setter\", name: \"defaultState\", static: false, private: false, access: { has: obj => \"defaultState\" in obj, set: (obj, value) => { obj.defaultState = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_appendStateToIconName_decorators, { kind: \"setter\", name: \"appendStateToIconName\", static: false, private: false, access: { has: obj => \"appendStateToIconName\" in obj, set: (obj, value) => { obj.appendStateToIconName = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        config = (__runInitializers(this, _instanceExtraInitializers), { ...TurboIcon.config });\n        get switchReifect() { return; }\n        set switchReifect(value) {\n            this.switchReifect.attach(this);\n            if (this.defaultState)\n                this.switchReifect.apply(this.defaultState, this);\n        }\n        set defaultState(value) {\n            this.switchReifect?.apply(value, this);\n        }\n        set appendStateToIconName(value) {\n            if (value) {\n                const reifectProperties = this.switchReifect?.properties;\n                this.switchReifect.states.forEach(state => {\n                    if (!reifectProperties[state])\n                        reifectProperties[state] = {};\n                    reifectProperties[state].icon = this.icon + \"-\" + state.toString();\n                });\n            }\n        }\n        initialize() {\n            super.initialize();\n            if (this.defaultState && this.switchReifect)\n                this.switchReifect.apply(this.defaultState, this);\n        }\n    });\n    return _classThis;\n})();\nfunction iconSwitch(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-icon-switch\";\n    return icon({ ...properties });\n}\n\nlet TurboIconToggle = (() => {\n    let _classDecorators = [define(\"turbo-icon-toggle\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboIcon;\n    let _instanceExtraInitializers = [];\n    let _set_toggled_decorators;\n    let _set_toggleOnClick_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_toggled_decorators = [auto({ initialValue: false })];\n            _set_toggleOnClick_decorators = [auto({ initialValue: false })];\n            __esDecorate(this, null, _set_toggled_decorators, { kind: \"setter\", name: \"toggled\", static: false, private: false, access: { has: obj => \"toggled\" in obj, set: (obj, value) => { obj.toggled = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_toggleOnClick_decorators, { kind: \"setter\", name: \"toggleOnClick\", static: false, private: false, access: { has: obj => \"toggleOnClick\" in obj, set: (obj, value) => { obj.toggleOnClick = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        config = (__runInitializers(this, _instanceExtraInitializers), { ...TurboIcon.config });\n        stopPropagationOnClick = true;\n        onToggle;\n        clickListener = () => {\n            this.toggle();\n            return this.stopPropagationOnClick;\n        };\n        set toggled(value) {\n            if (this.onToggle)\n                this.onToggle(value, this);\n        }\n        set toggleOnClick(value) {\n            if (value)\n                $(this).on(DefaultEventName.click, this.clickListener);\n            else\n                $(this).removeListener(DefaultEventName.click, this.clickListener);\n        }\n        toggle() {\n            this.toggled = !this.toggled;\n        }\n    });\n    return _classThis;\n})();\nfunction iconToggle(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-icon-toggle\";\n    return icon({ ...properties });\n}\n\nfunction randomId(length = 8) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return Array.from(array)\n        .map(b => b.toString(36).padStart(2, \"0\"))\n        .join(\"\")\n        .slice(0, length);\n}\nfunction randomFromRange(n1, n2) {\n    if (typeof n1 != \"number\" || typeof n2 != \"number\")\n        return 0;\n    const min = Math.min(n1, n2);\n    const max = Math.max(n1, n2);\n    return (Math.random() * (max - min)) + min;\n}\nfunction randomColor(saturation = [50, 70], lightness = [70, 85]) {\n    if (typeof saturation != \"number\" && saturation.length >= 2)\n        saturation = randomFromRange(saturation[0], saturation[1]);\n    if (typeof lightness != \"number\" && lightness.length >= 2)\n        lightness = randomFromRange(lightness[0], lightness[1]);\n    return \"hsl(\" + Math.random() * 360 + \" \" + saturation + \" \" + lightness + \")\";\n}\nfunction randomString(length = 12) {\n    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    let result = \"\";\n    for (let i = 0; i < length; i++)\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    return result;\n}\n\nclass TurboInputInputInteractor extends TurboInteractor {\n    keyName = \"__input__interactor__\";\n    _composing = false;\n    _resizeQueued = false;\n    options = {\n        compositionStart: { capture: true },\n        compositionEnd: { capture: true },\n        input: { capture: true },\n    };\n    get inputElement() {\n        return this.element.element;\n    }\n    initialize() {\n        super.initialize();\n        $(this.target).bypassManagerOn = () => true;\n    }\n    setupChangedCallbacks() {\n        super.setupChangedCallbacks();\n        this.emitter.add(\"valueSet\", () => this.handleInput());\n    }\n    click() {\n        if (!this.element.locked)\n            this.inputElement?.focus();\n        return false;\n    }\n    focusIn(e) {\n        if (e.target !== this.inputElement)\n            return;\n        if (this.element.locked) {\n            this.inputElement.blur();\n            return;\n        }\n        if (this.element.selectTextOnFocus)\n            requestAnimationFrame(() => {\n                try {\n                    this.inputElement.select?.();\n                }\n                catch { }\n            });\n        this.element.onFocus.fire();\n        return true;\n    }\n    focusOut(e) {\n        if (e.target !== this.inputElement)\n            return;\n        this.element.value = this.element.element?.value;\n        this.element.onBlur.fire();\n    }\n    compositionStart(e) {\n        if (e.target !== this.inputElement)\n            return;\n        this._composing = true;\n    }\n    compositionEnd(e) {\n        if (e.target !== this.inputElement)\n            return;\n        this._composing = false;\n        this.handleInput();\n        return true;\n    }\n    input(e) {\n        if (e.target !== this.inputElement)\n            return;\n        this.handleInput();\n        return true;\n    }\n    handleInput() {\n        if (this._composing)\n            return;\n        if (!this.inputElement)\n            return;\n        if (this.element.dynamicVerticalResize && this.inputElement instanceof HTMLTextAreaElement) {\n            if (!this._resizeQueued) {\n                this._resizeQueued = true;\n                queueMicrotask(() => {\n                    this._resizeQueued = false;\n                    $(this.inputElement)\n                        .setStyle(\"height\", \"auto\", true)\n                        .setStyle(\"height\", this.inputElement.scrollHeight + \"px\", true);\n                });\n            }\n        }\n        this.emitter.fire(\"processValue\");\n    }\n}\n\nlet TurboInput = (() => {\n    let _classDecorators = [define(\"turbo-input\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboRichElement;\n    let _instanceExtraInitializers = [];\n    let _set_label_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_label_decorators = [auto()];\n            __esDecorate(this, null, _set_label_decorators, { kind: \"setter\", name: \"label\", static: false, private: false, access: { has: obj => \"label\" in obj, set: (obj, value) => { obj.label = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = {\n            ...TurboRichElement.config,\n            defaultElementTag: \"input\"\n        };\n        labelElement = __runInitializers(this, _instanceExtraInitializers);\n        _content;\n        get content() { return this._content; }\n        set content(value) { this._content = value; }\n        defaultId = \"turbo-input-\" + randomId();\n        locked = false;\n        selectTextOnFocus = false;\n        dynamicVerticalResize = false;\n        inputRegexCheck;\n        blurRegexCheck;\n        lastValidForInput = \"\";\n        lastValidForBlur = \"\";\n        onFocus = new Delegate();\n        onBlur = new Delegate();\n        onInput = new Delegate();\n        set label(value) {\n            if (!value || value.length === 0) {\n                if (this.labelElement)\n                    this.labelElement.remove();\n                return;\n            }\n            if (!this.labelElement) {\n                this.labelElement = element({ tag: \"label\", htmlFor: this.element?.id ?? this.defaultId });\n                $(this).childHandler = this;\n                $(this).addChild(this.labelElement, 0);\n                if (this.content)\n                    $(this).childHandler = this.content;\n            }\n            this.labelElement.textContent = value;\n        }\n        set element(value) {\n            if (!(value instanceof Node) && typeof value === \"object\") {\n                if (!value.name)\n                    value.name = randomId();\n                if (this.elementTag === \"input\" && !value.type)\n                    value.type = \"text\";\n            }\n            super.element = value;\n            if (this.element) {\n                if (!this.element.id)\n                    this.element.id = this.defaultId;\n                else if (this.labelElement)\n                    this.labelElement.htmlFor = this.element.id;\n            }\n        }\n        get element() {\n            return super.element;\n        }\n        initialize() {\n            super.initialize();\n            this.mvc.generate({ interactors: [TurboInputInputInteractor] });\n            this.mvc.getInteractor(\"__input__interactor__\").target = this.content;\n        }\n        setupUIElements() {\n            super.setupUIElements();\n            this.content = div();\n        }\n        setupUILayout() {\n            super.setupUILayout();\n            $(this.content).addChild($(this).childrenArray);\n            $(this).addChild([this.labelElement, this.content]);\n            $(this).childHandler = this.content;\n        }\n        setupChangedCallbacks() {\n            super.setupChangedCallbacks();\n            this.mvc.emitter.add(\"processValue\", () => this.processInputValue());\n        }\n        get value() {\n            const value = this.element?.value;\n            try {\n                const num = parseFloat(value);\n                if (!isNaN(num))\n                    return num;\n            }\n            catch { }\n            return value;\n        }\n        set value(value) {\n            if (!(this.element instanceof HTMLInputElement) && !(this.element instanceof HTMLTextAreaElement))\n                return;\n            let strValue = value.toString();\n            if (this.blurRegexCheck) {\n                const re = new RegExp(this.blurRegexCheck);\n                if (!re.test(strValue))\n                    strValue = this.lastValidForBlur;\n            }\n            this.element.value = strValue;\n            this.mvc.emitter.fire(\"valueSet\");\n        }\n        processInputValue(value = this.element.value) {\n            if (this.inputRegexCheck) {\n                const re = new RegExp(this.inputRegexCheck);\n                if (!re.test(value)) {\n                    const attemptSanitize = this.sanitizeByRegex(value, this.inputRegexCheck);\n                    if (re.test(attemptSanitize))\n                        value = attemptSanitize;\n                    else\n                        value = this.lastValidForInput;\n                }\n            }\n            this.lastValidForInput = value.toString();\n            if (this.blurRegexCheck) {\n                const re = new RegExp(this.blurRegexCheck);\n                if (re.test(value.toString()))\n                    this.lastValidForBlur = value;\n            }\n            else {\n                this.lastValidForBlur = value;\n            }\n            this.element.value = value;\n            this.onInput.fire();\n        }\n        sanitizeByRegex(value, rule) {\n            const src = typeof rule === \"string\" ? rule : rule.source;\n            const flags = typeof rule === \"string\" ? \"\" : rule.flags.replace(\"g\", \"\");\n            const re = new RegExp(src, flags);\n            let out = \"\";\n            for (const ch of value) {\n                const candidate = out + ch;\n                re.lastIndex = 0;\n                if (re.test(candidate))\n                    out = candidate;\n            }\n            return out;\n        }\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction turboInput(properties) {\n    properties.element = properties.input;\n    properties.elementTag = properties.inputTag;\n    if (!properties.elementTag)\n        properties.elementTag = \"input\";\n    if (!properties.element)\n        properties.element = {};\n    if (!properties.tag)\n        properties.tag = \"turbo-input\";\n    return richElement({ ...properties, input: undefined, inputTag: undefined });\n}\n\nlet TurboNumericalInput = (() => {\n    let _classDecorators = [define(\"turbo-numerical-input\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboInput;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        multiplier = 1;\n        decimalPlaces;\n        min;\n        max;\n        get value() {\n            return Number.parseFloat(this.element.value) / this.multiplier;\n        }\n        set value(value) {\n            if (!value || value == \"\")\n                value = 0;\n            if (typeof value == \"string\")\n                value = Number.parseFloat(value);\n            value *= this.multiplier;\n            if (this.min != undefined && value < this.min)\n                value = this.min;\n            if (this.max != undefined && value > this.max)\n                value = this.max;\n            if (this.decimalPlaces != undefined) {\n                value = Math.round(value * Math.pow(10, this.decimalPlaces)) / Math.pow(10, this.decimalPlaces);\n            }\n            super.value = value;\n        }\n    });\n    return _classThis;\n})();\nfunction numericalInput(properties) {\n    if (!properties.inputRegexCheck)\n        properties.inputRegexCheck = /^(?!-0?(\\.0+)?$)-?(0|[1-9]\\d*)?(\\.\\d+)?\\.?$|^-$|^$/;\n    if (!properties.blurRegexCheck)\n        properties.blurRegexCheck = /^(?!-0?(\\.0+)?$)-?(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$/;\n    if (!properties.tag)\n        properties.tag = \"turbo-numerical-input\";\n    return turboInput({ ...properties });\n}\n\nclass TurboSelectInputEvent extends TurboEvent {\n    toggledEntry;\n    values;\n    constructor(properties) {\n        super(properties);\n        this.toggledEntry = properties.toggledEntry;\n        this.values = properties.values;\n    }\n}\n\n/**\n * @class TurboBaseElement\n * @description TurboHeadlessElement class, similar to TurboElement but without extending HTMLElement.\n * @template {TurboView} ViewType - The element's view type, if initializing MVC.\n * @template {object} DataType - The element's data type, if initializing MVC.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if initializing MVC.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if initializing MVC.\n */\nclass TurboBaseElement {\n    /**\n     * @description Static configuration object.\n     */\n    static config = {};\n    /**\n     * @description Update the class's static configurations. Will only overwrite the set properties.\n     * @property {typeof this.config} value - The object containing the new configurations.\n     */\n    static configure(value) {\n        Object.entries(value).forEach(([key, val]) => {\n            if (val !== undefined)\n                this.config[key] = val;\n        });\n    }\n}\n(() => {\n    defineDefaultProperties(TurboBaseElement);\n})();\n\n/**\n * Base class for creating a selection menu\n * @class TurboSelect\n * @extends TurboElement\n */\nlet TurboSelect = (() => {\n    let _classSuper = TurboBaseElement;\n    let _instanceExtraInitializers = [];\n    let _set_parent_decorators;\n    let _getValue_decorators;\n    let _getValue_initializers = [];\n    let _getValue_extraInitializers = [];\n    let _getSecondaryValue_decorators;\n    let _getSecondaryValue_initializers = [];\n    let _getSecondaryValue_extraInitializers = [];\n    let _createEntry_decorators;\n    let _createEntry_initializers = [];\n    let _createEntry_extraInitializers = [];\n    let _onEntryAdded_decorators;\n    let _onEntryAdded_initializers = [];\n    let _onEntryAdded_extraInitializers = [];\n    let _onEntryRemoved_decorators;\n    let _onEntryRemoved_initializers = [];\n    let _onEntryRemoved_extraInitializers = [];\n    let _set_multiSelection_decorators;\n    let _forceSelection_decorators;\n    let _forceSelection_initializers = [];\n    let _forceSelection_extraInitializers = [];\n    let _selectedEntryClasses_decorators;\n    let _selectedEntryClasses_initializers = [];\n    let _selectedEntryClasses_extraInitializers = [];\n    return class TurboSelect extends _classSuper {\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_parent_decorators = [auto()];\n            _getValue_decorators = [auto({\n                    defaultValue: (entry) => entry instanceof TurboRichElement ? entry.text\n                        : entry instanceof HTMLElement ? entry.textContent\n                            : entry instanceof Element ? entry.innerHTML\n                                : undefined\n                })];\n            _getSecondaryValue_decorators = [auto({ defaultValue: () => \"\" })];\n            _createEntry_decorators = [auto({\n                    defaultValue: (value) => richElement({ text: stringify(value) })\n                })];\n            _onEntryAdded_decorators = [auto({\n                    defaultValue: function (entry) {\n                        this.initializeSelection();\n                        $(entry).on(DefaultEventName.click, () => {\n                            this.select(entry, !this.isSelected(entry));\n                            return true;\n                        });\n                    },\n                })];\n            _onEntryRemoved_decorators = [auto({\n                    defaultValue: function (entry) { },\n                })];\n            _set_multiSelection_decorators = [auto({ defaultValue: false })];\n            _forceSelection_decorators = [auto({ defaultValueCallback: function () { return !this.multiSelection; } })];\n            _selectedEntryClasses_decorators = [auto({\n                    initialValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultSelectedEntryClasses\"); }\n                })];\n            __esDecorate(this, null, _set_parent_decorators, { kind: \"setter\", name: \"parent\", static: false, private: false, access: { has: obj => \"parent\" in obj, set: (obj, value) => { obj.parent = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_multiSelection_decorators, { kind: \"setter\", name: \"multiSelection\", static: false, private: false, access: { has: obj => \"multiSelection\" in obj, set: (obj, value) => { obj.multiSelection = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _getValue_decorators, { kind: \"field\", name: \"getValue\", static: false, private: false, access: { has: obj => \"getValue\" in obj, get: obj => obj.getValue, set: (obj, value) => { obj.getValue = value; } }, metadata: _metadata }, _getValue_initializers, _getValue_extraInitializers);\n            __esDecorate(null, null, _getSecondaryValue_decorators, { kind: \"field\", name: \"getSecondaryValue\", static: false, private: false, access: { has: obj => \"getSecondaryValue\" in obj, get: obj => obj.getSecondaryValue, set: (obj, value) => { obj.getSecondaryValue = value; } }, metadata: _metadata }, _getSecondaryValue_initializers, _getSecondaryValue_extraInitializers);\n            __esDecorate(null, null, _createEntry_decorators, { kind: \"field\", name: \"createEntry\", static: false, private: false, access: { has: obj => \"createEntry\" in obj, get: obj => obj.createEntry, set: (obj, value) => { obj.createEntry = value; } }, metadata: _metadata }, _createEntry_initializers, _createEntry_extraInitializers);\n            __esDecorate(null, null, _onEntryAdded_decorators, { kind: \"field\", name: \"onEntryAdded\", static: false, private: false, access: { has: obj => \"onEntryAdded\" in obj, get: obj => obj.onEntryAdded, set: (obj, value) => { obj.onEntryAdded = value; } }, metadata: _metadata }, _onEntryAdded_initializers, _onEntryAdded_extraInitializers);\n            __esDecorate(null, null, _onEntryRemoved_decorators, { kind: \"field\", name: \"onEntryRemoved\", static: false, private: false, access: { has: obj => \"onEntryRemoved\" in obj, get: obj => obj.onEntryRemoved, set: (obj, value) => { obj.onEntryRemoved = value; } }, metadata: _metadata }, _onEntryRemoved_initializers, _onEntryRemoved_extraInitializers);\n            __esDecorate(null, null, _forceSelection_decorators, { kind: \"field\", name: \"forceSelection\", static: false, private: false, access: { has: obj => \"forceSelection\" in obj, get: obj => obj.forceSelection, set: (obj, value) => { obj.forceSelection = value; } }, metadata: _metadata }, _forceSelection_initializers, _forceSelection_extraInitializers);\n            __esDecorate(null, null, _selectedEntryClasses_decorators, { kind: \"field\", name: \"selectedEntryClasses\", static: false, private: false, access: { has: obj => \"selectedEntryClasses\" in obj, get: obj => obj.selectedEntryClasses, set: (obj, value) => { obj.selectedEntryClasses = value; } }, metadata: _metadata }, _selectedEntryClasses_initializers, _selectedEntryClasses_extraInitializers);\n            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = { defaultSelectedEntryClasses: \"selected\" };\n        _inputField = __runInitializers(this, _instanceExtraInitializers);\n        _entries = [];\n        _entriesData = new WeakMap();\n        parentObserver;\n        onSelectDelegate = new Delegate();\n        onEnabledDelegate = new Delegate();\n        /**\n         * The dropdown's entries.\n         */\n        get entries() {\n            return this._entries;\n        }\n        set entries(value) {\n            this.enableObserver(false);\n            const previouslySelectedValues = this.selectedValues;\n            this.clear();\n            this._entries = value;\n            if (value instanceof HTMLCollection && value.item(0))\n                this.parent = value.item(0).parentElement;\n            const array = this.entriesArray;\n            for (let i = 0; i < array.length; i++)\n                this.onEntryAdded?.call(this, array[i], i);\n            this.deselectAll();\n            for (let i = 0; i < array.length; i++) {\n                if (previouslySelectedValues.includes(this.getValue(array[i])))\n                    this.select(array[i]);\n            }\n            if (this.selectedEntries.length === 0)\n                this.initializeSelection();\n            this.refreshInputField();\n            this.enableObserver(true);\n        }\n        get entriesArray() {\n            const array = Array.isArray(this.entries) ? this.entries : Array.from(this.entries);\n            return (array ?? []).filter(entry => entry !== this.inputField);\n        }\n        /**\n         * @description The dropdown's values. Setting it will update the dropdown accordingly.\n         */\n        get values() {\n            return this.entriesArray.map(entry => this.getValue(entry));\n        }\n        set values(values) {\n            const entries = [];\n            values.forEach(value => {\n                const entry = this.createEntry(value);\n                if (entry instanceof Node && this.parent)\n                    $(this.parent).addChild(entry);\n                entries.push(entry);\n            });\n            this.entries = entries;\n        }\n        get selectedEntries() {\n            return this.entriesArray.filter(entry => this.getEntryData(entry).selected);\n        }\n        set selectedEntries(value) {\n            this.deselectAll();\n            if (!value)\n                return;\n            value.forEach(entry => this.select(entry));\n        }\n        set parent(value) {\n            if (!(this.parent instanceof Element))\n                return;\n            $(this.parent).addChild(this.entriesArray.filter(entry => entry instanceof Node));\n            if (this.inputField)\n                this.parent.appendChild(this.inputField);\n            this.setupParentObserver();\n        }\n        getValue = __runInitializers(this, _getValue_initializers, void 0);\n        getSecondaryValue = (__runInitializers(this, _getValue_extraInitializers), __runInitializers(this, _getSecondaryValue_initializers, void 0));\n        createEntry = (__runInitializers(this, _getSecondaryValue_extraInitializers), __runInitializers(this, _createEntry_initializers, void 0));\n        onEntryAdded = (__runInitializers(this, _createEntry_extraInitializers), __runInitializers(this, _onEntryAdded_initializers, void 0));\n        onEntryRemoved = (__runInitializers(this, _onEntryAdded_extraInitializers), __runInitializers(this, _onEntryRemoved_initializers, void 0));\n        /**\n         * The dropdown's underlying hidden input. Might be undefined.\n         */\n        get inputName() {\n            return this.inputField?.name;\n        }\n        set inputName(value) {\n            if (!this._inputField)\n                this._inputField = input({\n                    value: this.stringSelectedValue,\n                    type: \"hidden\",\n                    parent: this.parent ?? document.body\n                });\n            this.inputField.name = value;\n        }\n        get inputField() {\n            return this._inputField;\n        }\n        set multiSelection(value) {\n            this.forceSelection = !value;\n        }\n        forceSelection = (__runInitializers(this, _onEntryRemoved_extraInitializers), __runInitializers(this, _forceSelection_initializers, void 0));\n        set onSelect(value) {\n            if (value)\n                this.onSelectDelegate.add(value);\n        }\n        set onEnabled(value) {\n            if (value)\n                this.onEnabledDelegate.add(value);\n        }\n        selectedEntryClasses = (__runInitializers(this, _forceSelection_extraInitializers), __runInitializers(this, _selectedEntryClasses_initializers, void 0));\n        /**\n         * @description Dropdown constructor\n         * @param {TurboDropdownProperties} properties - Properties for configuring the dropdown.\n         */\n        constructor(properties = {}) {\n            super();\n            __runInitializers(this, _selectedEntryClasses_extraInitializers);\n            const selectedValues = properties.selectedValues || [];\n            properties.selectedValues = undefined;\n            if (!properties.onEnabled)\n                properties.onEnabled = (b, entry) => {\n                    if (!(entry instanceof HTMLElement))\n                        return;\n                    $(entry).setStyle(\"visibility\", b ? \"\" : \"hidden\");\n                };\n            for (const property of Object.keys(properties)) {\n                try {\n                    this[property] = properties[property];\n                }\n                catch { }\n            }\n            if (!this.forceSelection)\n                this.deselectAll();\n            this.entriesArray.forEach(entry => {\n                if (selectedValues.includes(this.getValue(entry))) {\n                    this.select(entry);\n                }\n            });\n        }\n        getEntryData(entry) {\n            if (!entry)\n                return {};\n            let data = this._entriesData.get(entry);\n            if (!data) {\n                data = { selected: false, enabled: true };\n                this._entriesData.set(entry, data);\n            }\n            return data;\n        }\n        clearEntryData(entry) {\n            this._entriesData.delete(entry);\n        }\n        addEntry(entry, index = this.entriesArray.length) {\n            if (index === undefined || typeof index !== \"number\" || index > this.entries.length)\n                index = this.entriesArray.length;\n            if (index < 0)\n                index = 0;\n            this.enableObserver(false);\n            this.onEntryAdded?.call(this, entry, index);\n            if (Array.isArray(this.entries) && !this.entries.includes(entry))\n                this.entries.splice(index, 0, entry);\n            if (entry instanceof Node && !entry.parentElement && this.parent)\n                $(this.parent).addChild(entry, index);\n            this.enableObserver(true);\n            requestAnimationFrame(() => this.select(this.selectedEntry));\n        }\n        getEntryFromSecondaryValue(value) {\n            return this.entriesArray.find((entry) => this.getSecondaryValue(entry) === value);\n        }\n        isSelected(entry) {\n            return this.selectedEntries.includes(entry);\n        }\n        getEntry(value) {\n            let entry;\n            try {\n                const fromValue = this.find(value);\n                if (fromValue)\n                    entry = fromValue;\n                else {\n                    const isEntry = this.entriesArray.find(entry => entry === value);\n                    if (isEntry)\n                        entry = isEntry;\n                }\n            }\n            catch { }\n            return entry;\n        }\n        /**\n         * @description Select an entry.\n         * @param {string | EntryType} value - The DropdownEntry (or its string value) to select.\n         * @param selected\n         * @return {TurboSelect} - This Dropdown for chaining.\n         */\n        select(value, selected = true) {\n            if (isNull(value) || isUndefined(value))\n                return this;\n            let entry;\n            try {\n                const fromValue = this.getEntry(value);\n                if (fromValue)\n                    entry = fromValue;\n                else {\n                    const isEntry = this.entriesArray.find(entry => entry === value);\n                    if (isEntry)\n                        entry = isEntry;\n                }\n            }\n            catch { }\n            if (!entry)\n                return this;\n            const wasSelected = this.isSelected(entry);\n            if (selected === wasSelected)\n                return this;\n            if (!selected && wasSelected && this.selectedEntries.length <= 1 && this.forceSelection)\n                return this;\n            if (!this.multiSelection)\n                this.deselectAll();\n            this.getEntryData(entry).selected = selected;\n            if (entry instanceof HTMLElement)\n                $(entry).toggleClass(this.selectedEntryClasses, selected);\n            this.initializeSelection();\n            this.refreshInputField();\n            this.onSelectDelegate.fire(selected, entry, this.getIndex(entry));\n            (this.parent ?? document).dispatchEvent(new TurboSelectInputEvent({\n                toggledEntry: entry,\n                values: this.selectedValues\n            }));\n            return this;\n        }\n        /**\n         * @description Select an entry.\n         * @param {number} index - The index of the entry to select\n         * @param {(index: number, entriesCount: number, zero?: number) => number} [preprocess=trim] - Callback to execute\n         * on the index to preprocess it. Defaults to trim().\n         * @return {TurboSelect} - This Dropdown for chaining.\n         */\n        selectByIndex(index, preprocess = trim) {\n            index = preprocess(index, this.entries.length - 1, 0);\n            return this.select(this.entriesArray[index]);\n        }\n        getIndex(entry) {\n            return this.entriesArray.indexOf(entry);\n        }\n        deselectAll() {\n            this.selectedEntries.forEach(entry => {\n                if (entry instanceof HTMLElement)\n                    $(entry).toggleClass(this.selectedEntryClasses, false);\n                this.getEntryData(entry).selected = false;\n            });\n            this.refreshInputField();\n        }\n        reset() {\n            this.deselectAll();\n            // todo this.onEntryClick(this.enabledEntries[0]);\n        }\n        get enabledEntries() {\n            return this.entriesArray.filter(entry => this.getEntryData(entry).enabled);\n        }\n        get enabledValues() {\n            return this.enabledEntries.map(entry => this.getValue(entry));\n        }\n        get enabledSecondaryValues() {\n            return this.enabledEntries.map(entry => this.getSecondaryValue(entry));\n        }\n        find(value) {\n            return this.entriesArray.find((entry) => this.getValue(entry) === value);\n        }\n        findBySecondaryValue(value) {\n            return this.entriesArray.find((entry) => this.getSecondaryValue(entry) === value);\n        }\n        findAll(...values) {\n            return this.entriesArray.filter(entry => values.includes(this.getValue(entry)));\n        }\n        findAllBySecondaryValue(...values) {\n            return this.entriesArray.filter((entry) => values.includes(this.getSecondaryValue(entry)));\n        }\n        enable(b, ...entries) {\n            if (!entries || entries.length === 0)\n                entries = this.entriesArray;\n            entries.forEach(value => {\n                const entry = this.getEntry(value);\n                if (!entry)\n                    return;\n                this.getEntryData(entry).enabled = b;\n                this.onEnabledDelegate.fire(b, entry, this.getIndex(entry));\n            });\n        }\n        /**\n         * @description The dropdown's currently selected entries\n         */\n        get selectedEntry() {\n            return this.selectedEntries[0];\n        }\n        /**\n         * @description The dropdown's currently selected values\n         */\n        get selectedValues() {\n            return this.selectedEntries.map(entry => this.getValue(entry));\n        }\n        get selectedValue() {\n            const selectedEntry = this.selectedEntry;\n            if (!selectedEntry)\n                return;\n            return this.getValue(selectedEntry);\n        }\n        get selectedSecondaryValues() {\n            return this.selectedEntries.map(entry => this.getSecondaryValue(entry));\n        }\n        get selectedSecondaryValue() {\n            const selectedEntry = this.selectedEntry;\n            if (!selectedEntry)\n                return;\n            return this.getSecondaryValue(selectedEntry);\n        }\n        get stringSelectedValue() {\n            return this.selectedEntries.map(entry => stringify(this.getValue(entry))).join(\", \");\n        }\n        clear() {\n            this.enableObserver(false);\n            for (const entry of this.entriesArray) {\n                this.clearEntryData(entry);\n                this.onEntryRemoved(entry);\n                if (this.parent && entry instanceof HTMLElement)\n                    entry.remove();\n            }\n            this._entries = [];\n            this.refreshInputField();\n            this.enableObserver(true);\n        }\n        refreshInputField() {\n            if (this.inputField)\n                this.inputField.value = this.stringSelectedValue;\n        }\n        destroy() {\n            this.enableObserver(false);\n            this.parentObserver = null;\n            return this;\n        }\n        enableObserver(value) {\n            if (!value)\n                return this.parentObserver?.disconnect();\n            if (this.parent instanceof Element && this.parentObserver)\n                this.parentObserver.observe(this.parent, { childList: true });\n        }\n        initializeSelection() {\n            if (this.forceSelection && this.enabledEntries.length && this.selectedEntries.length === 0) {\n                const fallback = this.enabledEntries[0];\n                if (fallback)\n                    this.select(fallback);\n            }\n        }\n        setupParentObserver() {\n            this.enableObserver(false);\n            this.parentObserver = new MutationObserver(records => {\n                for (const record of records) {\n                    for (const node of record.addedNodes) {\n                        if (node.nodeType !== Node.ELEMENT_NODE || node.parentElement !== this.parent)\n                            continue;\n                        if (node === this.inputField)\n                            continue;\n                        this.onEntryAdded?.call(this, node, this.getIndex(node));\n                    }\n                    for (const node of record.removedNodes) {\n                        if (node.nodeType !== Node.ELEMENT_NODE)\n                            continue;\n                        if (node === this.inputField)\n                            continue;\n                        queueMicrotask(() => {\n                            if (node.isConnected)\n                                return;\n                            const data = this.getEntryData(node);\n                            if (data.selected && this.forceSelection && this.enabledEntries.length) {\n                                const fallback = this.enabledEntries[0];\n                                if (fallback)\n                                    this.select(fallback);\n                            }\n                            data.selected = false;\n                            this.onEntryRemoved?.call(this, node);\n                            this.clearEntryData(node);\n                        });\n                    }\n                }\n            });\n            this.enableObserver(true);\n        }\n    };\n})();\n\nvar css_248z$2 = \".turbo-drawer{align-items:center;direction:ltr;display:inline-flex}.turbo-drawer-panel-container{overflow:hidden}.turbo-drawer.top-drawer{flex-direction:column}.turbo-drawer.bottom-drawer{flex-direction:column-reverse}.turbo-drawer.left-drawer{flex-direction:row}.turbo-drawer.right-drawer{flex-direction:row-reverse}.turbo-drawer>div:first-child{display:inline-block;position:relative}.turbo-drawer>div:nth-child(2){align-items:center;display:flex;position:relative}\";\nstyleInject(css_248z$2);\n\n//@ts-nocheck\n/**\n * @class Reifect\n * @description A class to manage and apply dynamic properties, styles, classes, and transitions to a\n * set of objects.\n *\n * @template {object} ClassType - The object type this reifier will be applied to.\n */\nclass Reifect extends StatefulReifect {\n    /**\n     * @description Creates an instance of StatefulReifier.\n     * @param {StatelessReifectProperties<ClassType>} properties - The configuration properties.\n     */\n    constructor(properties) {\n        properties.states = [\"\"];\n        super(properties);\n    }\n    /**\n     * @description The properties to be assigned to the objects. It could take:\n     * - A record of `{key: value}` pairs.\n     * - An interpolation function that would return a record of `{key: value}` pairs.\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get properties() {\n        const properties = super.properties;\n        if (typeof properties == \"object\" && \"\" in properties)\n            return properties[\"\"];\n        else\n            return properties;\n    }\n    set properties(value) {\n        super.properties = value;\n    }\n    /**\n     * @description The styles to be assigned to the objects (only if they are eligible elements). It could take:\n     * - A record of `{CSS property: value}` pairs.\n     * - An interpolation function that would return a record of `{key: value}` pairs.\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get styles() {\n        const styles = super.styles;\n        if (typeof styles == \"object\" && \"\" in styles)\n            return styles[\"\"];\n        else\n            return styles;\n    }\n    set styles(value) {\n        super.styles = value;\n    }\n    /**\n     * @description The classes to be assigned to the objects (only if they are eligible elements). It could take:\n     * - A string of space-separated classes.\n     * - An array of classes.\n     * - An interpolation function that would return a string of space-separated classes or an array of classes.\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get classes() {\n        const classes = super.classes;\n        if (typeof classes == \"object\" && \"\" in classes)\n            return classes[\"\"];\n        else\n            return classes;\n    }\n    set classes(value) {\n        super.classes = value;\n    }\n    /**\n     * @description The object that should replace (in the DOM as well if eligible) the attached objects. It could take:\n     * - The object to be replaced with.\n     * - An interpolation function that would return the object to be replaced with.\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get replaceWith() {\n        const replaceWith = super.replaceWith;\n        if (typeof replaceWith == \"object\" && \"\" in replaceWith)\n            return replaceWith[\"\"];\n        else\n            return replaceWith;\n    }\n    set replaceWith(value) {\n        super.replaceWith = value;\n    }\n    set transition(value) {\n        super.transition = value;\n    }\n    /**\n     * @description The property(ies) to apply a CSS transition on, on the attached objects. Defaults to \"all\". It\n     * could take:\n     * - A string of space-separated CSS properties.\n     * - An array of CSS properties.\n     * - An interpolation function that would return a string of space-separated CSS properties or an array of\n     * CSS properties.\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get transitionProperties() {\n        const transitionProperties = super.transitionProperties;\n        if (typeof transitionProperties == \"object\" && \"\" in transitionProperties)\n            return transitionProperties[\"\"];\n        else\n            return transitionProperties;\n    }\n    set transitionProperties(value) {\n        super.transitionProperties = value;\n    }\n    /**\n     * @description The duration of the CSS transition to apply on the attached objects. Defaults to 0. It could take:\n     * - A numerical value (in seconds).\n     * - An interpolation function that would return a duration (number in seconds).\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get transitionDuration() {\n        const transitionDuration = super.transitionDuration;\n        if (typeof transitionDuration == \"object\" && \"\" in transitionDuration)\n            return transitionDuration[\"\"];\n        else\n            return transitionDuration;\n    }\n    set transitionDuration(value) {\n        super.transitionDuration = value;\n    }\n    /**\n     * @description The timing function of the CSS transition to apply on the attached objects. Defaults to \"linear.\"\n     * It could take:\n     * - A string representing the timing function to apply.\n     * - An interpolation function that would return a timing function (string).\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get transitionTimingFunction() {\n        const transitionTimingFunction = super.transitionTimingFunction;\n        if (typeof transitionTimingFunction == \"object\" && \"\" in transitionTimingFunction)\n            return transitionTimingFunction[\"\"];\n        else\n            return transitionTimingFunction;\n    }\n    set transitionTimingFunction(value) {\n        super.transitionTimingFunction = value;\n    }\n    /**\n     * @description The delay of the CSS transition to apply on the attached objects. Defaults to 0. It could take:\n     * - A numerical value (in seconds).\n     * - An interpolation function that would return a delay (number in seconds).\n     *\n     * The interpolation function would take as arguments:\n     * - `index: number`: the index of the object in the applied list.\n     * - `total: number`: the total number of objects in the applied list.\n     * - `object: ClassType`: the object itself.\n     */\n    get transitionDelay() {\n        const transitionDelay = super.transitionDelay;\n        if (typeof transitionDelay == \"object\" && \"\" in transitionDelay)\n            return transitionDelay[\"\"];\n        else\n            return transitionDelay;\n    }\n    set transitionDelay(value) {\n        super.transitionDelay = value;\n    }\n    initialize(objects, options) {\n        super.initialize(\"\", objects, options);\n    }\n    apply(objects, options) {\n        super.apply(\"\", objects, options);\n    }\n}\nfunction reifect(properties) {\n    return new Reifect(properties);\n}\n\n//TODO TRY TO SEE IF HIDDEN OVERFLOW ELEMENT CAN CONTAIN ELEMENT THAT OVERFLOWS PAST PARENT\nlet TurboDrawer = (() => {\n    let _classDecorators = [define(\"turbo-drawer\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _set_thumb_decorators;\n    let _set_panel_decorators;\n    let _set_icon_decorators;\n    let _set_hideOverflow_decorators;\n    let _set_attachSideToIconName_decorators;\n    let _set_rotateIconBasedOnSide_decorators;\n    let _set_side_decorators;\n    let _set_offset_decorators;\n    let _set_open_decorators;\n    let _set_translation_decorators;\n    let _transition_decorators;\n    let _transition_initializers = [];\n    let _transition_extraInitializers = [];\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_thumb_decorators = [auto({\n                    setIfUndefined: true,\n                    callBefore: function () { if (this.thumb)\n                        $(this).remChild(this.thumb); },\n                    preprocessValue: (value) => value instanceof HTMLElement ? value : div(value)\n                })];\n            _set_panel_decorators = [auto({\n                    setIfUndefined: true,\n                    callBefore: function () { if (this.panel)\n                        $(this).remChild(this.panel); },\n                    preprocessValue: (value) => value instanceof HTMLElement ? value : div(value)\n                })];\n            _set_icon_decorators = [auto({\n                    callBefore: function () { if (this.icon?.parentElement === this.thumb)\n                        this.thumb.removeChild(this.icon); },\n                    preprocessValue: function (value) {\n                        if (value instanceof Element)\n                            return value;\n                        if (typeof value === \"string\" && !this.attachSideToIconName && !this.rotateIconBasedOnSide)\n                            this.attachSideToIconName = true;\n                        return iconSwitch(typeof value === \"object\" ? value : {\n                            icon: value,\n                            switchReifect: { states: Object.values(Side) },\n                            defaultState: this.open ? this.getOppositeSide() : this.side,\n                            appendStateToIconName: this.attachSideToIconName,\n                        });\n                    }\n                })];\n            _set_hideOverflow_decorators = [auto({ defaultValue: false })];\n            _set_attachSideToIconName_decorators = [auto({ defaultValue: false })];\n            _set_rotateIconBasedOnSide_decorators = [auto({ defaultValue: false })];\n            _set_side_decorators = [auto({ defaultValue: Side.bottom, cancelIfUnchanged: false })];\n            _set_offset_decorators = [auto({\n                    defaultValue: { open: 0, closed: 0 },\n                    preprocessValue: (value) => typeof value === \"number\" ? { open: value, closed: value } : {\n                        open: value?.open || 0,\n                        closed: value?.closed || 0\n                    }\n                })];\n            _set_open_decorators = [auto({ defaultValue: false })];\n            _set_translation_decorators = [auto()];\n            _transition_decorators = [auto({\n                    defaultValueCallback: function () {\n                        return new Reifect({\n                            transitionProperties: [\"transform\", this.isVertical ? \"height\" : \"width\"],\n                            transitionDuration: 0.2,\n                            transitionTimingFunction: \"ease-out\",\n                        });\n                    },\n                    callAfter: function () { this.transition.attachAll(this, this.panelContainer); },\n                })];\n            __esDecorate(this, null, _set_thumb_decorators, { kind: \"setter\", name: \"thumb\", static: false, private: false, access: { has: obj => \"thumb\" in obj, set: (obj, value) => { obj.thumb = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_panel_decorators, { kind: \"setter\", name: \"panel\", static: false, private: false, access: { has: obj => \"panel\" in obj, set: (obj, value) => { obj.panel = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_icon_decorators, { kind: \"setter\", name: \"icon\", static: false, private: false, access: { has: obj => \"icon\" in obj, set: (obj, value) => { obj.icon = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_hideOverflow_decorators, { kind: \"setter\", name: \"hideOverflow\", static: false, private: false, access: { has: obj => \"hideOverflow\" in obj, set: (obj, value) => { obj.hideOverflow = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_attachSideToIconName_decorators, { kind: \"setter\", name: \"attachSideToIconName\", static: false, private: false, access: { has: obj => \"attachSideToIconName\" in obj, set: (obj, value) => { obj.attachSideToIconName = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_rotateIconBasedOnSide_decorators, { kind: \"setter\", name: \"rotateIconBasedOnSide\", static: false, private: false, access: { has: obj => \"rotateIconBasedOnSide\" in obj, set: (obj, value) => { obj.rotateIconBasedOnSide = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_side_decorators, { kind: \"setter\", name: \"side\", static: false, private: false, access: { has: obj => \"side\" in obj, set: (obj, value) => { obj.side = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_offset_decorators, { kind: \"setter\", name: \"offset\", static: false, private: false, access: { has: obj => \"offset\" in obj, set: (obj, value) => { obj.offset = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_open_decorators, { kind: \"setter\", name: \"open\", static: false, private: false, access: { has: obj => \"open\" in obj, set: (obj, value) => { obj.open = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_translation_decorators, { kind: \"setter\", name: \"translation\", static: false, private: false, access: { has: obj => \"translation\" in obj, set: (obj, value) => { obj.translation = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _transition_decorators, { kind: \"field\", name: \"transition\", static: false, private: false, access: { has: obj => \"transition\" in obj, get: obj => obj.transition, set: (obj, value) => { obj.transition = value; } }, metadata: _metadata }, _transition_initializers, _transition_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        _panelContainer = __runInitializers(this, _instanceExtraInitializers);\n        get panelContainer() { return this._panelContainer; }\n        dragging = false;\n        animationOn = false;\n        resizeObserver;\n        set thumb(value) {\n            $(value).addClass(\"turbo-drawer-thumb\");\n            if (this.initialized)\n                this.setupUILayout();\n        }\n        get thumb() { return; }\n        set panel(value) {\n            $(value).addClass(\"turbo-drawer-panel\");\n            if (this.initialized)\n                this.setupUILayout();\n        }\n        get panel() { return; }\n        set icon(_value) {\n            if (this.initialized)\n                this.setupUILayout();\n        }\n        get icon() { return; }\n        set hideOverflow(value) {\n            $(this.panelContainer).setStyle(\"overflow\", value ? \"hidden\" : \"\");\n        }\n        set attachSideToIconName(value) {\n            if (this.icon instanceof TurboIconSwitch)\n                this.icon.appendStateToIconName = value;\n            if (value)\n                this.rotateIconBasedOnSide = false;\n        }\n        set rotateIconBasedOnSide(value) {\n            if (value)\n                this.attachSideToIconName = false;\n            if (this.icon instanceof TurboIconSwitch)\n                this.icon.switchReifect.styles = {\n                    top: \"transform: rotate(180deg)\",\n                    bottom: \"transform: rotate(0deg)\",\n                    left: \"transform: rotate(90deg)\",\n                    right: \"transform: rotate(270deg)\",\n                };\n        }\n        set side(value) {\n            $(this).toggleClass(\"top-drawer\", value == Side.top);\n            $(this).toggleClass(\"bottom-drawer\", value == Side.bottom);\n            $(this).toggleClass(\"left-drawer\", value == Side.left);\n            $(this).toggleClass(\"right-drawer\", value == Side.right);\n            this.refresh();\n        }\n        set offset(value) { }\n        get offset() { return; }\n        get isVertical() {\n            return this.side == Side.top || this.side == Side.bottom;\n        }\n        set open(value) {\n            if (value)\n                this.resizeObserver.observe(this.panel, { box: \"border-box\" });\n            else\n                this.resizeObserver.unobserve(this.panel);\n            this.refresh();\n        }\n        set translation(value) {\n            switch (this.side) {\n                case Side.top:\n                    if (this.hideOverflow)\n                        $(this.panelContainer).setStyle(\"height\", value + \"px\");\n                    else\n                        $(this).setStyle(\"transform\", `translateY(${-value}px)`);\n                    break;\n                case Side.bottom:\n                    if (this.hideOverflow)\n                        $(this.panelContainer).setStyle(\"height\", value + \"px\");\n                    else\n                        $(this).setStyle(\"transform\", `translateY(${-value}px)`);\n                    break;\n                case Side.left:\n                    if (this.hideOverflow)\n                        $(this.panelContainer).setStyle(\"width\", value + \"px\");\n                    else\n                        $(this).setStyle(\"transform\", `translateX(${-value}px)`);\n                    break;\n                case Side.right:\n                    if (this.hideOverflow)\n                        $(this.panelContainer).setStyle(\"width\", value + \"px\");\n                    else\n                        $(this).setStyle(\"transform\", `translateX(${-value}px)`);\n                    break;\n            }\n        }\n        transition = __runInitializers(this, _transition_initializers, void 0);\n        get translation() { return; }\n        initialize() {\n            super.initialize();\n            this.transition.attachAll(this, this.panelContainer);\n            let pending = false;\n            this.resizeObserver = new ResizeObserver(entries => {\n                if (!this.open || this.dragging)\n                    return;\n                if (pending)\n                    return;\n                pending = true;\n                requestAnimationFrame(() => {\n                    const size = Array.isArray(entries[0].borderBoxSize)\n                        ? entries[0].borderBoxSize[0] : entries[0].borderBoxSize;\n                    this.translation = (this.open ? this.offset.open : this.offset.closed)\n                        + (this.isVertical ? size.blockSize : size.inlineSize);\n                    pending = false;\n                });\n            });\n            this.animationOn = true;\n        }\n        setupUIElements() {\n            super.setupUIElements();\n            this._panelContainer = div({ classes: \"turbo-drawer-panel-container\" });\n        }\n        setupUILayout() {\n            super.setupUILayout();\n            console.log(this);\n            console.log(this.panel);\n            $(this).childHandler = this;\n            $(this.panel).addChild($(this).childrenArray.filter(el => el !== this.panelContainer));\n            $(this).addChild([this.thumb, this.panelContainer]);\n            $(this.panelContainer).addChild(this.panel);\n            $(this.thumb).addChild(this.icon);\n            $(this).childHandler = this.panel;\n        }\n        setupUIListeners() {\n            this.thumb.addEventListener(DefaultEventName.click, (e) => {\n                e.stopImmediatePropagation();\n                this.open = !this.open;\n            });\n            this.thumb.addEventListener(TurboEventName.dragStart, (e) => {\n                e.stopImmediatePropagation();\n                this.dragging = true;\n                if (this.animationOn)\n                    this.transition.enabled = false;\n            });\n            this.thumb.addEventListener(TurboEventName.drag, (e) => {\n                if (!this.dragging)\n                    return;\n                e.stopImmediatePropagation();\n                this.translation += this.isVertical ? e.scaledDeltaPosition.y : e.scaledDeltaPosition.x;\n            });\n            this.thumb.addEventListener(TurboEventName.dragEnd, (e) => {\n                if (!this.dragging)\n                    return;\n                e.stopImmediatePropagation();\n                this.dragging = false;\n                const delta = e.positions.first.sub(e.origins.first);\n                switch (this.side) {\n                    case Side.top:\n                        if (this.open && delta.y > 100)\n                            this.open = false;\n                        else if (!this.open && delta.y < -100)\n                            this.open = true;\n                        break;\n                    case Side.bottom:\n                        if (this.open && delta.y < -100)\n                            this.open = false;\n                        else if (!this.open && delta.y > 100)\n                            this.open = true;\n                        break;\n                    case Side.left:\n                        if (this.open && delta.x > 100)\n                            this.open = false;\n                        else if (!this.open && delta.x < -100)\n                            this.open = true;\n                        break;\n                    case Side.right:\n                        if (this.open && delta.x < -100)\n                            this.open = false;\n                        else if (!this.open && delta.x > 100)\n                            this.open = true;\n                        break;\n                }\n                this.refresh();\n            });\n        }\n        getOppositeSide(side = this.side) {\n            switch (side) {\n                case Side.top:\n                    return Side.bottom;\n                case Side.bottom:\n                    return Side.top;\n                case Side.left:\n                    return Side.right;\n                case Side.right:\n                    return Side.left;\n            }\n        }\n        getAdjacentSide(side = this.side) {\n            switch (side) {\n                case Side.top:\n                    return Side.right;\n                case Side.bottom:\n                    return Side.left;\n                case Side.left:\n                    return Side.top;\n                case Side.right:\n                    return Side.bottom;\n            }\n        }\n        refresh() {\n            if (this.animationOn) {\n                this.transition.enabled = true;\n                this.transition.apply();\n            }\n            if (this.hideOverflow)\n                $(this.panel).setStyle(\"position\", \"absolute\", true);\n            if (this.icon instanceof TurboIconSwitch)\n                this.icon.switchReifect.apply(this.open ? this.getOppositeSide() : this.side);\n            requestAnimationFrame(() => {\n                this.translation = (this.open ? this.offset.open : this.offset.closed)\n                    + (this.open ? (this.isVertical ? this.panel.offsetHeight : this.panel.offsetWidth) : 0);\n                if (this.hideOverflow)\n                    $(this.panel).setStyle(\"position\", \"relative\", true);\n            });\n        }\n        constructor() {\n            super(...arguments);\n            __runInitializers(this, _transition_extraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction drawer(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-drawer\";\n    return element({ ...properties, text: undefined });\n}\n\nvar PopupFallbackMode;\n(function (PopupFallbackMode) {\n    PopupFallbackMode[\"invert\"] = \"invert\";\n    PopupFallbackMode[\"offset\"] = \"offset\";\n    PopupFallbackMode[\"none\"] = \"none\";\n})(PopupFallbackMode || (PopupFallbackMode = {}));\n\nvar css_248z$1 = \"#turbo-popup-parent-element{display:block;left:0;position:fixed;top:0;z-index:1000}.turbo-popup{display:block;inset:auto;overflow:auto;position:fixed}\";\nstyleInject(css_248z$1);\n\nlet TurboPopup = (() => {\n    let _classDecorators = [define(\"turbo-popup\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _static_parentElement_decorators;\n    let _static_parentElement_initializers = [];\n    let _static_parentElement_extraInitializers = [];\n    let _anchor_decorators;\n    let _anchor_initializers = [];\n    let _anchor_extraInitializers = [];\n    let _set_popupPosition_decorators;\n    let _set_anchorPosition_decorators;\n    let _set_viewportMargin_decorators;\n    let _set_offsetFromAnchor_decorators;\n    let _set_fallbackModes_decorators;\n    let _get_rect_decorators;\n    let _get_anchorRect_decorators;\n    let _get_computedStyle_decorators;\n    let _get_anchorComputedStyle_decorators;\n    let _get_computedMargins_decorators;\n    var TurboPopup = class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _static_parentElement_decorators = [auto({ defaultValue: div({ parent: document.body, id: \"turbo-popup-parent-element\" }) })];\n            _anchor_decorators = [auto({ defaultValue: document.body })];\n            _set_popupPosition_decorators = [auto({\n                    initialValueCallback: function () {\n                        return this.getPropertiesValue(undefined, \"defaultPopupAnchor\", { x: 50, y: 0 });\n                    },\n                    preprocessValue: (value) => new Point(value).bound(0, 100)\n                })];\n            _set_anchorPosition_decorators = [auto({\n                    initialValueCallback: function () {\n                        return this.getPropertiesValue(undefined, \"defaultAnchorPosition\", { x: 50, y: 100 });\n                    },\n                    preprocessValue: (value) => new Point(value).bound(0, 100)\n                })];\n            _set_viewportMargin_decorators = [auto({\n                    initialValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultViewportMargin\", 0); },\n                    preprocessValue: (value) => new Point(value)\n                })];\n            _set_offsetFromAnchor_decorators = [auto({\n                    initialValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultOffsetFromAnchor\", 0); },\n                    preprocessValue: (value) => new Point(value)\n                })];\n            _set_fallbackModes_decorators = [auto({\n                    preprocessValue: (value) => {\n                        return typeof value !== \"object\" ? { x: value, y: value } : value;\n                    },\n                    initialValueCallback: function () {\n                        return {\n                            x: Math.abs(this.anchorPosition.x - 50) > 25 ? PopupFallbackMode.invert : PopupFallbackMode.offset,\n                            y: Math.abs(this.anchorPosition.y - 50) > 25 ? PopupFallbackMode.invert : PopupFallbackMode.offset,\n                        };\n                    }\n                })];\n            _get_rect_decorators = [cache({ clearOnNextFrame: true })];\n            _get_anchorRect_decorators = [cache({ clearOnNextFrame: true })];\n            _get_computedStyle_decorators = [cache({ clearOnNextFrame: true })];\n            _get_anchorComputedStyle_decorators = [cache({ clearOnNextFrame: true })];\n            _get_computedMargins_decorators = [cache({ clearOnNextFrame: true })];\n            __esDecorate(this, null, _set_popupPosition_decorators, { kind: \"setter\", name: \"popupPosition\", static: false, private: false, access: { has: obj => \"popupPosition\" in obj, set: (obj, value) => { obj.popupPosition = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_anchorPosition_decorators, { kind: \"setter\", name: \"anchorPosition\", static: false, private: false, access: { has: obj => \"anchorPosition\" in obj, set: (obj, value) => { obj.anchorPosition = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_viewportMargin_decorators, { kind: \"setter\", name: \"viewportMargin\", static: false, private: false, access: { has: obj => \"viewportMargin\" in obj, set: (obj, value) => { obj.viewportMargin = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_offsetFromAnchor_decorators, { kind: \"setter\", name: \"offsetFromAnchor\", static: false, private: false, access: { has: obj => \"offsetFromAnchor\" in obj, set: (obj, value) => { obj.offsetFromAnchor = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_fallbackModes_decorators, { kind: \"setter\", name: \"fallbackModes\", static: false, private: false, access: { has: obj => \"fallbackModes\" in obj, set: (obj, value) => { obj.fallbackModes = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_rect_decorators, { kind: \"getter\", name: \"rect\", static: false, private: false, access: { has: obj => \"rect\" in obj, get: obj => obj.rect }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_anchorRect_decorators, { kind: \"getter\", name: \"anchorRect\", static: false, private: false, access: { has: obj => \"anchorRect\" in obj, get: obj => obj.anchorRect }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_computedStyle_decorators, { kind: \"getter\", name: \"computedStyle\", static: false, private: false, access: { has: obj => \"computedStyle\" in obj, get: obj => obj.computedStyle }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_anchorComputedStyle_decorators, { kind: \"getter\", name: \"anchorComputedStyle\", static: false, private: false, access: { has: obj => \"anchorComputedStyle\" in obj, get: obj => obj.anchorComputedStyle }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _get_computedMargins_decorators, { kind: \"getter\", name: \"computedMargins\", static: false, private: false, access: { has: obj => \"computedMargins\" in obj, get: obj => obj.computedMargins }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _static_parentElement_decorators, { kind: \"field\", name: \"parentElement\", static: true, private: false, access: { has: obj => \"parentElement\" in obj, get: obj => obj.parentElement, set: (obj, value) => { obj.parentElement = value; } }, metadata: _metadata }, _static_parentElement_initializers, _static_parentElement_extraInitializers);\n            __esDecorate(null, null, _anchor_decorators, { kind: \"field\", name: \"anchor\", static: false, private: false, access: { has: obj => \"anchor\" in obj, get: obj => obj.anchor, set: (obj, value) => { obj.anchor = value; } }, metadata: _metadata }, _anchor_initializers, _anchor_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            TurboPopup = _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        static config = {\n            ...TurboElement.config,\n            defaultPopupPosition: { x: 0, y: -100 },\n            defaultAnchorPosition: { x: 0, y: 100 },\n            defaultViewportMargin: 4,\n            defaultOffsetFromAnchor: { x: 0, y: 4 }\n        };\n        static parentElement = __runInitializers(_classThis, _static_parentElement_initializers, void 0);\n        anchor = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _anchor_initializers, void 0));\n        set popupPosition(value) { }\n        get popupPosition() { return; }\n        set anchorPosition(value) { }\n        get anchorPosition() { return; }\n        set viewportMargin(value) { }\n        get viewportMargin() { return; }\n        set offsetFromAnchor(value) { }\n        get offsetFromAnchor() { return; }\n        set fallbackModes(value) { }\n        get fallbackModes() { return; }\n        get rect() {\n            return this.getBoundingClientRect();\n        }\n        get anchorRect() {\n            return this.anchor.getBoundingClientRect();\n        }\n        get computedStyle() {\n            return window.getComputedStyle(this);\n        }\n        get anchorComputedStyle() {\n            return window.getComputedStyle(this.anchor);\n        }\n        get computedMargins() {\n            return {\n                x: parseFloat(this.computedStyle.marginLeft) + parseFloat(this.computedStyle.marginRight),\n                y: parseFloat(this.computedStyle.marginTop) + parseFloat(this.computedStyle.marginBottom)\n            };\n        }\n        initialize() {\n            super.initialize();\n            this.show(false);\n            if (!this.parentElement)\n                $(this).addToParent(TurboPopup.parentElement);\n        }\n        setupUIListeners() {\n            super.setupUIListeners();\n            document.addEventListener(DefaultEventName.scroll, () => this.show(false), { capture: true, passive: true });\n            window.addEventListener(DefaultEventName.resize, () => { if ($(this).isShown)\n                this.recomputePosition(); }, { passive: true });\n            $(document).on(DefaultEventName.click, e => {\n                if (!$(this).isShown)\n                    return;\n                const t = e.target;\n                if (this.contains(t))\n                    return;\n                if (this.anchor instanceof Node && this.anchor.contains(t))\n                    return;\n                this.show(false);\n                return true;\n            });\n        }\n        recomputePosition() {\n            if (!this.anchor)\n                return;\n            $(this).setStyles({ maxHeight: \"\", maxWidth: \"\" }, true);\n            const left = this.computeAxis(Direction.horizontal);\n            const top = this.computeAxis(Direction.vertical);\n            $(this).setStyles({ left: `${left}px`, top: `${top}px` });\n            const maxWidth = Math.max(0, Math.min(window.innerWidth - 2 * this.viewportMargin.x, window.innerWidth - 2 * this.viewportMargin.x - this.computedMargins.x));\n            const maxHeight = Math.max(0, Math.min(window.innerHeight - 2 * this.viewportMargin.y, window.innerHeight - 2 * this.viewportMargin.y - this.computedMargins.y));\n            $(this).setStyle(\"maxWidth\", `${maxWidth}px`);\n            $(this).setStyle(\"maxHeight\", `${maxHeight}px`);\n        }\n        computeAxis(direction) {\n            const axis = direction === Direction.horizontal ? \"x\" : \"y\";\n            const sizeAxis = direction === Direction.horizontal ? \"width\" : \"height\";\n            const viewportSize = direction === Direction.horizontal ? window.innerWidth : window.innerHeight;\n            const parentStart = this.anchorRect[direction === Direction.horizontal ? \"left\" : \"top\"];\n            const popupSize = this.rect[sizeAxis] + this.computedMargins[axis];\n            const min = this.viewportMargin[axis];\n            const max = viewportSize - this.viewportMargin[axis] - popupSize;\n            const base = parentStart + (this.anchorRect[sizeAxis] * this.anchorPosition[axis] / 100)\n                - (popupSize * this.popupPosition[axis] / 100) + this.offsetFromAnchor[axis];\n            const fitsBase = base >= min && base <= max;\n            if (fitsBase || this.fallbackModes[axis] === PopupFallbackMode.offset) {\n                return Math.min(Math.max(base, min), max);\n            }\n            const flipped = parentStart + this.anchorRect[sizeAxis] * (1 - this.anchorPosition[axis] / 100)\n                - popupSize * (1 - this.popupPosition[axis] / 100) - this.offsetFromAnchor[axis];\n            const fitsFlip = flipped >= min && flipped <= max;\n            let finalOffset;\n            if (fitsFlip)\n                finalOffset = flipped;\n            else if (fitsBase)\n                finalOffset = base;\n            else {\n                const pick = Math.abs(base - Math.min(Math.max(base, min), max)) <=\n                    Math.abs(flipped - Math.min(Math.max(flipped, min), max)) ? base : flipped;\n                finalOffset = Math.min(Math.max(pick, min), max);\n            }\n            return finalOffset;\n        }\n        show(b) {\n            const sel = $(this);\n            if (sel.isShown === b)\n                return this;\n            if (b) {\n                this.style.visibility = \"hidden\";\n                this.style.display = \"\";\n                this.recomputePosition();\n                this.style.visibility = \"\";\n                sel.show(true);\n            }\n            else {\n                $(this).setStyles({ maxHeight: \"\", maxWidth: \"\" }, true);\n                sel.show(false);\n            }\n            return this;\n        }\n        constructor() {\n            super(...arguments);\n            __runInitializers(this, _anchor_extraInitializers);\n        }\n        static {\n            __runInitializers(_classThis, _static_parentElement_extraInitializers);\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    };\n    return TurboPopup = _classThis;\n})();\nfunction popup(properties = {}) {\n    return element({ ...properties, text: undefined, tag: \"turbo-popup\" });\n}\n\nvar css_248z = \"turbo-dropdown{display:inline-block;position:relative}turbo-dropdown>.turbo-popup{background-color:#fff;border:.1em solid #5e5e5e;border-radius:.4em;display:flex;flex-direction:column;overflow:hidden}turbo-dropdown>.turbo-popup>turbo-select-entry{padding:.5em}turbo-dropdown>.turbo-popup>turbo-select-entry:not(:last-child){border-bottom:.1em solid #bdbdbd}turbo-dropdown>turbo-select-entry{padding:.5em .7em;width:100%}turbo-dropdown>turbo-select-entry:hover{background-color:#d7d7d7}turbo-dropdown>turbo-select-entry:not(:last-child){border-bottom:.1em solid #bdbdbd}\";\nstyleInject(css_248z);\n\n/**\n * Dropdown class for creating Turbo button elements.\n * @class TurboDropdown\n * @extends TurboElement\n */\nlet TurboDropdown = (() => {\n    let _classDecorators = [define(\"turbo-dropdown\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _customSelectorTag_decorators;\n    let _customSelectorTag_initializers = [];\n    let _customSelectorTag_extraInitializers = [];\n    let _set_customSelectorClasses_decorators;\n    let _set_customPopupClasses_decorators;\n    let _entries_decorators;\n    let _entries_initializers = [];\n    let _entries_extraInitializers = [];\n    let _values_decorators;\n    let _values_initializers = [];\n    let _values_extraInitializers = [];\n    let _set_selector_decorators;\n    let _set_popup_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _customSelectorTag_decorators = [auto({ defaultValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultSelectorTag\"); } })];\n            _set_customSelectorClasses_decorators = [auto({ defaultValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultSelectorClasses\"); } })];\n            _set_customPopupClasses_decorators = [auto({ defaultValueCallback: function () { return this.getPropertiesValue(undefined, \"defaultPopupClasses\"); } })];\n            _entries_decorators = [expose(\"select\")];\n            _values_decorators = [expose(\"select\")];\n            _set_selector_decorators = [auto({\n                    setIfUndefined: true,\n                    preprocessValue: function (value) {\n                        if (value instanceof HTMLElement)\n                            return value;\n                        const text = typeof value === \"string\" ? value : stringify(this.select.getValue(this.entries[0]));\n                        if (this.selector instanceof TurboButton)\n                            this.selector.text = text;\n                        else\n                            return button({ text, elementTag: this.customSelectorTag });\n                    }\n                })];\n            _set_popup_decorators = [auto({ defaultValueCallback: () => popup() })];\n            __esDecorate(this, null, _set_customSelectorClasses_decorators, { kind: \"setter\", name: \"customSelectorClasses\", static: false, private: false, access: { has: obj => \"customSelectorClasses\" in obj, set: (obj, value) => { obj.customSelectorClasses = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_customPopupClasses_decorators, { kind: \"setter\", name: \"customPopupClasses\", static: false, private: false, access: { has: obj => \"customPopupClasses\" in obj, set: (obj, value) => { obj.customPopupClasses = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_selector_decorators, { kind: \"setter\", name: \"selector\", static: false, private: false, access: { has: obj => \"selector\" in obj, set: (obj, value) => { obj.selector = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_popup_decorators, { kind: \"setter\", name: \"popup\", static: false, private: false, access: { has: obj => \"popup\" in obj, set: (obj, value) => { obj.popup = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, null, _customSelectorTag_decorators, { kind: \"field\", name: \"customSelectorTag\", static: false, private: false, access: { has: obj => \"customSelectorTag\" in obj, get: obj => obj.customSelectorTag, set: (obj, value) => { obj.customSelectorTag = value; } }, metadata: _metadata }, _customSelectorTag_initializers, _customSelectorTag_extraInitializers);\n            __esDecorate(null, null, _entries_decorators, { kind: \"field\", name: \"entries\", static: false, private: false, access: { has: obj => \"entries\" in obj, get: obj => obj.entries, set: (obj, value) => { obj.entries = value; } }, metadata: _metadata }, _entries_initializers, _entries_extraInitializers);\n            __esDecorate(null, null, _values_decorators, { kind: \"field\", name: \"values\", static: false, private: false, access: { has: obj => \"values\" in obj, get: obj => obj.values, set: (obj, value) => { obj.values = value; } }, metadata: _metadata }, _values_initializers, _values_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        //TODO MOVE DEFAULT CLICK TO MAIN CONFIG\n        static config = { ...TurboElement.config, defaultSelectorTag: \"h4\" };\n        popupOpen = (__runInitializers(this, _instanceExtraInitializers), false);\n        customSelectorTag = __runInitializers(this, _customSelectorTag_initializers, void 0);\n        set customSelectorClasses(value) {\n            $(this.selector).addClass(value);\n        }\n        set customPopupClasses(value) {\n            $(this.popup).addClass(value);\n        }\n        entries = (__runInitializers(this, _customSelectorTag_extraInitializers), __runInitializers(this, _entries_initializers, void 0));\n        values = (__runInitializers(this, _entries_extraInitializers), __runInitializers(this, _values_initializers, void 0));\n        onEntryAdded(entry) {\n            this.select.initializeSelection();\n            $(entry).on(DefaultEventName.click, () => {\n                this.select.select(entry, !this.select.isSelected(entry));\n                this.openPopup(false);\n                return true;\n            });\n        }\n        select = (__runInitializers(this, _values_extraInitializers), new TurboSelect({\n            onEntryAdded: (entry) => this.onEntryAdded(entry),\n        }));\n        /**\n         * The dropdown's selector element.\n         */\n        set selector(value) {\n            if (!(value instanceof HTMLElement))\n                return;\n            $(value)\n                .addClass(this.customSelectorClasses)\n                .on(DefaultEventName.click, (e) => {\n                this.openPopup(!this.popupOpen);\n                return true;\n            });\n            if (this.popup instanceof TurboPopup)\n                this.popup.anchor = value;\n            $(this).addChild(value);\n            if (value instanceof TurboButton)\n                this.select.onSelect = () => value.text = this.stringSelectedValue;\n        }\n        get selector() { return; }\n        /**\n         * The dropdown's popup element.\n         */\n        set popup(value) {\n            if (value instanceof TurboPopup)\n                value.anchor = this.selector;\n            $(value).addClass(this.customPopupClasses);\n            this.select.parent = value;\n        }\n        initialize() {\n            super.initialize();\n            this.selector;\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            $(document).on(DefaultEventName.click, e => {\n                if (this.popupOpen && !this.contains(e.target))\n                    this.openPopup(false);\n            });\n        }\n        openPopup(b) {\n            if (this.popupOpen == b)\n                return;\n            this.popupOpen = b;\n            if (\"show\" in this.popup && typeof this.popup.show === \"function\")\n                this.popup.show(b);\n            else\n                $(this.popup).show(b);\n        }\n        get selectedValues() {\n            return this.select.selectedValues;\n        }\n        get selectedValue() {\n            return this.select.selectedValue;\n        }\n        get selectedSecondaryValues() {\n            return this.select.selectedSecondaryValues;\n        }\n        get selectedSecondaryValue() {\n            return this.select.selectedSecondaryValue;\n        }\n        get stringSelectedValue() {\n            return this.select.stringSelectedValue;\n        }\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    });\n    return _classThis;\n})();\nfunction dropdown(properties = {}) {\n    if (!properties.tag)\n        properties.tag = \"turbo-dropdown\";\n    return element({ ...properties, text: undefined });\n}\n\nlet TurboMarkingMenu = (() => {\n    let _classDecorators = [define(\"turbo-marking-menu\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _startAngle_decorators;\n    let _startAngle_initializers = [];\n    let _startAngle_extraInitializers = [];\n    let _endAngle_decorators;\n    let _endAngle_initializers = [];\n    let _endAngle_extraInitializers = [];\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _startAngle_decorators = [auto({\n                    initialValue: 0,\n                    preprocessValue: (value) => value - Math.PI / 2\n                })];\n            _endAngle_decorators = [auto({\n                    initialValue: Math.PI * 2,\n                    preprocessValue: (value) => value - Math.PI / 2\n                })];\n            __esDecorate(null, null, _startAngle_decorators, { kind: \"field\", name: \"startAngle\", static: false, private: false, access: { has: obj => \"startAngle\" in obj, get: obj => obj.startAngle, set: (obj, value) => { obj.startAngle = value; } }, metadata: _metadata }, _startAngle_initializers, _startAngle_extraInitializers);\n            __esDecorate(null, null, _endAngle_decorators, { kind: \"field\", name: \"endAngle\", static: false, private: false, access: { has: obj => \"endAngle\" in obj, get: obj => obj.endAngle, set: (obj, value) => { obj.endAngle = value; } }, metadata: _metadata }, _endAngle_initializers, _endAngle_extraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        transition;\n        currentOrigin;\n        minDragDistance = 20;\n        semiMajor = 50;\n        semiMinor = 45;\n        startAngle = __runInitializers(this, _startAngle_initializers, void 0);\n        endAngle = (__runInitializers(this, _startAngle_extraInitializers), __runInitializers(this, _endAngle_initializers, void 0));\n        constructor() {\n            super(...arguments);\n            __runInitializers(this, _endAngle_extraInitializers);\n        }\n    });\n    return _classThis;\n})();\n\n/**\n * @class TurboSelectWheel\n * @extends TurboSelect\n * @description Class to create a dynamic selection wheel.\n * @template {string} ValueType\n * @template {TurboSelectEntry<ValueType, any>} EntryType\n */\nlet TurboSelectWheel = (() => {\n    let _classDecorators = [define(\"turbo-select-wheel\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _instanceExtraInitializers = [];\n    let _set_alwaysOpen_decorators;\n    let _set_open_decorators;\n    (class extends _classSuper {\n        static { _classThis = this; }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n            _set_alwaysOpen_decorators = [auto()];\n            _set_open_decorators = [auto()];\n            __esDecorate(this, null, _set_alwaysOpen_decorators, { kind: \"setter\", name: \"alwaysOpen\", static: false, private: false, access: { has: obj => \"alwaysOpen\" in obj, set: (obj, value) => { obj.alwaysOpen = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(this, null, _set_open_decorators, { kind: \"setter\", name: \"open\", static: false, private: false, access: { has: obj => \"open\" in obj, set: (obj, value) => { obj.open = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n        _currentPosition = (__runInitializers(this, _instanceExtraInitializers), 0);\n        _reifect;\n        _size = { max: 100, min: -100 };\n        sizePerEntry = [];\n        positionPerEntry = [];\n        totalSize = 0;\n        dragLimitOffset = 30;\n        /**\n         * @description Hides after the set time has passed. Set to a negative value to never hide the wheel. In ms.\n         */\n        openTimeout = 3000;\n        direction = Direction.horizontal;\n        scale = { max: 1, min: 0.5 };\n        generateCustomStyling;\n        dragging;\n        openTimer;\n        // public constructor(properties: TurboSelectWheelProperties<ValueType, SecondaryValueType, EntryType, ViewType,\n        //     DataType, ModelType>) {\n        //     properties.multiSelection = false;\n        //     properties.forceSelection = true;\n        //     super();\n        //\n        //     if (properties.scale) this.scale = properties.scale;\n        //     if (properties.direction) this.direction = properties.direction;\n        //\n        //     this.opacity = properties.opacity ?? {max: 1, min: 0};\n        //     this.size = properties.size;\n        //     this.generateCustomStyling = properties.generateCustomStyling;\n        //     this.reifect = properties.styleReifect;\n        //\n        //     $(this).setStyles({display: \"block\", position: \"relative\"});\n        //     this.alwaysOpen = properties.alwaysOpen ?? false;\n        //\n        //     // this.initializeUI();\n        //\n        //     if (properties.selectedValues?.length > 0) this.select(properties.selectedValues[0]);\n        //     requestAnimationFrame(() => this.refresh());\n        // }\n        //\n        // public connectedCallback() {\n        //     //TODO super.connectedCallback();\n        //     requestAnimationFrame(() => this.refresh());\n        // }\n        //\n        // @auto({preprocessValue: (value) => trim(value, 1)})\n        // public set opacity(value: Record<Range, number>) {}\n        //\n        // public get size(): Record<Range, number> {\n        //     return this._size;\n        // }\n        //\n        // public set size(value: Record<Range, number> | number) {\n        //     this._size = typeof value == \"object\" ? value : {max: value ?? 100, min: -(value ?? 100)};\n        // }\n        //\n        // public get reifect(): Reifect {\n        //     return this._reifect;\n        // }\n        //\n        // public set reifect(value: Reifect | StatelessReifectProperties) {\n        //     if (value instanceof Reifect) this._reifect = value;\n        //     else {\n        //         if (!value) value = {};\n        //         if (!value.transitionProperties) value.transitionProperties = \"opacity transform\";\n        //         if (value.transitionDuration == undefined) value.transitionDuration = 0.2;\n        //         if (!value.transitionTimingFunction) value.transitionTimingFunction = \"ease-in-out\";\n        //         this._reifect = new Reifect(value);\n        //     }\n        //     this._reifect.attachAll(...this.entries);\n        // }\n        set alwaysOpen(value) {\n            if (value)\n                $(document).removeListener(DefaultEventName.click, this.closeOnClick);\n            else\n                $(document).on(DefaultEventName.click, this.closeOnClick);\n            this.open = value;\n        }\n        closeOnClick = () => this.open = false;\n        get isVertical() {\n            return this.direction == Direction.vertical;\n        }\n        // @auto({cancelIfUnchanged: false})\n        // public set index(value: number) {\n        //     this.selectByIndex(this.trimmedIndex);\n        // }\n        //\n        // protected get trimmedIndex() {\n        //     return trim(Math.round(this.index), this.entries.length - 1);\n        // }\n        //\n        // protected get flooredTrimmedIndex() {\n        //     return trim(Math.floor(this.index), this.entries.length - 1);\n        // }\n        set open(value) {\n            $(this).setStyle(\"overflow\", value ? \"visible\" : \"hidden\");\n        }\n        get currentPosition() {\n            return this._currentPosition;\n        }\n        // protected set currentPosition(value: number) {\n        //     const min = -this.dragLimitOffset - this.sizePerEntry[0] / 2;\n        //     const max = this.totalSize + this.dragLimitOffset - this.sizePerEntry[this.sizePerEntry.length - 1] / 2;\n        //\n        //     if (value < min) value = min;\n        //     if (value > max) value = max;\n        //\n        //     this._currentPosition = value;\n        //     const elements = this.reifect.getEnabledObjectsData();\n        //     if (elements.length === 0) return;\n        //\n        //     elements.forEach((el, index) =>\n        //         this.computeAndApplyStyling(el.object.deref() as HTMLElement, this.positionPerEntry[index] - value));\n        // }\n        // protected setupUIListeners() {\n        //     super.setupUIListeners();\n        //\n        //     $(document.body).on(DefaultEventName.drag, (e: TurboDragEvent) => {\n        //         if (!this.dragging) return;\n        //         e.stopImmediatePropagation();\n        //         this.currentPosition += this.computeDragValue(e.scaledDeltaPosition);\n        //     });\n        //\n        //     $(document.body).on(DefaultEventName.dragEnd, (e: TurboDragEvent) => {\n        //         if (!this.dragging) return;\n        //         e.stopImmediatePropagation();\n        //         this.dragging = false;\n        //         this.recomputeIndex();\n        //         // this.snapTo(this.trimmedIndex);\n        //         if (!this.alwaysOpen) this.setOpenTimer();\n        //     });\n        // }\n        computeDragValue(delta) {\n            return -delta[this.isVertical ? \"y\" : \"x\"];\n        }\n        /**\n         * Recalculates the dimensions and positions of all entries\n         */\n        // protected reloadEntrySizes() {\n        //     if (!this.reifect) return;\n        //\n        //     this.sizePerEntry.length = 0;\n        //     this.positionPerEntry.length = 0;\n        //     this.totalSize = 0;\n        //\n        //     this.reifect.getEnabledObjectsData().forEach(entry => {\n        //         const object = entry.object.deref();\n        //         const size = object ? object[this.isVertical ? \"offsetHeight\" : \"offsetWidth\"] : 0;\n        //         this.sizePerEntry.push(size);\n        //         this.positionPerEntry.push(this.totalSize);\n        //         this.totalSize += size;\n        //     });\n        //     const flooredIndex = Math.floor(this.index);\n        //     const indexOffset = this.index - Math.floor(this.index);\n        //\n        //     this.currentPosition = 0;\n        //     if (this.index < 0) this.currentPosition = -Math.abs(this.index) * this.sizePerEntry[0];\n        //     else if (this.index >= this.sizePerEntry.length) this.currentPosition =\n        //         (this.index - this.sizePerEntry.length + 1) * this.sizePerEntry[this.sizePerEntry.length - 1];\n        //     else this.currentPosition = this.positionPerEntry[flooredIndex] + this.sizePerEntry[flooredIndex] * indexOffset;\n        // }\n        //\n        // protected recomputeIndex() {\n        //     let index = 0;\n        //     while (index < this.positionPerEntry.length - 1 && this.positionPerEntry[index + 1] < this.currentPosition) index++;\n        //     if (this.currentPosition - this.positionPerEntry[index] > this.sizePerEntry[index + 1] / 2) index++;\n        //     this.index = index;\n        // }\n        // protected computeAndApplyStyling(element: HTMLElement, translationValue: number, size: Record<Range, number> = this.size) {\n        //     let opacityValue: number, scaleValue: number;\n        //     const bound = translationValue > 0 ? size.max : size.min;\n        //     opacityValue = linearInterpolation(translationValue, 0, bound, this.opacity.max, this.opacity.min);\n        //     scaleValue = linearInterpolation(translationValue, 0, bound, this.scale.max, this.scale.min);\n        //\n        //     let styles: string | PartialRecord<keyof CSSStyleDeclaration, string | number> = {\n        //         left: \"50%\", top: \"50%\", opacity: opacityValue, transform: `translate3d(\n        //         calc(${!this.isVertical ? translationValue : 0}px - 50%),\n        //         calc(${this.isVertical ? translationValue : 0}px - 50%),\n        //         0) scale3d(${scaleValue}, ${scaleValue}, 1)`\n        //     };\n        //\n        //     if (this.generateCustomStyling) styles = this.generateCustomStyling({\n        //         element: element,\n        //         translationValue: translationValue,\n        //         opacityValue: opacityValue,\n        //         scaleValue: scaleValue,\n        //         size: size,\n        //         defaultComputedStyles: styles\n        //     });\n        //\n        //     $(element).setStyles(styles);\n        // }\n        // public select(entry: ValueType | EntryType, selected: boolean = true): this {\n        //     // super.select(entry, selected);\n        //     if (entry === undefined || entry === null) return this;\n        //\n        //     const index = this.getIndex(this.selectedEntry);\n        //     if (index != this.index) this.index = index;\n        //\n        //     if (this.reifect) {\n        //         this.reifect.transitionEnabled = true;\n        //         this.reloadEntrySizes();\n        //     }\n        //\n        //     const computedStyle = getComputedStyle(this.selectedEntry);\n        //     $(this).setStyles({minWidth: computedStyle.width, minHeight: computedStyle.height}, true);\n        //     return this;\n        // }\n        //\n        // protected onEntryClick(entry: EntryType, e?: Event) {\n        //     super.onEntryClick(entry, e);\n        //     e.stopImmediatePropagation();\n        //     this.open = true;\n        //     if (!this.alwaysOpen) this.setOpenTimer();\n        // }\n        //\n        // public addEntry(entry: ValueType | TurboSelectEntryProperties<ValueType, SecondaryValueType> | EntryType,\n        //                 index: number = this.entries.length): EntryType {\n        //     entry = this.createEntry(entry);\n        //     entry.onDetach.add(() => this.reifect?.detach(entry as TurboSelectEntry));\n        //     entry.onAttach.add(() => {\n        //         this.reifect?.attach(entry as TurboSelectEntry);\n        //         this.reloadEntrySizes();\n        //     });\n        //\n        //     entry = super.addEntry(entry, index);\n        //     $(entry).setStyles({position: \"absolute\"});\n        //\n        //     $(entry).on(DefaultEventName.dragStart, (e: Event) => {\n        //         e.stopImmediatePropagation();\n        //         this.clearOpenTimer();\n        //         this.open = true;\n        //         this.dragging = true;\n        //         this.reifect.transitionEnabled = false;\n        //         this.reloadEntrySizes();\n        //     });\n        //\n        //     let showTimer: NodeJS.Timeout;\n        //     $(entry).on(\"mouseover\", () => {\n        //         clearTimeout(showTimer);\n        //         showTimer = setTimeout(() => this.open = true, 1000);\n        //     });\n        //     $(entry).on(\"mouseout\", () => {\n        //         if (showTimer) clearTimeout(showTimer);\n        //         showTimer = null;\n        //     });\n        //\n        //     this.refresh();\n        //     return entry;\n        // }\n        //\n        // public clear(): void {\n        //     this.reifect.detach(...this.entries);\n        //     super.clear();\n        // }\n        //\n        // public refresh() {\n        //     if (this.selectedEntry) this.select(this.selectedEntry);\n        //     else this.reset();\n        // }\n        //\n        // public reset() {\n        //     this.select(this.entries[0]);\n        // }\n        clearOpenTimer() {\n            if (this.openTimer)\n                clearTimeout(this.openTimer);\n        }\n        setOpenTimer() {\n            this.clearOpenTimer();\n            if (typeof this.openTimeout !== \"number\" || this.openTimeout < 0)\n                return;\n            this.openTimer = setTimeout(() => this.open = false, this.openTimeout);\n        }\n    });\n    return _classThis;\n})();\n\n/**\n * @class TurboProxiedElement\n * @description TurboProxiedElement class, similar to TurboElement but containing an HTML element instead of being one.\n * @template {TurboView} ViewType - The element's view type, if initializing MVC.\n * @template {object} DataType - The element's data type, if initializing MVC.\n * @template {TurboModel<DataType>} ModelType - The element's model type, if initializing MVC.\n * @template {TurboEmitter} EmitterType - The element's emitter type, if initializing MVC.\n */\nclass TurboProxiedElement {\n    /**\n     * @description Static configuration object.\n     */\n    static config = { shadowDOM: false, defaultSelectedClass: \"selected\" };\n    /**\n     * @description Update the class's static configurations. Will only overwrite the set properties.\n     * @property {typeof this.config} value - The object containing the new configurations.\n     */\n    static configure(value) {\n        Object.entries(value).forEach(([key, val]) => {\n            if (val !== undefined)\n                this.config[key] = val;\n        });\n    }\n    /**\n     * @description The HTML (or other) element wrapped inside this instance.\n     */\n    element;\n    /**\n     * @description The MVC handler of the element. If initialized, turns the element into an MVC structure.\n     * @protected\n     */\n    mvc = new Mvc({ element: this });\n    constructor(properties = {}) {\n        this.element = blindElement(properties);\n    }\n    setupChangedCallbacks() {\n    }\n    setupUIElements() {\n    }\n    setupUILayout() {\n    }\n    setupUIListeners() {\n    }\n}\n(() => {\n    defineDefaultProperties(TurboProxiedElement);\n    defineMvcAccessors(TurboProxiedElement);\n    defineUIPrototype(TurboProxiedElement);\n})();\n\nasync function hashString(input) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(input);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n    return Array.from(new Uint8Array(hashBuffer))\n        .map(byte => byte.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n}\nasync function hashBySize(input, chars = 12) {\n    const bytes = Math.ceil((chars * 6) / 8);\n    const enc = new TextEncoder();\n    const digest = await crypto.subtle.digest(\"SHA-256\", enc.encode(input));\n    const slice = new Uint8Array(digest).slice(0, bytes);\n    return (typeof btoa === \"function\"\n        ? btoa(String.fromCharCode(...slice))\n        : Buffer.from(slice).toString(\"base64\"))\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=+$/g, \"\")\n        .slice(0, chars);\n}\n\n/**\n * @description Interpolates x linearly between (x1, y1) and (x2, y2). If strict is true, then x will not be allowed\n * to go beyond [x1, x2].\n * @param x\n * @param x1\n * @param x2\n * @param y1\n * @param y2\n * @param strict\n */\nfunction linearInterpolation(x, x1, x2, y1, y2, strict = true) {\n    if (strict) {\n        const xMax = Math.max(x1, x2);\n        const xMin = Math.min(x1, x2);\n        if (x > xMax)\n            x = xMax;\n        if (x < xMin)\n            x = xMin;\n    }\n    return y1 + ((x - x1) * (y2 - y1)) / (x2 - x1);\n}\n\nfunction getEventPosition(e) {\n    if (e instanceof TurboEvent)\n        return e.scaledPosition;\n    if (e instanceof PointerEvent)\n        return new Point(e.clientX, e.clientY);\n    return;\n}\n\n/**\n * @description Computes the luminance of a color\n * @param {string} color - The color in Hex format\n * @return The luminance value, or NaN if the color is not valid.\n */\nfunction luminance(color) {\n    if (!color)\n        return NaN;\n    const rgb = parseInt(color.substring(1), 16);\n    const r = ((rgb >> 16) & 0xff) / 255;\n    const g = ((rgb >> 8) & 0xff) / 255;\n    const b = ((rgb >> 0) & 0xff) / 255;\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * @description Computes the contrast between two colors.\n * @param {string} color1 - The first color in Hex format\n * @param {string} color2 - The second color in Hex format\n * @return The contrast value, or NaN if one of the colors provided is not valid.\n */\nfunction contrast(color1, color2) {\n    if (!color1 || !color2)\n        return NaN;\n    const luminance1 = luminance(color1);\n    const luminance2 = luminance(color2);\n    return (Math.max(luminance1, luminance2) + 0.1) / (Math.min(luminance1, luminance2) + 0.1);\n}\n\n/**\n * @description Evaluates the best color out of two provided options to put on top of a base color in terms of contrast\n * (for readability).\n * @param {string} baseColor - The base color in Hex format.\n * @param {string} [overlayColor1=\"#000000\"] - The first overlay color to evaluate in Hex format. Defaults to black.\n * @param {string} [overlayColor2=\"#FFFFFF\"] - The second overlay color to evaluate in Hex format. Defaults to white.\n */\nfunction bestOverlayColor(baseColor, overlayColor1 = \"#000000\", overlayColor2 = \"#FFFFFF\") {\n    const contrastLight = contrast(baseColor, overlayColor2);\n    const contrastDark = contrast(overlayColor1, baseColor);\n    return contrastLight > contrastDark ? overlayColor2 : overlayColor1;\n}\n\n/**\n * @description Constructs a single CSS string from a template literal containing CSS rules.\n */\nfunction css(strings, ...values) {\n    let str = \"\";\n    strings.forEach((string, i) => {\n        str += string + (values[i] || '');\n    });\n    return str;\n}\n\n/**\n * @description Default font weights, sub-names, and styles when loading a font family.\n */\nconst defaultFamilyWeights = {\n    900: { \"Black\": \"normal\", \"BlackItalic\": \"italic\" },\n    800: { \"ExtraBold\": \"normal\", \"ExtraBoldItalic\": \"italic\" },\n    700: { \"Bold\": \"normal\", \"BoldItalic\": \"italic\" },\n    600: { \"SemiBold\": \"normal\", \"SemiBoldItalic\": \"italic\" },\n    500: { \"Medium\": \"normal\", \"MediumItalic\": \"italic\" },\n    400: { \"Regular\": \"normal\", \"Italic\": \"italic\" },\n    300: { \"Light\": \"normal\", \"LightItalic\": \"italic\" },\n    200: { \"ExtraLight\": \"normal\", \"ExtraLightItalic\": \"italic\" },\n    100: { \"Thin\": \"normal\", \"ThinItalic\": \"italic\" },\n};\nfunction createFontFace(name, path, format, weight, style) {\n    return css `\r\n        @font-face {\r\n            font-family: \"${name}\";\r\n            src: url(\"${path}\") format(\"${format}\"), \r\n            url(\"${path}\") format(\"woff\"),\r\n            url(\"${path}\") format(\"truetype\");\r\n            font-weight: ${typeof weight == \"string\" ? \"\\\"\" + weight + \"\\\"\" : weight};\r\n            font-style: \"${style}\";\r\n        }`;\n}\n/**\n * @description Loads a local font file, or a family of fonts from a directory.\n * @param {FontProperties} font - The font properties\n */\nfunction loadLocalFont(font) {\n    if (!font.name || !font.pathOrDirectory)\n        console.error(\"Please specify font name and path/directory\");\n    const isFamily = getFileExtension(font.pathOrDirectory).length == 0;\n    if (!font.stylesPerWeights)\n        font.stylesPerWeights = isFamily ? defaultFamilyWeights : { \"normal\": \"normal\" };\n    if (!font.format)\n        font.format = \"woff2\";\n    if (!font.extension)\n        font.extension = \".ttf\";\n    if (font.extension[0] != \".\")\n        font.extension = \".\" + font.extension;\n    stylesheet(Object.entries(font.stylesPerWeights).map(([weight, value]) => {\n        const weightNumber = Number.parseInt(weight);\n        const typedWeight = weightNumber ? weightNumber : weight;\n        if (typeof value == \"string\")\n            return createFontFace(font.name, font.pathOrDirectory, font.format, typedWeight, value);\n        return Object.entries(value).map(([weightName, style]) => createFontFace(font.name, `${font.pathOrDirectory}/${font.name}-${weightName}${font.extension}`, font.format, typedWeight, style)).join(\"\\n\");\n    }).join(\"\\n\"));\n}\n\n/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nconst create$5 = () => new Map();\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template K,V\n * @param {Map<K,V>} m\n * @return {Map<K,V>}\n */\nconst copy = m => {\n  const r = create$5();\n  m.forEach((v, k) => { r.set(k, v); });\n  return r\n};\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template {Map<any, any>} MAP\n * @template {MAP extends Map<any,infer V> ? function():V : unknown} CF\n * @param {MAP} map\n * @param {MAP extends Map<infer K,any> ? K : unknown} key\n * @param {CF} createT\n * @return {ReturnType<CF>}\n */\nconst setIfUndefined = (map, key, createT) => {\n  let set = map.get(key);\n  if (set === undefined) {\n    map.set(key, set = createT());\n  }\n  return set\n};\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nconst map = (m, f) => {\n  const res = [];\n  for (const [key, value] of m) {\n    res.push(f(value, key));\n  }\n  return res\n};\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nconst any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n};\n\n/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nconst create$4 = () => new Set();\n\n/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nconst last = arr => arr[arr.length - 1];\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nconst from = Array.from;\n\nconst isArray = Array.isArray;\n\n/**\n * Observable class prototype.\n *\n * @module observable\n */\n\n\n/**\n * Handles named events.\n * @experimental\n *\n * This is basically a (better typed) duplicate of Observable, which will replace Observable in the\n * next release.\n *\n * @template {{[key in keyof EVENTS]: function(...any):void}} EVENTS\n */\nclass ObservableV2 {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<string, Set<any>>}\n     */\n    this._observers = create$5();\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  on (name, f) {\n    setIfUndefined(this._observers, /** @type {string} */ (name), create$4).add(f);\n    return f\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, /** @type {any} */ (_f));\n      f(...args);\n    };\n    this.on(name, /** @type {any} */ (_f));\n  }\n\n  /**\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name\n   * @param {EVENTS[NAME]} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name);\n    if (observers !== undefined) {\n      observers.delete(f);\n      if (observers.size === 0) {\n        this._observers.delete(name);\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @template {keyof EVENTS & string} NAME\n   * @param {NAME} name The event name.\n   * @param {Parameters<EVENTS[NAME]>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return from((this._observers.get(name) || create$5()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = create$5();\n  }\n}\n/* c8 ignore end */\n\n/**\n * Common Math expressions.\n *\n * @module math\n */\n\nconst floor = Math.floor;\nconst abs = Math.abs;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nconst min = (a, b) => a < b ? a : b;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nconst max = (a, b) => a > b ? a : b;\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nconst isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0;\n\n/* eslint-env browser */\n\n/**\n * Binary data constants.\n *\n * @module binary\n */\n\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nconst BIT1 = 1;\nconst BIT2 = 2;\nconst BIT3 = 4;\nconst BIT4 = 8;\nconst BIT6 = 32;\nconst BIT7 = 64;\nconst BIT8 = 128;\nconst BITS5 = 31;\nconst BITS6 = 63;\nconst BITS7 = 127;\n/**\n * @type {number}\n */\nconst BITS31 = 0x7FFFFFFF;\n\n/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\n\n/* c8 ignore next */\nconst isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && floor(num) === num);\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase();\n\nconst trimLeftRegex = /^\\s*/g;\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst trimLeft = s => s.replace(trimLeftRegex, '');\n\nconst fromCamelCaseRegex = /([A-Z])/g;\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nconst fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`));\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  const buf = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i));\n  }\n  return buf\n};\n\n/* c8 ignore next */\nconst utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Native = str => utf8TextEncoder.encode(str);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* c8 ignore next */\nconst encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\n\n/* c8 ignore next */\nlet utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true });\n\n/* c8 ignore start */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* c8 ignore next */\n  utf8TextDecoder = null;\n}\n\n/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nclass Encoder {\n  constructor () {\n    this.cpos = 0;\n    this.cbuf = new Uint8Array(100);\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = [];\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nconst createEncoder = () => new Encoder();\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nconst length = encoder => {\n  let len = encoder.cpos;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length;\n  }\n  return len\n};\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nconst toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder));\n  let curPos = 0;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i];\n    uint8arr.set(d, curPos);\n    curPos += d.length;\n  }\n  uint8arr.set(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos), curPos);\n  return uint8arr\n};\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nconst verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length;\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos));\n    encoder.cbuf = new Uint8Array(max(bufferLen, len) * 2);\n    encoder.cpos = 0;\n  }\n};\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nconst write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length;\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf);\n    encoder.cbuf = new Uint8Array(bufferLen * 2);\n    encoder.cpos = 0;\n  }\n  encoder.cbuf[encoder.cpos++] = num;\n};\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nconst writeUint8 = write;\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nconst writeVarUint = (encoder, num) => {\n  while (num > BITS7) {\n    write(encoder, BIT8 | (BITS7 & num));\n    num = floor(num / 128); // shift >>> 7\n  }\n  write(encoder, BITS7 & num);\n};\n\n/**\n * Write a variable length integer.\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nconst writeVarInt = (encoder, num) => {\n  const isNegative = isNegativeZero(num);\n  if (isNegative) {\n    num = -num;\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > BITS6 ? BIT8 : 0) | (isNegative ? BIT7 : 0) | (BITS6 & num));\n  num = floor(num / 64); // shift >>> 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > BITS7 ? BIT8 : 0) | (BITS7 & num));\n    num = floor(num / 128); // shift >>> 7\n  }\n};\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000);\nconst _maxStrBSize = _strBuffer.length / 3;\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* c8 ignore next */\n    const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;\n    writeVarUint(encoder, written);\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i]);\n    }\n  } else {\n    writeVarUint8Array(encoder, encodeUtf8(str));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  writeVarUint(encoder, len);\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* c8 ignore next */\nconst writeVarString = (utf8TextEncoder && /** @type {any} */ (utf8TextEncoder).encodeInto) ? _writeVarStringNative : _writeVarStringPolyfill;\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length;\n  const cpos = encoder.cpos;\n  const leftCopyLen = min(bufferLen - cpos, uint8Array.length);\n  const rightCopyLen = uint8Array.length - leftCopyLen;\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);\n  encoder.cpos += leftCopyLen;\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf);\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(max(bufferLen * 2, rightCopyLen));\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));\n    encoder.cpos = rightCopyLen;\n  }\n};\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength);\n  writeUint8Array(encoder, uint8Array);\n};\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nconst writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len);\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);\n  encoder.cpos += len;\n  return dview\n};\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nconst writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false);\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nconst writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false);\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nconst writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num, false);\n\nconst floatTestBed = new DataView(new ArrayBuffer(4));\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num);\n  return floatTestBed.getFloat32(0) === num\n};\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nconst writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119);\n      writeVarString(encoder, data);\n      break\n    case 'number':\n      if (isInteger(data) && abs(data) <= BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125);\n        writeVarInt(encoder, data);\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124);\n        writeFloat32(encoder, data);\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123);\n        writeFloat64(encoder, data);\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122);\n      writeBigInt64(encoder, data);\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126);\n      } else if (isArray(data)) {\n        // TYPE 117: Array\n        write(encoder, 117);\n        writeVarUint(encoder, data.length);\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i]);\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116);\n        writeVarUint8Array(encoder, data);\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118);\n        const keys = Object.keys(data);\n        writeVarUint(encoder, keys.length);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          writeVarString(encoder, key);\n          writeAny(encoder, data[key]);\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121);\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127);\n  }\n};\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nclass RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super();\n    /**\n     * The writer\n     */\n    this.w = writer;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null;\n    this.count = 0;\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++;\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1); // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1;\n      // write first value\n      this.w(this, v);\n      this.s = v;\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2); // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n};\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nclass UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder();\n    /**\n     * @type {number}\n     */\n    this.s = 0;\n    this.count = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++;\n    } else {\n      flushUintOptRleEncoder(this);\n      this.count = 1;\n      this.s = v;\n    }\n  }\n\n  /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */\n  toUint8Array () {\n    flushUintOptRleEncoder(this);\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    // const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff);\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2); // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n};\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nclass IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder();\n    /**\n     * @type {number}\n     */\n    this.s = 0;\n    this.count = 0;\n    this.diff = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v;\n      this.count++;\n    } else {\n      flushIntDiffOptRleEncoder(this);\n      this.count = 1;\n      this.diff = v - this.s;\n      this.s = v;\n    }\n  }\n\n  /**\n   * Flush the encoded state and transform this to a Uint8Array.\n   *\n   * Note that this should only be called once.\n   */\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this);\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nclass StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = [];\n    this.s = '';\n    this.lensE = new UintOptRleEncoder();\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string;\n    if (this.s.length > 19) {\n      this.sarr.push(this.s);\n      this.s = '';\n    }\n    this.lensE.write(string.length);\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder();\n    this.sarr.push(this.s);\n    this.s = '';\n    writeVarString(encoder, this.sarr.join(''));\n    writeUint8Array(encoder, this.lensE.toUint8Array());\n    return toUint8Array(encoder)\n  }\n}\n\n/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* c8 ignore next */\nconst create$3 = s => new Error(s);\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* c8 ignore next 3 */\nconst methodUnimplemented = () => {\n  throw create$3('Method unimplemented')\n};\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* c8 ignore next 3 */\nconst unexpectedCase = () => {\n  throw create$3('Unexpected case')\n};\n\n/* eslint-env browser */\n\nconst getRandomValues = crypto.getRandomValues.bind(crypto);\n\n/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */\n\n\nconst uint32 = () => getRandomValues(new Uint32Array(1))[0];\n\n// @ts-ignore\nconst uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11;\n\n/**\n * @return {string}\n */\nconst uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>\n  (c ^ uint32() & 15 >> c / 4).toString(16)\n);\n\n/**\n * Utility helpers to work with promises.\n *\n * @module promise\n */\n\n\n/**\n * @template T\n * @callback PromiseResolve\n * @param {T|PromiseLike<T>} [result]\n */\n\n/**\n * @template T\n * @param {function(PromiseResolve<T>,function(Error):void):any} f\n * @return {Promise<T>}\n */\nconst create$2 = f => /** @type {Promise<T>} */ (new Promise(f));\n\n/**\n * `Promise.all` wait for all promises in the array to resolve and return the result\n * @template {unknown[] | []} PS\n *\n * @param {PS} ps\n * @return {Promise<{ -readonly [P in keyof PS]: Awaited<PS[P]> }>}\n */\nPromise.all.bind(Promise);\n\n/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* c8 ignore next */\nconst undefinedToNull = v => v === undefined ? null : v;\n\n/* eslint-env browser */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* c8 ignore start */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map();\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue);\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill();\nlet usePolyfill = true;\n\n/* c8 ignore start */\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  if (typeof localStorage !== 'undefined' && localStorage) {\n    _localStorage = localStorage;\n    usePolyfill = false;\n  }\n} catch (e) { }\n/* c8 ignore stop */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n/* c8 ignore next */\nconst varStorage = _localStorage;\n\n/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n\n/**\n * Object.assign\n */\nconst assign = Object.assign;\n\n/**\n * @param {Object<string,any>} obj\n */\nconst keys = Object.keys;\n\n/**\n * @template V\n * @param {{[k:string]:V}} obj\n * @param {function(V,string):any} f\n */\nconst forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key);\n  }\n};\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nconst size = obj => keys(obj).length;\n\n/**\n * @param {Object|null|undefined} obj\n */\nconst isEmpty = obj => {\n  // eslint-disable-next-line no-unreachable-loop\n  for (const _k in obj) {\n    return false\n  }\n  return true\n};\n\n/**\n * @template {{ [key:string|number|symbol]: any }} T\n * @param {T} obj\n * @param {(v:T[keyof T],k:keyof T)=>boolean} f\n * @return {boolean}\n */\nconst every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n};\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|number|symbol} key\n * @return {boolean}\n */\nconst hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nconst equalFlat = (a, b) => a === b || (size(a) === size(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val));\n\n/**\n * Make an object immutable. This hurts performance and is usually not needed if you perform good\n * coding practices.\n */\nconst freeze = Object.freeze;\n\n/**\n * Make an object and all its children immutable.\n * This *really* hurts performance and is usually not needed if you perform good coding practices.\n *\n * @template {any} T\n * @param {T} o\n * @return {Readonly<T>}\n */\nconst deepFreeze = (o) => {\n  for (const key in o) {\n    const c = o[key];\n    if (typeof c === 'object' || typeof c === 'function') {\n      deepFreeze(o[key]);\n    }\n  }\n  return freeze(o)\n};\n\n/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nconst callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args);\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1);\n    }\n  }\n};\n\n/**\n * @template V\n * @template {V} OPTS\n *\n * @param {V} value\n * @param {Array<OPTS>} options\n */\n// @ts-ignore\nconst isOneOf = (value, options) => options.includes(value);\n\n/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */\n\n\n/* c8 ignore next 2 */\n// @ts-ignore\nconst isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n\n/**\n * @type {Map<string,string>}\n */\nlet params;\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = create$5();\n      const pargs = process.argv;\n      let currParamName = null;\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i];\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '');\n          }\n          currParamName = parg;\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg);\n            currParamName = null;\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '');\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = create$5(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach((kv) => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=');\n          params.set(`--${fromCamelCase(key, '-')}`, value);\n          params.set(`-${fromCamelCase(key, '-')}`, value);\n        }\n      });\n    } else {\n      params = create$5();\n    }\n  }\n  return params\n};\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nconst hasParam = (name) => computeParams().has(name);\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nconst getVariable = (name) =>\n  isNode\n    ? undefinedToNull(process.env[name.toUpperCase().replaceAll('-', '_')])\n    : undefinedToNull(varStorage.getItem(name));\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nconst hasConf = (name) =>\n  hasParam('--' + name) || getVariable(name) !== null;\n\n/* c8 ignore next */\nhasConf('production');\n\n/* c8 ignore next 2 */\nconst forceColor = isNode &&\n  isOneOf(process.env.FORCE_COLOR, ['true', '1', '2']);\n\n/* c8 ignore start */\n/**\n * Color is enabled by default if the terminal supports it.\n *\n * Explicitly enable color using `--color` parameter\n * Disable color using `--no-color` parameter or using `NO_COLOR=1` environment variable.\n * `FORCE_COLOR=1` enables color and takes precedence over all.\n */\nconst supportsColor = forceColor || (\n  !hasParam('--no-colors') && // @todo deprecate --no-colors\n  !hasConf('no-color') &&\n  (!isNode || process.stdout.isTTY) && (\n    !isNode ||\n    hasParam('--color') ||\n    getVariable('COLORTERM') !== null ||\n    (getVariable('TERM') || '').includes('color')\n  )\n);\n/* c8 ignore stop */\n\n/**\n * Working with value pairs.\n *\n * @module pair\n */\n\n/**\n * @template L,R\n */\nclass Pair {\n  /**\n   * @param {L} left\n   * @param {R} right\n   */\n  constructor (left, right) {\n    this.left = left;\n    this.right = right;\n  }\n}\n\n/**\n * @template L,R\n * @param {L} left\n * @param {R} right\n * @return {Pair<L,R>}\n */\nconst create$1 = (left, right) => new Pair(left, right);\n\n/* eslint-env browser */\n\n\n/** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null);\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\nconst mapToStyleString = m => map(m, (value, key) => `${key}:${value};`).join('');\n/* c8 ignore stop */\n\n/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n\n/**\n * Return fresh symbol.\n */\nconst create = Symbol;\n\nconst BOLD = create();\nconst UNBOLD = create();\nconst BLUE = create();\nconst GREY = create();\nconst GREEN = create();\nconst RED = create();\nconst PURPLE = create();\nconst ORANGE = create();\nconst UNCOLOR = create();\n\n/* c8 ignore start */\n/**\n * @param {Array<undefined|string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number|undefined>}\n */\nconst computeNoColorLoggingArgs = args => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ (/** @type {[function]} */ (args)[0]());\n  }\n  const strBuilder = [];\n  const logArgs = [];\n  // try with formatting until we find something unsupported\n  let i = 0;\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (arg === undefined) {\n      break\n    } else if (arg.constructor === String || arg.constructor === Number) {\n      strBuilder.push(arg);\n    } else if (arg.constructor === Object) {\n      break\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(''));\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg);\n    }\n  }\n  return logArgs\n};\n/* c8 ignore stop */\n\n/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */\n\n\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */\nconst _browserStyleMap = {\n  [BOLD]: create$1('font-weight', 'bold'),\n  [UNBOLD]: create$1('font-weight', 'normal'),\n  [BLUE]: create$1('color', 'blue'),\n  [GREEN]: create$1('color', 'green'),\n  [GREY]: create$1('color', 'grey'),\n  [RED]: create$1('color', 'red'),\n  [PURPLE]: create$1('color', 'purple'),\n  [ORANGE]: create$1('color', 'orange'), // not well supported in chrome when debugging node with inspector - TODO: deprecate\n  [UNCOLOR]: create$1('color', 'black')\n};\n\n/**\n * @param {Array<string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number>}\n */\n/* c8 ignore start */\nconst computeBrowserLoggingArgs = (args) => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ (/** @type {[function]} */ (args)[0]());\n  }\n  const strBuilder = [];\n  const styles = [];\n  const currentStyle = create$5();\n  /**\n   * @type {Array<string|Object|number>}\n   */\n  let logArgs = [];\n  // try with formatting until we find something unsupported\n  let i = 0;\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    // @ts-ignore\n    const style = _browserStyleMap[arg];\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right);\n    } else {\n      if (arg === undefined) {\n        break\n      }\n      if (arg.constructor === String || arg.constructor === Number) {\n        const style = mapToStyleString(currentStyle);\n        if (i > 0 || style.length > 0) {\n          strBuilder.push('%c' + arg);\n          styles.push(style);\n        } else {\n          strBuilder.push(arg);\n        }\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs = styles;\n    logArgs.unshift(strBuilder.join(''));\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg);\n    }\n  }\n  return logArgs\n};\n/* c8 ignore stop */\n\n/* c8 ignore start */\nconst computeLoggingArgs = supportsColor\n  ? computeBrowserLoggingArgs\n  : computeNoColorLoggingArgs;\n/* c8 ignore stop */\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nconst print = (...args) => {\n  console.log(...computeLoggingArgs(args));\n  /* c8 ignore next */\n  vconsoles.forEach((vc) => vc.print(args));\n};\n\n/* c8 ignore start */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nconst warn = (...args) => {\n  console.warn(...computeLoggingArgs(args));\n  args.unshift(ORANGE);\n  vconsoles.forEach((vc) => vc.print(args));\n};\n\nconst vconsoles = create$4();\n\n/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */\n\n\n/**\n * @template T\n * @param {function():IteratorResult<T>} next\n * @return {IterableIterator<T>}\n */\nconst createIterator = next => ({\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next\n});\n\n/**\n * @template T\n * @param {Iterator<T>} iterator\n * @param {function(T):boolean} filter\n */\nconst iteratorFilter = (iterator, filter) => createIterator(() => {\n  let res;\n  do {\n    res = iterator.next();\n  } while (!res.done && !filter(res.value))\n  return res\n});\n\n/**\n * @template T,M\n * @param {Iterator<T>} iterator\n * @param {function(T):M} fmap\n */\nconst iteratorMap = (iterator, fmap) => createIterator(() => {\n  const { done, value } = iterator.next();\n  return { done, value: done ? undefined : fmap(value) }\n});\n\nclass DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock;\n    /**\n     * @type {number}\n     */\n    this.len = len;\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nclass DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map();\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid));\n    if (structs != null) {\n      const lastStruct = structs[structs.length - 1];\n      const clockState = lastStruct.id.clock + lastStruct.length;\n      for (let i = 0, del = deletes[i]; i < deletes.length && del.clock < clockState; del = deletes[++i]) {\n        iterateStructs(transaction, structs, del.clock, del.len, f);\n      }\n    }\n  });\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nconst findIndexDS = (dis, clock) => {\n  let left = 0;\n  let right = dis.length - 1;\n  while (left <= right) {\n    const midindex = floor((left + right) / 2);\n    const mid = dis[midindex];\n    const midclock = mid.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n  return null\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n};\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock);\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j;\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1];\n      const right = dels[i];\n      if (left.clock + left.len >= right.clock) {\n        left.len = max(left.len, right.clock + right.len - left.clock);\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n        j++;\n      }\n    }\n    dels.length = j;\n  });\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nconst addToDeleteSet = (ds, client, clock, length) => {\n  setIfUndefined(ds.clients, client, () => /** @type {Array<DeleteItem>} */ ([])).push(new DeleteItem(clock, length));\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst writeDeleteSet = (encoder, ds) => {\n  writeVarUint(encoder.restEncoder, ds.clients.size);\n\n  // Ensure that the delete set is written in a deterministic order\n  from(ds.clients.entries())\n    .sort((a, b) => b[0] - a[0])\n    .forEach(([client, dsitems]) => {\n      encoder.resetDsCurVal();\n      writeVarUint(encoder.restEncoder, client);\n      const len = dsitems.length;\n      writeVarUint(encoder.restEncoder, len);\n      for (let i = 0; i < len; i++) {\n        const item = dsitems[i];\n        encoder.writeDsClock(item.clock);\n        encoder.writeDsLen(item.len);\n      }\n    });\n};\n\n/**\n * @module Y\n */\n\n\nconst generateNewClientId = uint32;\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {string | null} [DocOpts.collectionid] Associate this document with a collection. This only plays a role if your provider has a concept of collection.\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n * @property {boolean} [DocOpts.shouldLoad] Whether the document should be synced by the provider now. This is toggled to true when you call ydoc.load()\n */\n\n/**\n * @typedef {Object} DocEvents\n * @property {function(Doc):void} DocEvents.destroy\n * @property {function(Doc):void} DocEvents.load\n * @property {function(boolean, Doc):void} DocEvents.sync\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.update\n * @property {function(Uint8Array, any, Doc, Transaction):void} DocEvents.updateV2\n * @property {function(Doc):void} DocEvents.beforeAllTransactions\n * @property {function(Transaction, Doc):void} DocEvents.beforeTransaction\n * @property {function(Transaction, Doc):void} DocEvents.beforeObserverCalls\n * @property {function(Transaction, Doc):void} DocEvents.afterTransaction\n * @property {function(Transaction, Doc):void} DocEvents.afterTransactionCleanup\n * @property {function(Doc, Array<Transaction>):void} DocEvents.afterAllTransactions\n * @property {function({ loaded: Set<Doc>, added: Set<Doc>, removed: Set<Doc> }, Doc, Transaction):void} DocEvents.subdocs\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends ObservableV2<DocEvents>\n */\nclass Doc extends ObservableV2 {\n  /**\n   * @param {DocOpts} opts configuration\n   */\n  constructor ({ guid = uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {\n    super();\n    this.gc = gc;\n    this.gcFilter = gcFilter;\n    this.clientID = generateNewClientId();\n    this.guid = guid;\n    this.collectionid = collectionid;\n    /**\n     * @type {Map<string, AbstractType<YEvent<any>>>}\n     */\n    this.share = new Map();\n    this.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = [];\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set();\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null;\n    this.shouldLoad = shouldLoad;\n    this.autoLoad = autoLoad;\n    this.meta = meta;\n    /**\n     * This is set to true when the persistence provider loaded the document from the database or when the `sync` event fires.\n     * Note that not all providers implement this feature. Provider authors are encouraged to fire the `load` event when the doc content is loaded from the database.\n     *\n     * @type {boolean}\n     */\n    this.isLoaded = false;\n    /**\n     * This is set to true when the connection provider has successfully synced with a backend.\n     * Note that when using peer-to-peer providers this event may not provide very useful.\n     * Also note that not all providers implement this feature. Provider authors are encouraged to fire\n     * the `sync` event when the doc has been synced (with `true` as a parameter) or if connection is\n     * lost (with false as a parameter).\n     */\n    this.isSynced = false;\n    this.isDestroyed = false;\n    /**\n     * Promise that resolves once the document has been loaded from a persistence provider.\n     */\n    this.whenLoaded = create$2(resolve => {\n      this.on('load', () => {\n        this.isLoaded = true;\n        resolve(this);\n      });\n    });\n    const provideSyncedPromise = () => create$2(resolve => {\n      /**\n       * @param {boolean} isSynced\n       */\n      const eventHandler = (isSynced) => {\n        if (isSynced === undefined || isSynced === true) {\n          this.off('sync', eventHandler);\n          resolve();\n        }\n      };\n      this.on('sync', eventHandler);\n    });\n    this.on('sync', isSynced => {\n      if (isSynced === false && this.isSynced) {\n        this.whenSynced = provideSyncedPromise();\n      }\n      this.isSynced = isSynced === undefined || isSynced === true;\n      if (this.isSynced && !this.isLoaded) {\n        this.emit('load', [this]);\n      }\n    });\n    /**\n     * Promise that resolves once the document has been synced with a backend.\n     * This promise is recreated when the connection is lost.\n     * Note the documentation about the `isSynced` property.\n     */\n    this.whenSynced = provideSyncedPromise();\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item;\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this);\n      }, null, true);\n    }\n    this.shouldLoad = true;\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @template T\n   * @param {function(Transaction):T} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   * @return T\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    return transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `ydoc.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `ydoc.get(name, Y.Array) === ydoc.get(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `ydoc.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Y.Doc instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @template {typeof AbstractType<any>} Type\n   * @example\n   *   const ydoc = new Y.Doc(..)\n   *   const appState = {\n   *     document: ydoc.getText('document')\n   *     comments: ydoc.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Type} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {InstanceType<Type>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = /** @type {any} */ (AbstractType)) {\n    const type = setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor();\n      t._integrate(this, null);\n      return t\n    });\n    const Constr = type.constructor;\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor();\n        t._map = type._map;\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t;\n          }\n        });\n        t._start = type._start;\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t;\n        }\n        t._length = type._length;\n        this.share.set(name, t);\n        t._integrate(this, null);\n        return /** @type {InstanceType<Type>} */ (t)\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return /** @type {InstanceType<Type>} */ (type)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    return /** @type {YArray<T>} */ (this.get(name, YArray))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    return this.get(name, YText)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YMap<T>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    return /** @type {YMap<T>} */ (this.get(name, YMap))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlElement}\n   *\n   * @public\n   */\n  getXmlElement (name = '') {\n    return /** @type {YXmlElement<{[key:string]:string}>} */ (this.get(name, YXmlElement))\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {};\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON();\n    });\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    this.isDestroyed = true;\n    from(this.subdocs).forEach(subdoc => subdoc.destroy());\n    const item = this._item;\n    if (item !== null) {\n      this._item = null;\n      const content = /** @type {ContentDoc} */ (item.content);\n      content.doc = new Doc({ guid: this.guid, ...content.opts, shouldLoad: false });\n      content.doc._item = item;\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        const doc = content.doc;\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(doc);\n        }\n        transaction.subdocsRemoved.add(this);\n      }, null, true);\n    }\n    // @ts-ignore\n    this.emit('destroyed', [true]); // DEPRECATED!\n    this.emit('destroy', [this]);\n    super.destroy();\n  }\n}\n\nclass DSEncoderV1 {\n  constructor () {\n    this.restEncoder = createEncoder();\n  }\n\n  toUint8Array () {\n    return toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    writeVarUint(this.restEncoder, clock);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    writeVarUint(this.restEncoder, len);\n  }\n}\n\nclass UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    writeVarUint(this.restEncoder, id.client);\n    writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    writeVarUint(this.restEncoder, id.client);\n    writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    writeVarUint(this.restEncoder, client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    writeUint8(this.restEncoder, info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    writeVarString(this.restEncoder, s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    writeVarUint(this.restEncoder, info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    writeVarUint(this.restEncoder, len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    writeVarString(this.restEncoder, JSON.stringify(embed));\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    writeVarString(this.restEncoder, key);\n  }\n}\n\nclass DSEncoderV2 {\n  constructor () {\n    this.restEncoder = createEncoder(); // encodes all the rest / non-optimized\n    this.dsCurrVal = 0;\n  }\n\n  toUint8Array () {\n    return toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal;\n    this.dsCurrVal = clock;\n    writeVarUint(this.restEncoder, diff);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      unexpectedCase();\n    }\n    writeVarUint(this.restEncoder, len - 1);\n    this.dsCurrVal += len;\n  }\n}\n\nclass UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super();\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map();\n    /**\n     * Refers to the next unique key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0;\n    this.keyClockEncoder = new IntDiffOptRleEncoder();\n    this.clientEncoder = new UintOptRleEncoder();\n    this.leftClockEncoder = new IntDiffOptRleEncoder();\n    this.rightClockEncoder = new IntDiffOptRleEncoder();\n    this.infoEncoder = new RleEncoder(writeUint8);\n    this.stringEncoder = new StringEncoder();\n    this.parentInfoEncoder = new RleEncoder(writeUint8);\n    this.typeRefEncoder = new UintOptRleEncoder();\n    this.lenEncoder = new UintOptRleEncoder();\n  }\n\n  toUint8Array () {\n    const encoder = createEncoder();\n    writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n    writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n    writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n    writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n    writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n    writeVarUint8Array(encoder, toUint8Array(this.infoEncoder));\n    writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n    writeVarUint8Array(encoder, toUint8Array(this.parentInfoEncoder));\n    writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n    writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());\n    // @note The rest encoder is appended! (note the missing var)\n    writeUint8Array(encoder, toUint8Array(this.restEncoder));\n    return toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client);\n    this.leftClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client);\n    this.rightClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    writeAny(this.restEncoder, embed);\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key);\n    if (clock === undefined) {\n      /**\n       * @todo uncomment to introduce this feature finally\n       *\n       * Background. The ContentFormat object was always encoded using writeKey, but the decoder used to use readString.\n       * Furthermore, I forgot to set the keyclock. So everything was working fine.\n       *\n       * However, this feature here is basically useless as it is not being used (it actually only consumes extra memory).\n       *\n       * I don't know yet how to reintroduce this feature..\n       *\n       * Older clients won't be able to read updates when we reintroduce this feature. So this should probably be done using a flag.\n       *\n       */\n      // this.keyMap.set(key, this.keyClock)\n      this.keyClockEncoder.write(this.keyClock++);\n      this.stringEncoder.write(key);\n    } else {\n      this.keyClockEncoder.write(clock);\n    }\n  }\n}\n\n/**\n * @module encoding\n */\n/*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = max(clock, structs[0].id.clock); // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock);\n  // write # encoded structs\n  writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n  encoder.writeClient(client);\n  writeVarUint(encoder.restEncoder, clock);\n  const firstStruct = structs[startNewStructs];\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nconst writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map();\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n  getStateVector(store).forEach((_clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  });\n  // write # states that were updated\n  writeVarUint(encoder.restEncoder, sm.size);\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    writeStructs(encoder, /** @type {Array<GC|Item>} */ (store.clients.get(client)), client, clock);\n  });\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nconst writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nclass EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = [];\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nconst createEventHandler = () => new EventHandler();\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nconst addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f);\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nconst removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l;\n  const len = l.length;\n  eventHandler.l = l.filter(g => f !== g);\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.');\n  }\n};\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nconst callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  callAll(eventHandler.l, [arg0, arg1]);\n\nclass ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock;\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock);\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nconst createID = (client, clock) => new ID(client, clock);\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nconst findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw unexpectedCase()\n};\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nconst isVisible = (item, snapshot) => snapshot === undefined\n  ? !item.deleted\n  : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nconst splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create$4);\n  const store = transaction.doc.store;\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, _item => {});\n    meta.add(snapshot);\n  }\n};\n\nclass StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map();\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null;\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null;\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nconst getStateVector = store => {\n  const sm = new Map();\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm\n};\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nconst getState = (store, client) => {\n  const structs = store.clients.get(client);\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length\n};\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nconst addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client);\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    const lastStruct = structs[structs.length - 1];\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw unexpectedCase()\n    }\n  }\n  structs.push(struct);\n};\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nconst findIndexSS = (structs, clock) => {\n  let left = 0;\n  let right = structs.length - 1;\n  let mid = structs[right];\n  let midclock = mid.id.clock;\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = floor((clock / (midclock + mid.length - 1)) * right); // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n    midindex = floor((left + right) / 2);\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw unexpectedCase()\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nconst find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nconst getItem = /** @type {function(StructStore,ID):Item} */ (find);\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nconst findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock);\n  const struct = structs[index];\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1\n  }\n  return index\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client));\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  const index = findIndexSS(structs, id.clock);\n  const struct = structs[index];\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n  return struct\n};\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nconst replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client));\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len;\n  let index = findIndexCleanStart(transaction, structs, clockStart);\n  let struct;\n  do {\n    struct = structs[index++];\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n};\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const ydoc = new Y.Doc()\n * const map = ydoc.getMap('map')\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * ydoc.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nclass Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent<any>>,Set<String|null>>}\n     */\n    this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>}\n     */\n    this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = [];\n    /**\n     * @type {any}\n     */\n    this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local;\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set();\n    /**\n     * @type {boolean}\n     */\n    this._needFormattingCleanup = false;\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nconst writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return true\n};\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent<any>>} type\n * @param {string|null} parentSub\n */\nconst addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item;\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    setIfUndefined(transaction.changed, type, create$4).add(parentSub);\n  }\n};\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n * @return {number} # of merged structs\n */\nconst tryToMergeWithLefts = (structs, pos) => {\n  let right = structs[pos];\n  let left = structs[pos - 1];\n  let i = pos;\n  for (; i > 0; right = left, left = structs[--i - 1]) {\n    if (left.deleted === right.deleted && left.constructor === right.constructor) {\n      if (left.mergeWith(right)) {\n        if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n          /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left));\n        }\n        continue\n      }\n    }\n    break\n  }\n  const merged = pos - i;\n  if (merged) {\n    // remove all merged structs from the array\n    structs.splice(pos + 1 - merged, merged);\n  }\n  return merged\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len;\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si];\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false);\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiency and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[si]\n      ) {\n        si -= 1 + tryToMergeWithLefts(structs, si);\n      }\n    }\n  });\n};\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i];\n    const doc = transaction.doc;\n    const store = doc.store;\n    const ds = transaction.deleteSet;\n    const mergeStructs = transaction._mergeStructs;\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      doc.emit('beforeObserverCalls', [transaction, doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = [];\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs);\n          }\n        })\n      );\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) => {\n          // We need to think about the possibility that the user transforms the\n          // Y.Doc in the event.\n          if (type._dEH.l.length > 0 && (type._item === null || !type._item.deleted)) {\n            events = events\n              .filter(event =>\n                event.target._item === null || !event.target._item.deleted\n              );\n            events\n              .forEach(event => {\n                event.currentTarget = type;\n                // path is relative to the current target\n                event._path = null;\n              });\n            // sort events by path length so that top-level events are fired first.\n            events\n              .sort((event1, event2) => event1.path.length - event2.path.length);\n            // We don't need to check for events.length\n            // because we know it has at least one element\n            callEventHandlerListeners(type._dEH, events, transaction);\n          }\n        });\n      });\n      fs.push(() => doc.emit('afterTransaction', [transaction, doc]));\n      callAll(fs, []);\n      if (transaction._needFormattingCleanup) {\n        cleanupYTextAfterTransaction(transaction);\n      }\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter);\n      }\n      tryMergeDeleteSet(ds, store);\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0;\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = max(findIndexSS(structs, beforeClock), 1);\n          for (let i = structs.length - 1; i >= firstChangePos;) {\n            i -= 1 + tryToMergeWithLefts(structs, i);\n          }\n        }\n      });\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = mergeStructs.length - 1; i >= 0; i--) {\n        const { client, clock } = mergeStructs[i].id;\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n        const replacedStructPos = findIndexSS(structs, clock);\n        if (replacedStructPos + 1 < structs.length) {\n          if (tryToMergeWithLefts(structs, replacedStructPos + 1) > 1) {\n            continue // no need to perform next check, both are already merged\n          }\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLefts(structs, replacedStructPos);\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        print(ORANGE, BOLD, '[yjs] ', UNBOLD, RED, 'Changed the client-id because another client seems to be using it.');\n        doc.clientID = generateNewClientId();\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc]);\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;\n      if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {\n        subdocsAdded.forEach(subdoc => {\n          subdoc.clientID = doc.clientID;\n          if (subdoc.collectionid == null) {\n            subdoc.collectionid = doc.collectionid;\n          }\n          doc.subdocs.add(subdoc);\n        });\n        subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc));\n        doc.emit('subdocs', [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc, transaction]);\n        subdocsRemoved.forEach(subdoc => subdoc.destroy());\n      }\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = [];\n        doc.emit('afterAllTransactions', [doc, transactionCleanups]);\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @template T\n * @param {Doc} doc\n * @param {function(Transaction):T} f\n * @param {any} [origin=true]\n * @return {T}\n *\n * @function\n */\nconst transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups;\n  let initialCall = false;\n  /**\n   * @type {any}\n   */\n  let result = null;\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc]);\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n  try {\n    result = f(doc._transaction);\n  } finally {\n    if (initialCall) {\n      const finishCleanup = doc._transaction === transactionCleanups[0];\n      doc._transaction = null;\n      if (finishCleanup) {\n        // The first transaction ended, now process observer calls.\n        // Observer call may create new transactions for which we need to call the observers and do cleanup.\n        // We don't want to nest these calls, so we execute these calls one after\n        // another.\n        // Also we need to ensure that all cleanups are called, even if the\n        // observes throw errors.\n        // This file is full of hacky try {} finally {} blocks to ensure that an\n        // event can throw errors and also that the cleanup is called.\n        cleanupTransactions(transactionCleanups, 0);\n      }\n    }\n  }\n  return result\n};\n\nconst errorComputeChanges = 'You must not compute changes after the event-handler fired.';\n\n/**\n * @template {AbstractType<any>} T\n * YEvent describes the changes on a YType.\n */\nclass YEvent {\n  /**\n   * @param {T} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {T}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null;\n    /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */\n    this._keys = null;\n    /**\n     * @type {null | Array<{ insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */\n    this._delta = null;\n    /**\n     * @type {Array<string|number>|null}\n     */\n    this._path = null;\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    return this._path || (this._path = getPathTo(this.currentTarget, this.target))\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */\n  get keys () {\n    if (this._keys === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw create$3(errorComputeChanges)\n      }\n      const keys = new Map();\n      const target = this.target;\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key));\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action;\n          let oldValue;\n          if (this.adds(item)) {\n            let prev = item.left;\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left;\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete';\n                oldValue = last(prev.content.getContent());\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update';\n                oldValue = last(prev.content.getContent());\n              } else {\n                action = 'add';\n                oldValue = undefined;\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete';\n              oldValue = last(/** @type {Item} */ item.content.getContent());\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue });\n        }\n      });\n      this._keys = keys;\n    }\n    return this._keys\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */\n  get delta () {\n    return this.changes.delta\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * This is a computed property. Note that this can only be safely computed during the\n   * event call. Computing this property after other changes happened might result in\n   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes\n   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.\n   *\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    let changes = this._changes;\n    if (changes === null) {\n      if (this.transaction.doc._transactionCleanups.length === 0) {\n        throw create$3(errorComputeChanges)\n      }\n      const target = this.target;\n      const added = create$4();\n      const deleted = create$4();\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = [];\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys: this.keys\n      };\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null;\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp);\n          }\n        };\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp();\n                lastOp = { delete: 0 };\n              }\n              lastOp.delete += item.length;\n              deleted.add(item);\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp();\n                lastOp = { insert: [] };\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent());\n              added.add(item);\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp();\n                lastOp = { retain: 0 };\n              }\n              lastOp.retain += item.length;\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp();\n        }\n      }\n      this._changes = changes;\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = [];\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      let i = 0;\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start;\n      while (c !== child._item && c !== null) {\n        if (!c.deleted && c.countable) {\n          i += c.length;\n        }\n        c = c.right;\n      }\n      path.unshift(i);\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent);\n  }\n  return path\n};\n\n/**\n * https://docs.yjs.dev/getting-started/working-with-shared-types#caveats\n */\nconst warnPrematureAccess = () => { warn('Invalid access: Add Yjs type to a document before reading data.'); };\n\nconst maxSearchMarker = 80;\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0;\n\nclass ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true;\n    this.p = p;\n    this.index = index;\n    this.timestamp = globalSearchMarkerTimestamp++;\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++; };\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false;\n  marker.p = p;\n  p.marker = true;\n  marker.index = index;\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);\n    overwriteMarker(marker, p, index);\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index);\n    searchMarker.push(pm);\n    return pm\n  }\n};\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nconst findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => abs(index - a.index) < abs(index - b.index) ? a : b);\n  let p = yarray._start;\n  let pindex = 0;\n  if (marker !== null) {\n    p = marker.p;\n    pindex = marker.index;\n    refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length;\n    }\n    p = p.right;\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengths == null) {\n  //     window.lengths = []\n  //     window.getLengths = () => window.lengths.sort((a, b) => a - b)\n  //   }\n  //   window.lengths.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex);\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n};\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nconst updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i];\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p;\n      p.marker = false;\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left;\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length;\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1);\n        continue\n      }\n      m.p = p;\n      p.marker = true;\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = max(index, m.index + len);\n    }\n  }\n};\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nconst callTypeObservers = (type, transaction, event) => {\n  const changedType = type;\n  const changedParentTypes = transaction.changedParentTypes;\n  while (true) {\n    // @ts-ignore\n    setIfUndefined(changedParentTypes, type, () => []).push(event);\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent);\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nclass AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent<any>>,Transaction>}\n     */\n    this._dEH = createEventHandler();\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null;\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y;\n    this._item = item;\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   */\n  _write (_encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, _parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0;\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListSlice = (type, start, end) => {\n  type.doc ?? warnPrematureAccess();\n  if (start < 0) {\n    start = type._length + start;\n  }\n  if (end < 0) {\n    end = type._length + end;\n  }\n  let len = end - start;\n  const cs = [];\n  let n = type._start;\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      if (c.length <= start) {\n        start -= c.length;\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i]);\n          len--;\n        }\n        start = 0;\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArray = type => {\n  type.doc ?? warnPrematureAccess();\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * Executes a provided function on once on every element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nconst typeListForEach = (type, f) => {\n  let index = 0;\n  let n = type._start;\n  type.doc ?? warnPrematureAccess();\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n    n = n.right;\n  }\n};\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nconst typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = [];\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type));\n  });\n  return result\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nconst typeListCreateIterator = type => {\n  let n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null;\n  let currentContentIndex = 0;\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right;\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent();\n        currentContentIndex = 0;\n        n = n.right; // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++];\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null;\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nconst typeListGet = (type, index) => {\n  type.doc ?? warnPrematureAccess();\n  const marker = findMarker(type, index);\n  let n = type._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length;\n    }\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const store = doc.store;\n  const right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number|null>}\n   */\n  let jsonContent = [];\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n  content.forEach(c => {\n    if (c === null) {\n      jsonContent.push(c);\n    } else {\n      switch (c.constructor) {\n        case Number:\n        case Object:\n        case Boolean:\n        case Array:\n        case String:\n          jsonContent.push(c);\n          break\n        default:\n          packJsonContent();\n          switch (c.constructor) {\n            case Uint8Array:\n            case ArrayBuffer:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))));\n              left.integrate(transaction, 0);\n              break\n            case Doc:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)));\n              left.integrate(transaction, 0);\n              break\n            default:\n              if (c instanceof AbstractType) {\n                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n                left.integrate(transaction, 0);\n              } else {\n                throw new Error('Unexpected content type in insert operation')\n              }\n          }\n      }\n    }\n  });\n  packJsonContent();\n};\n\nconst lengthExceeded = () => create$3('Length exceeded!');\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index > parent._length) {\n    throw lengthExceeded()\n  }\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length);\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0;\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n        break\n      }\n      index -= n.length;\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * Pushing content is special as we generally want to push after the last item. So we don't have to update\n * the search marker.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListPushGenerics = (transaction, parent, content) => {\n  // Use the marker with the highest index and iterate to the right.\n  const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });\n  let n = marker.p;\n  if (n) {\n    while (n.right) {\n      n = n.right;\n    }\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nconst typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index;\n  const startLength = length;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n      index -= n.length;\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n      n.delete(transaction);\n      length -= n.length;\n    }\n    n = n.right;\n  }\n  if (length > 0) {\n    throw lengthExceeded()\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nconst typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key);\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nconst typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  let content;\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n      case Date:\n      case BigInt:\n        content = new ContentAny([value]);\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value));\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value));\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGet = (parent, key) => {\n  parent.doc ?? warnPrematureAccess();\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent.doc ?? warnPrematureAccess();\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst typeMapHas = (parent, key) => {\n  parent.doc ?? warnPrematureAccess();\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {Snapshot} snapshot\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAllSnapshot = (parent, snapshot) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent._map.forEach((value, key) => {\n    /**\n     * @type {Item|null}\n     */\n    let v = value;\n    while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n      v = v.left;\n    }\n    if (v !== null && isVisible(v, snapshot)) {\n      res[key] = v.content.getContent()[v.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any> & { _map: Map<string, Item> }} type\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nconst createMapIterator = type => {\n  type.doc ?? warnPrematureAccess();\n  return iteratorFilter(type._map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n};\n\n/**\n * @module YArray\n */\n\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n * @extends YEvent<YArray<T>>\n */\nclass YArrayEvent extends YEvent {}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nclass YArray extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    /**\n     * @type {YArray<T>}\n     */\n    const a = new YArray();\n    a.push(items);\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YArray<T>}\n   */\n  clone () {\n    /**\n     * @type {YArray<T>}\n     */\n    const arr = new YArray();\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el\n    ));\n    return arr\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   *\n   * @todo Use the following implementation in all types.\n   */\n  push (content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListPushGenerics(transaction, this, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).push(...content);\n    }\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length);\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Returns a portion of this YArray into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function once on every element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID);\n  }\n}\n\n/**\n * @module YMap\n */\n\n\n/**\n * @template T\n * @extends YEvent<YMap<T>>\n * Event that describes the changes on a YMap.\n */\nclass YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction);\n    this.keysChanged = subs;\n  }\n}\n\n/**\n * @template MapType\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<MapType>>\n * @implements {Iterable<[string, MapType]>}\n */\nclass YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super();\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null;\n\n    if (entries === undefined) {\n      this._prelimContent = new Map();\n    } else {\n      this._prelimContent = new Map(entries);\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value);\n    });\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YMap<MapType>}\n   */\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YMap<MapType>}\n   */\n  clone () {\n    /**\n     * @type {YMap<MapType>}\n     */\n    const map = new YMap();\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? /** @type {typeof value} */ (value.clone()) : value);\n    });\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,any>}\n   */\n  toJSON () {\n    this.doc ?? warnPrematureAccess();\n    /**\n     * @type {Object<string,MapType>}\n     */\n    const map = {};\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1];\n        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n      }\n    });\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<MapType>}\n   */\n  values () {\n    return iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  entries () {\n    return iteratorMap(createMapIterator(this), /** @param {any} v */ v => /** @type {any} */ ([v[0], v[1].content.getContent()[v[1].length - 1]]))\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    this.doc ?? warnPrematureAccess();\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this);\n      }\n    });\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<[string, MapType]>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key);\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   * @template {MapType} VAL\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {VAL} value The value of the element to add\n   * @return {VAL}\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, /** @type {any} */ (value));\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value);\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {MapType|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * Removes all elements from this YMap.\n   */\n  clear () {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        this.forEach(function (_value, key, map) {\n          typeMapDelete(transaction, map, key);\n        });\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).clear();\n    }\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID);\n  }\n}\n\n/**\n * @module YText\n */\n\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && equalFlat(a, b));\n\nclass ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left;\n    this.right = right;\n    this.index = index;\n    this.currentAttributes = currentAttributes;\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      unexpectedCase();\n    }\n    switch (this.right.content.constructor) {\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content));\n        }\n        break\n      default:\n        if (!this.right.deleted) {\n          this.index += this.right.length;\n        }\n        break\n    }\n    this.left = this.right;\n    this.right = this.right.right;\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content));\n        }\n        break\n      default:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n          }\n          pos.index += pos.right.length;\n          count -= pos.right.length;\n        }\n        break\n    }\n    pos.left = pos.right;\n    pos.right = pos.right.right;\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {boolean} useSearchMarker\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index, useSearchMarker) => {\n  const currentAttributes = new Map();\n  const marker = useSearchMarker ? findMarker(parent, index) : null;\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n    return findNextPosition(transaction, pos, index)\n  }\n};\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key);\n    }\n    currPos.forward();\n  }\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  negatedAttributes.forEach((val, key) => {\n    const left = currPos.left;\n    const right = currPos.right;\n    const nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    nextFormat.integrate(transaction, 0);\n    currPos.right = nextFormat;\n    currPos.forward();\n  });\n};\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format;\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] ?? null, /** @type {ContentFormat} */ (currPos.right.content).value))) ; else {\n      break\n    }\n    currPos.forward();\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const negatedAttributes = new Map();\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key];\n    const currentVal = currPos.currentAttributes.get(key) ?? null;\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      const { left, right } = currPos;\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.right.integrate(transaction, 0);\n      currPos.forward();\n    }\n  }\n  return negatedAttributes\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object|AbstractType<any>} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((_val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  });\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : (text instanceof AbstractType ? new ContentType(text) : new ContentEmbed(text));\n  let { left, right, index } = currPos;\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  right.integrate(transaction, 0);\n  currPos.right = right;\n  currPos.index = index;\n  currPos.forward();\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  // also check the attributes after the first non-format as we do not want to insert redundant negated attributes there\n  // eslint-disable-next-line no-labels\n  iterationLoop: while (\n    currPos.right !== null &&\n    (length > 0 ||\n      (\n        negatedAttributes.size > 0 &&\n        (currPos.right.deleted || currPos.right.content.constructor === ContentFormat)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content);\n          const attr = attributes[key];\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key);\n            } else {\n              if (length === 0) {\n                // no need to further extend negatedAttributes\n                // eslint-disable-next-line no-labels\n                break iterationLoop\n              }\n              negatedAttributes.set(key, value);\n            }\n            currPos.right.delete(transaction);\n          } else {\n            currPos.currentAttributes.set(key, value);\n          }\n          break\n        }\n        default:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          break\n      }\n    }\n    currPos.forward();\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = '';\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n    currPos.right.integrate(transaction, 0);\n    currPos.forward();\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} curr exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} currAttributes\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, curr, startAttributes, currAttributes) => {\n  /**\n   * @type {Item|null}\n   */\n  let end = start;\n  /**\n   * @type {Map<string,ContentFormat>}\n   */\n  const endFormats = create$5();\n  while (end && (!end.countable || end.deleted)) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      const cf = /** @type {ContentFormat} */ (end.content);\n      endFormats.set(cf.key, cf);\n    }\n    end = end.right;\n  }\n  let cleanups = 0;\n  let reachedCurr = false;\n  while (start !== end) {\n    if (curr === start) {\n      reachedCurr = true;\n    }\n    if (!start.deleted) {\n      const content = start.content;\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content);\n          const startAttrValue = startAttributes.get(key) ?? null;\n          if (endFormats.get(key) !== content || startAttrValue === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction);\n            cleanups++;\n            if (!reachedCurr && (currAttributes.get(key) ?? null) === value && startAttrValue !== value) {\n              if (startAttrValue === null) {\n                currAttributes.delete(key);\n              } else {\n                currAttributes.set(key, startAttrValue);\n              }\n            }\n          }\n          if (!reachedCurr && !start.deleted) {\n            updateCurrentAttributes(currAttributes, /** @type {ContentFormat} */ (content));\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right);\n  }\n  return cleanups\n};\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || !item.right.countable)) {\n    item = item.right;\n  }\n  const attrs = new Set();\n  // iterate back until a content item is found\n  while (item && (item.deleted || !item.countable)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key;\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n    item = item.left;\n  }\n};\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nconst cleanupYTextFormatting = type => {\n  let res = 0;\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start);\n    let end = type._start;\n    let startAttributes = create$5();\n    const currentAttributes = copy(startAttributes);\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content));\n            break\n          default:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = copy(currentAttributes);\n            start = end;\n            break\n        }\n      }\n      end = end.right;\n    }\n  });\n  return res\n};\n\n/**\n * This will be called by the transaction once the event handlers are called to potentially cleanup\n * formatting attributes.\n *\n * @param {Transaction} transaction\n */\nconst cleanupYTextAfterTransaction = transaction => {\n  /**\n   * @type {Set<YText>}\n   */\n  const needFullCleanup = new Set();\n  // check if another formatting item was inserted\n  const doc = transaction.doc;\n  for (const [client, afterClock] of transaction.afterState.entries()) {\n    const clock = transaction.beforeState.get(client) || 0;\n    if (afterClock === clock) {\n      continue\n    }\n    iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n      if (\n        !item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat && item.constructor !== GC\n      ) {\n        needFullCleanup.add(/** @type {any} */ (item).parent);\n      }\n    });\n  }\n  // cleanup in a new transaction\n  transact(doc, (t) => {\n    iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n      if (item instanceof GC || !(/** @type {YText} */ (item.parent)._hasFormatting) || needFullCleanup.has(/** @type {YText} */ (item.parent))) {\n        return\n      }\n      const parent = /** @type {YText} */ (item.parent);\n      if (item.content.constructor === ContentFormat) {\n        needFullCleanup.add(parent);\n      } else {\n        // If no formatting attribute was inserted or deleted, we can make due with contextless\n        // formatting cleanups.\n        // Contextless: it is not necessary to compute currentAttributes for the affected position.\n        cleanupContextlessFormattingGap(t, item);\n      }\n    });\n    // If a formatting item was inserted, we simply clean the whole type.\n    // We need to compute currentAttributes for the current position anyway.\n    for (const yText of needFullCleanup) {\n      cleanupYTextFormatting(yText);\n    }\n  });\n};\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length;\n  const startAttrs = copy(currPos.currentAttributes);\n  const start = currPos.right;\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentType:\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          currPos.right.delete(transaction);\n          break\n      }\n    }\n    currPos.forward();\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes);\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent);\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n  }\n  return currPos\n};\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For more information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @extends YEvent<YText>\n * Event that describes the changes on a YText type.\n */\nclass YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.keysChanged.add(sub);\n      }\n    });\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    if (this._changes === null) {\n      /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string|AbstractType<any>|object, delete?:number, retain?:number}>}}\n       */\n      const changes = {\n        keys: this.keys,\n        delta: this.delta,\n        added: new Set(),\n        deleted: new Set()\n      };\n      this._changes = changes;\n    }\n    return /** @type {any} */ (this._changes)\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc);\n      /**\n       * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */\n      const delta = [];\n      transact(y, transaction => {\n        const currentAttributes = new Map(); // saves all current attributes for insert\n        const oldAttributes = new Map();\n        let item = this.target._start;\n        /**\n         * @type {string?}\n         */\n        let action = null;\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}; // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = '';\n        let retain = 0;\n        let deleteLen = 0;\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op = null;\n            switch (action) {\n              case 'delete':\n                if (deleteLen > 0) {\n                  op = { delete: deleteLen };\n                }\n                deleteLen = 0;\n                break\n              case 'insert':\n                if (typeof insert === 'object' || insert.length > 0) {\n                  op = { insert };\n                  if (currentAttributes.size > 0) {\n                    op.attributes = {};\n                    currentAttributes.forEach((value, key) => {\n                      if (value !== null) {\n                        op.attributes[key] = value;\n                      }\n                    });\n                  }\n                }\n                insert = '';\n                break\n              case 'retain':\n                if (retain > 0) {\n                  op = { retain };\n                  if (!isEmpty(attributes)) {\n                    op.attributes = assign({}, attributes);\n                  }\n                }\n                retain = 0;\n                break\n            }\n            if (op) delta.push(op);\n            action = null;\n          }\n        };\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentType:\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp();\n                  action = 'insert';\n                  insert = item.content.getContent()[0];\n                  addOp();\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += 1;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += 1;\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp();\n                    action = 'insert';\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str;\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += item.length;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += item.length;\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content);\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) ?? null;\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) ?? null))) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (value !== null) {\n                    item.delete(transaction);\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value);\n                const curVal = currentAttributes.get(key) ?? null;\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp();\n                  }\n                  attributes[key] = curVal;\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value);\n                const attr = attributes[key];\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (value === null) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (attr !== null) { // this will be cleaned up automatically by the contextless cleanup function\n                    item.delete(transaction);\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp();\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content));\n              }\n              break\n            }\n          }\n          item = item.right;\n        }\n        addOp();\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1];\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop();\n          } else {\n            break\n          }\n        }\n      });\n      this._delta = delta;\n    }\n    return /** @type {any} */ (this._delta)\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nclass YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super();\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : [];\n    /**\n     * @type {Array<ArraySearchMarker>|null}\n     */\n    this._searchMarker = [];\n    /**\n     * Whether this YText contains formatting attributes.\n     * This flag is updated when a formatting item is integrated (see ContentFormat.integrate)\n     */\n    this._hasFormatting = false;\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f());\n    } catch (e) {\n      console.error(e);\n    }\n    this._pending = null;\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    const event = new YTextEvent(this, transaction, parentSubs);\n    callTypeObservers(this, transaction, event);\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local && this._hasFormatting) {\n      transaction._needFormattingCleanup = true;\n    }\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    this.doc ?? warnPrematureAccess();\n    let str = '';\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start;\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str;\n      }\n      n = n.right;\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {Array<any>} delta The changes to apply on this element.\n   * @param {object}  opts\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map());\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i];\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert;\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {});\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {});\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete);\n          }\n        }\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta));\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    this.doc ?? warnPrematureAccess();\n    /**\n     * @type{Array<any>}\n     */\n    const ops = [];\n    const currentAttributes = new Map();\n    const doc = /** @type {Doc} */ (this.doc);\n    let str = '';\n    let n = this._start;\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {};\n        let addAttributes = false;\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true;\n          attributes[key] = value;\n        });\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str };\n        if (addAttributes) {\n          op.attributes = attributes;\n        }\n        ops.push(op);\n        str = '';\n      }\n    }\n    const computeDelta = () => {\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange');\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'removed') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' });\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'added') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' });\n                }\n              } else if (cur !== undefined) {\n                packStr();\n                currentAttributes.delete('ychange');\n              }\n              str += /** @type {ContentString} */ (n.content).str;\n              break\n            }\n            case ContentType:\n            case ContentEmbed: {\n              packStr();\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: n.content.getContent()[0]\n              };\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({});\n                op.attributes = attrs;\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value;\n                });\n              }\n              ops.push(op);\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr();\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content));\n              }\n              break\n          }\n        }\n        n = n.right;\n      }\n      packStr();\n    };\n    if (snapshot || prevSnapshot) {\n      // snapshots are merged again after the transaction, so we need to keep the\n      // transaction alive until we are done\n      transact(doc, transaction => {\n        if (snapshot) {\n          splitSnapshotAffectedStructs(transaction, snapshot);\n        }\n        if (prevSnapshot) {\n          splitSnapshotAffectedStructs(transaction, prevSnapshot);\n        }\n        computeDelta();\n      }, 'cleanup');\n    } else {\n      computeDelta();\n    }\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes);\n        if (!attributes) {\n          attributes = {};\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v; });\n        }\n        insertText(transaction, this, pos, text, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes));\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object | AbstractType<any>} embed The Object that represents the embed.\n   * @param {TextAttributes} [attributes] Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes) {\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, !attributes);\n        insertText(transaction, this, pos, embed, attributes || {});\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes || {}));\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index, true), length);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length));\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index, false);\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes));\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName));\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue));\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes () {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID);\n  }\n}\n\n/**\n * @module YXml\n */\n\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nclass YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start);\n    this._firstCall = true;\n    root.doc ?? warnPrematureAccess();\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode;\n    let type = n && n.content && /** @type {any} */ (n.content).type;\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type;\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start;\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            /**\n             * @type {Item | null}\n             */\n            const nxt = n.next;\n            if (nxt !== null) {\n              n = nxt;\n              break\n            } else if (n.parent === this._root) {\n              n = null;\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item;\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false;\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n;\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nclass YXmlFragment extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = [];\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first;\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment();\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  get length () {\n    this.doc ?? warnPrematureAccess();\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query);\n    const next = iterator.next();\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    return from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment();\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this);\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n    });\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref;\n        typeListInsertGenericsAfter(transaction, this, refItem, content);\n      });\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent);\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1;\n      if (index === 0 && ref !== null) {\n        throw create$3('Reference item not found')\n      }\n      pc.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length);\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content);\n  }\n\n  /**\n   * Prepends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to prepend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Returns a portion of this YXmlFragment into a JavaScript Array selected\n   * from start to end (end not included).\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Executes a provided function on once on every child element.\n   *\n   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID);\n  }\n}\n\n/**\n * @typedef {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} ValueTypes\n */\n\n/**\n * An YXmlElement imitates the behavior of a\n * https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n *\n * @template {{ [key: string]: ValueTypes }} [KV={ [key: string]: string }]\n */\nclass YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super();\n    this.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map();\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value);\n    });\n    this._prelimAttrs = null;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * Makes a copy of this data type that can be included somewhere else.\n   *\n   * Note that the content is only readable _after_ it has been included somewhere in the Ydoc.\n   *\n   * @return {YXmlElement<KV>}\n   */\n  clone () {\n    /**\n     * @type {YXmlElement<KV>}\n     */\n    const el = new YXmlElement(this.nodeName);\n    const attrs = this.getAttributes();\n    forEach(attrs, (value, key) => {\n      if (typeof value === 'string') {\n        el.setAttribute(key, value);\n      }\n    });\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes();\n    const stringBuilder = [];\n    const keys = [];\n    for (const key in attrs) {\n      keys.push(key);\n    }\n    keys.sort();\n    const keysLen = keys.length;\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i];\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"');\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase();\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {string} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName);\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that is to be set.\n   * @param {KV[KEY]} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue);\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @template {keyof KV & string} KEY\n   *\n   * @param {KEY} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {KV[KEY]|undefined} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns whether an attribute exists\n   *\n   * @param {string} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */\n  hasAttribute (attributeName) {\n    return /** @type {any} */ (typeMapHas(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return /** @type {any} */ (snapshot ? typeMapGetAllSnapshot(this, snapshot) : typeMapGetAll(this))\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      const value = attrs[key];\n      if (typeof value === 'string') {\n        dom.setAttribute(key, value);\n      }\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding));\n    });\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID);\n    encoder.writeKey(this.nodeName);\n  }\n}\n\n/**\n * @extends YEvent<YXmlElement|YXmlText|YXmlFragment>\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nclass YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with which the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.attributesChanged.add(sub);\n      }\n    });\n  }\n}\n\nclass AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id;\n    this.length = length;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} whether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw methodUnimplemented()\n  }\n}\n\nconst structGCRefNumber = 0;\n\n/**\n * @private\n */\nclass GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.length -= offset;\n    }\n    addStruct(transaction.doc.store, this);\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber);\n    encoder.writeLen(this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\nclass ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\nclass ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset);\n    this.len = offset;\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n    item.markDeleted();\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @param {string} guid\n * @param {Object<string, any>} opts\n */\nconst createDocFromOpts = (guid, opts) => new Doc({ guid, ...opts, shouldLoad: opts.shouldLoad || opts.autoLoad || false });\n\n/**\n * @private\n */\nclass ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.');\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * @type {any}\n     */\n    const opts = {};\n    this.opts = opts;\n    if (!doc.gc) {\n      opts.gc = false;\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true;\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta;\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts))\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item;\n    transaction.subdocsAdded.add(this.doc);\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc);\n    } else {\n      transaction.subdocsRemoved.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid);\n    encoder.writeAny(this.opts);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n */\nclass ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n */\nclass ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} _offset\n   * @return {ContentFormat}\n   */\n  splice (_offset) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} _right\n   * @return {boolean}\n   */\n  mergeWith (_right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} _transaction\n   * @param {Item} item\n   */\n  integrate (_transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    const p = /** @type {YText} */ (item.parent);\n    p._searchMarker = null;\n    p._hasFormatting = true;\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key);\n    encoder.writeJSON(this.value);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\nconst isDevMode = getVariable('node_env') === 'development';\n\nclass ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n    isDevMode && deepFreeze(arr);\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeAny(c);\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @private\n */\nclass ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset));\n    this.str = this.str.slice(0, offset);\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1);\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�';\n      // replace right as well\n      right.str = '�' + right.str.slice(1);\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\nconst YArrayRefID = 0;\nconst YMapRefID = 1;\nconst YTextRefID = 2;\nconst YXmlElementRefID = 3;\nconst YXmlFragmentRefID = 4;\n\n/**\n * @private\n */\nclass ContentType {\n  /**\n   * @param {AbstractType<any>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start;\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // This will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item);\n      }\n      item = item.right;\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {\n        // same as above\n        transaction._mergeStructs.push(item);\n      }\n    });\n    transaction.changed.delete(this.type);\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start;\n    while (item !== null) {\n      item.gc(store, true);\n      item = item.right;\n    }\n    this.type._start = null;\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.left;\n      }\n    });\n    this.type._map = new Map();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nconst splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id;\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  );\n  if (leftItem.deleted) {\n    rightItem.markDeleted();\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem;\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem);\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem);\n  }\n  leftItem.length = diff;\n  return rightItem\n};\n\n/**\n * Abstract class that represents any content.\n */\nclass Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub;\n    /**\n     * If this type's effect is redone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? BIT2 : 0;\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & BIT4) > 0) !== isMarked) {\n      this.info ^= BIT4;\n    }\n  }\n\n  get marker () {\n    return (this.info & BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= BIT1;\n    }\n  }\n\n  get countable () {\n    return (this.info & BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= BIT3;\n    }\n  }\n\n  markDeleted () {\n    this.info |= BIT3;\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin);\n      this.origin = this.left.lastId;\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin);\n      this.rightOrigin = this.right.id;\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null;\n    } else if (!this.parent) {\n      // only set parent if this shouldn't be garbage collected\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent;\n        this.parentSub = this.left.parentSub;\n      } else if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent;\n        this.parentSub = this.right.parentSub;\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent);\n      if (parentItem.constructor === GC) {\n        this.parent = null;\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type;\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n      this.origin = this.left.lastId;\n      this.content = this.content.splice(offset);\n      this.length -= offset;\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left;\n\n        /**\n         * @type {Item|null}\n         */\n        let o;\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right;\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (o !== null && o.left !== null) {\n            o = o.left;\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start;\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set();\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set();\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o);\n          conflictingItems.add(o);\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o;\n              conflictingItems.clear();\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o;\n              conflictingItems.clear();\n            }\n          } else {\n            break\n          }\n          o = o.right;\n        }\n        this.left = left;\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right;\n        this.right = right;\n        this.left.right = this;\n      } else {\n        let r;\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (r !== null && r.left !== null) {\n            r = r.left;\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this;\n        }\n        this.right = r;\n      }\n      if (this.right !== null) {\n        this.right.left = this;\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this);\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction);\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length;\n      }\n      addStruct(transaction.doc.store, this);\n      this.content.integrate(transaction, this);\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub);\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction);\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0);\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left;\n    while (n !== null && n.deleted) {\n      n = n.left;\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      const searchMarker = /** @type {AbstractType<any>} */ (this.parent)._searchMarker;\n      if (searchMarker) {\n        searchMarker.forEach(marker => {\n          if (marker.p === right) {\n            // right is going to be \"forgotten\" so we need to update the marker\n            marker.p = this;\n            // adjust marker index\n            if (!this.deleted && this.countable) {\n              marker.index -= this.length;\n            }\n          }\n        });\n      }\n      if (right.keep) {\n        this.keep = true;\n      }\n      this.right = right.right;\n      if (this.right !== null) {\n        this.right.left = this;\n      }\n      this.length += right.length;\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length;\n      }\n      this.markDeleted();\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n      addChangedTypeToTransaction(transaction, parent, this.parentSub);\n      this.content.delete(transaction);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw unexpectedCase()\n    }\n    this.content.gc(store);\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length));\n    } else {\n      this.content = new ContentDeleted(this.length);\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parentSub = this.parentSub;\n    const info = (this.content.getRef() & BITS5) |\n      (origin === null ? 0 : BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : BIT7) | // right origin is defined\n      (parentSub === null ? 0 : BIT6); // parentSub is non-null\n    encoder.writeInfo(info);\n    if (origin !== null) {\n      encoder.writeLeftID(origin);\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin);\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      if (parent._item !== undefined) {\n        const parentItem = parent._item;\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent);\n          encoder.writeParentInfo(true); // write parentYKey\n          encoder.writeString(ykey);\n        } else {\n          encoder.writeParentInfo(false); // write parent id\n          encoder.writeLeftID(parentItem.id);\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true); // write parentYKey\n        encoder.writeString(parent);\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false); // write parent id\n        encoder.writeLeftID(parent);\n      } else {\n        unexpectedCase();\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub);\n      }\n    }\n    this.content.write(encoder, offset);\n  }\n}\n\n/** eslint-env browser */\n\n\nconst glo = /** @type {any} */ (typeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof window !== 'undefined'\n    ? window\n    // @ts-ignore\n    : typeof global !== 'undefined' ? global : {});\n\nconst importIdentifier = '__ $YJS$ __';\n\nif (glo[importIdentifier] === true) {\n  /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of Yjs. In many cases,\n   * your package manager installs two versions of Yjs that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the commonjs version of Yjs\n   * and others use the EcmaScript version of Yjs.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `struct instanceof GC`. If you imported different versions of Yjs, it is impossible for us to\n   * do the constructor checks anymore - which might break the CRDT algorithm.\n   *\n   * https://github.com/yjs/yjs/issues/438\n   */\n  console.error('Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438');\n}\nglo[importIdentifier] = true;\n\n/**\n * @function createYMap\n * @static\n * @description Creates a YMap and populates it with key-value pairs from a plain object.\n * @param {object} data - The initial data to populate the YMap with.\n * @returns {YMap} A new YMap instance.\n */\nfunction createYMap(data) {\n    const map = new YMap();\n    for (const [key, value] of Object.entries(data))\n        map.set(key, value);\n    return map;\n}\n/**\n * @function createYArray\n * @static\n * @template DataType - The type of the array's content.\n * @description Creates a YArray and populates it with elements from a plain array.\n * @param {DataType[]} data - The array of data to populate the YArray with.\n * @returns {YArray} A new YArray instance.\n */\nfunction createYArray(data) {\n    const array = new YArray();\n    array.push(data);\n    return array;\n}\n/**\n * @function addInYMap\n * @static\n * @async\n * @description Adds the provided data in the provided parent in the Yjs document, with a unique ID as its field name.\n * @param {object} data - The data to append to the Yjs document.\n * @param {YMap} parentYMap - The YMap to add the data to.\n * @param {string} [id] - Optional ID to use. If not provided, a unique ID is generated.\n * @returns {Promise<string>} The ID of the inserted data.\n */\nasync function addInYMap(data, parentYMap, id) {\n    const generateId = async () => await hashBySize(parentYMap?.doc?.clientID?.toString(32) + randomId());\n    if (!id) {\n        id = await generateId();\n        while (parentYMap?.get(id) !== undefined)\n            id = await generateId();\n    }\n    parentYMap.set(id, data);\n    return id;\n}\n/**\n * @function addInYArray\n * @static\n * @description Adds the provided data in the provided parent array in the Yjs document.\n * @param {object} data - The data to append to the Yjs document.\n * @param {YArray} parentYArray - The YArray to which the data should be appended.\n * @param {number} [index] - The index to insert the data at. If omitted or invalid, it is appended at the end.\n * @returns {number} The index where the data was inserted.\n */\nfunction addInYArray(data, parentYArray, index) {\n    if (index == undefined || index > parentYArray.length) {\n        index = parentYArray.length;\n        parentYArray.push([data]);\n    }\n    else {\n        if (index < 0)\n            index = 0;\n        parentYArray.insert(index, [data]);\n    }\n    return index;\n}\n/**\n * @function removeFromYArray\n * @static\n * @description Removes the first occurrence of the given entry from the YArray.\n * @param {unknown} entry - The entry to remove.\n * @param {YArray} parentYArray - The parent YArray.\n * @returns {boolean} True if removed, false otherwise.\n */\nfunction removeFromYArray(entry, parentYArray) {\n    for (const [index, child] of parentYArray.toArray()) {\n        if (entry != child)\n            continue;\n        parentYArray.delete(index);\n        return true;\n    }\n    return false;\n}\n/**\n * @function deepObserveAny\n * @static\n * @description Observes deeply for changes to any of the specified fields and invokes callback when any field\n * changes.\n * @param {YAbstractType} data - The Yjs type to observe.\n * @param {(fieldChanged: string, event: YEvent, target: YAbstractType) => void} callback - The function to call\n * when a matching field changes.\n * @param {...string} fieldNames - List of field names to observe.\n */\nfunction deepObserveAny(data, callback, ...fieldNames) {\n    if (!data)\n        return;\n    const fields = new Set(fieldNames);\n    data.observeDeep((events) => {\n        for (const event of events) {\n            const target = event.target;\n            const parentMap = target._item?.parent;\n            const key = target._item?.parentSub;\n            for (const field of fields) {\n                if ((event instanceof YMapEvent && event.changes.keys.has(field)) ||\n                    (event instanceof YArrayEvent && parentMap instanceof YMap && key === field) ||\n                    (event.path?.some(segment => segment === field))) {\n                    callback(field, event, target);\n                    return;\n                }\n            }\n        }\n    });\n}\n/**\n * @function deepObserveAll\n * @static\n * @description Observes deeply for changes to all specified fields and invokes callback only when all fields\n * have changed.\n * @param {YAbstractType} data - The Yjs type to observe.\n * @param {(event: YEvent, target: YAbstractType) => void} callback - The function to call when all fields change.\n * @param {...string} fieldNames - List of field names to observe.\n */\nfunction deepObserveAll(data, callback, ...fieldNames) {\n    if (!data)\n        return;\n    const fields = new Set(fieldNames);\n    data.observeDeep(events => {\n        const changedFields = new Set();\n        for (const event of events) {\n            const target = event.target;\n            const parentMap = target._item?.parent;\n            const key = target._item?.parentSub;\n            for (const field of fields) {\n                if ((event instanceof YMapEvent && event.changes.keys.has(field)) ||\n                    (event instanceof YArrayEvent && parentMap instanceof YMap && key === field) ||\n                    (event.path?.some(segment => segment === field)))\n                    changedFields.add(field);\n            }\n            if (changedFields.size === fields.size) {\n                callback(event, target);\n                return;\n            }\n        }\n    });\n}\n\nexport { $, AccessLevel, ActionMode, BasicInputEvents, ClickMode, ClosestOrigin, DefaultClickEventName, DefaultDragEventName, DefaultEventName, DefaultKeyEventName, DefaultMoveEventName, DefaultWheelEventName, Delegate, Direction, InOut, InputDevice, MathMLNamespace, MathMLTags, Mvc, NonPassiveEvents, OnOff, Open, Point, PopupFallbackMode, Range, Reifect, ReifectHandler, Shown, Side, SideH, SideV, StatefulReifect, SvgNamespace, SvgTags, TurboBaseElement, TurboButton, TurboClickEventName, TurboController, TurboDragEvent, TurboDragEventName, TurboDrawer, TurboDropdown, TurboElement, TurboEmitter, TurboEvent, TurboEventManager, TurboEventName, TurboHandler, TurboHeadlessElement, TurboIcon, TurboIconSwitch, TurboIconToggle, TurboInput, TurboInteractor, TurboKeyEvent, TurboKeyEventName, TurboMap, TurboMarkingMenu, TurboModel, TurboMoveEventName, TurboNumericalInput, TurboPopup, TurboProxiedElement, TurboRichElement, TurboSelect, TurboSelectInputEvent, TurboSelectWheel, TurboSelector, TurboSubstrate, TurboTool, TurboView, TurboWeakSet, TurboWheelEvent, TurboWheelEventName, AbstractType as YAbstractType, YArray, YArrayEvent, Doc as YDoc, YEvent, YMap, YMapEvent, YText, a, addInYArray, addInYMap, areEqual, auto, bestOverlayColor, blindElement, button, cache, callOnce, callOncePerInstance, camelToKebabCase, canvas, clearCache, clearCacheEntry, contrast, controller, createProxy, createYArray, createYMap, css, deepObserveAll, deepObserveAny, define, disposeEffect, disposeEffects, div, drawer, dropdown, eachEqualToAny, effect, element, equalToAny, expose, fetchSvg, flexCol, flexColCenter, flexRow, flexRowCenter, form, generateTagFunction, getEventPosition, getFileExtension, getFirstDescriptorInChain, getFirstPrototypeInChainWith, getSignal, getSuperMethod, h1, h2, h3, h4, h5, h6, handler, hasPropertyInChain, hashBySize, hashString, icon, iconSwitch, iconToggle, img, initializeEffects, input, interactor, isMathMLTag, isNull, isSvgTag, isUndefined, kebabToCamelCase, linearInterpolation, link, loadLocalFont, luminance, markDirty, mod, modelSignal, numericalInput, observe, p, parse, popup, randomColor, randomFromRange, randomId, randomString, reifect, removeFromYArray, richElement, setSignal, setupClassFunctions, setupElementFunctions, setupEventFunctions, setupHierarchyFunctions, setupMiscFunctions, setupReifectFunctions, setupStyleFunctions, setupSubstrateFunctions, setupToolFunctions, signal, solver, spacer, span, statefulReifier, stringify, style, stylesheet, substrate, t, textToElement, textarea, tool, trim, tu, turbo, turboInput, turbofy, video };\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:root {\r\n    --bg: #01163b;\r\n    --bg-gradient: linear-gradient(51deg, #01163b 0%, #440a61 50%, #4d0527 100%);\r\n    --surface: rgba(255, 255, 255, 0.07);\r\n    --surface-2: rgba(255, 255, 255, 0.03);\r\n    --border: rgba(255, 255, 255, 0.14);\r\n\r\n    --font-family: \"Roboto\";\r\n    --text: rgba(220, 232, 255, 0.9);\r\n    --text-2: rgba(234, 242, 255, 0.8);\r\n    --text-muted: rgba(212, 224, 244, 0.6);\r\n\r\n    --accent: #ff6bd6;\r\n    --accent-2: #5ee7ff;\r\n    --accent-contrast: #0b0f1e;\r\n\r\n    --shadow-1: 0 10px 30px rgba(0, 0, 0, 0.45);\r\n    --focus-ring: 0 0 0 2px rgba(94, 231, 255, 0.55);\r\n    --blur: 10px;\r\n\r\n    --gap-big: 28px;\r\n    --gap-medium: 18px;\r\n    --gap-small: 12px;\r\n    --gap-tiny: 4px;\r\n\r\n    --radius-big: 16px;\r\n    --radius-small: 12px;\r\n    --radius-tiny: 8px;\r\n}\r\n\r\n\r\nbody {\r\n    width: calc(100vw - var(--gap-big) * 2);\r\n    height: calc(100vh - var(--gap-big) * 2);\r\n    overflow: hidden;\r\n\r\n    margin: 0;\r\n    padding: var(--gap-big);\r\n\r\n    background: var(--bg);\r\n    background: var(--bg-gradient);\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    color: var(--text);\r\n    font-family: var(--font-family), sans-serif;\r\n}\r\n\r\n.turbo-icon {\r\n    display: block;\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n}\r\n\r\n.turbo-icon > svg {\r\n    fill: var(--text);\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#canvas {\r\n    position: absolute;\r\n    display: block;\r\n    overflow: visible;\r\n    top: 0;\r\n    left: 0;\r\n    -webkit-backface-visibility: hidden;\r\n    -moz-backface-visibility: hidden;\r\n    backface-visibility: hidden;\r\n}\r\n\r\n#canvas * {\r\n    -webkit-backface-visibility: hidden;\r\n    -moz-backface-visibility: hidden;\r\n    backface-visibility: hidden;\r\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/main.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,4EAA4E;IAC5E,oCAAoC;IACpC,sCAAsC;IACtC,mCAAmC;;IAEnC,uBAAuB;IACvB,gCAAgC;IAChC,kCAAkC;IAClC,sCAAsC;;IAEtC,iBAAiB;IACjB,mBAAmB;IACnB,0BAA0B;;IAE1B,2CAA2C;IAC3C,gDAAgD;IAChD,YAAY;;IAEZ,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;;IAEf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;AACtB;;;AAGA;IACI,uCAAuC;IACvC,wCAAwC;IACxC,gBAAgB;;IAEhB,SAAS;IACT,uBAAuB;;IAEvB,qBAAqB;IACrB,8BAA8B;AAClC;;AAEA;IACI,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB,2CAA2C;AAC/C;;AAEA;IACI,cAAc;IACd,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,iBAAiB;IACjB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,iBAAiB;IACjB,MAAM;IACN,OAAO;IACP,mCAAmC;IACnC,gCAAgC;IAChC,2BAA2B;AAC/B;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,2BAA2B;AAC/B\",\"sourcesContent\":[\":root {\\r\\n    --bg: #01163b;\\r\\n    --bg-gradient: linear-gradient(51deg, #01163b 0%, #440a61 50%, #4d0527 100%);\\r\\n    --surface: rgba(255, 255, 255, 0.07);\\r\\n    --surface-2: rgba(255, 255, 255, 0.03);\\r\\n    --border: rgba(255, 255, 255, 0.14);\\r\\n\\r\\n    --font-family: \\\"Roboto\\\";\\r\\n    --text: rgba(220, 232, 255, 0.9);\\r\\n    --text-2: rgba(234, 242, 255, 0.8);\\r\\n    --text-muted: rgba(212, 224, 244, 0.6);\\r\\n\\r\\n    --accent: #ff6bd6;\\r\\n    --accent-2: #5ee7ff;\\r\\n    --accent-contrast: #0b0f1e;\\r\\n\\r\\n    --shadow-1: 0 10px 30px rgba(0, 0, 0, 0.45);\\r\\n    --focus-ring: 0 0 0 2px rgba(94, 231, 255, 0.55);\\r\\n    --blur: 10px;\\r\\n\\r\\n    --gap-big: 28px;\\r\\n    --gap-medium: 18px;\\r\\n    --gap-small: 12px;\\r\\n    --gap-tiny: 4px;\\r\\n\\r\\n    --radius-big: 16px;\\r\\n    --radius-small: 12px;\\r\\n    --radius-tiny: 8px;\\r\\n}\\r\\n\\r\\n\\r\\nbody {\\r\\n    width: calc(100vw - var(--gap-big) * 2);\\r\\n    height: calc(100vh - var(--gap-big) * 2);\\r\\n    overflow: hidden;\\r\\n\\r\\n    margin: 0;\\r\\n    padding: var(--gap-big);\\r\\n\\r\\n    background: var(--bg);\\r\\n    background: var(--bg-gradient);\\r\\n}\\r\\n\\r\\n* {\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    color: var(--text);\\r\\n    font-family: var(--font-family), sans-serif;\\r\\n}\\r\\n\\r\\n.turbo-icon {\\r\\n    display: block;\\r\\n    width: 1.5rem;\\r\\n    height: 1.5rem;\\r\\n}\\r\\n\\r\\n.turbo-icon > svg {\\r\\n    fill: var(--text);\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n#canvas {\\r\\n    position: absolute;\\r\\n    display: block;\\r\\n    overflow: visible;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    -webkit-backface-visibility: hidden;\\r\\n    -moz-backface-visibility: hidden;\\r\\n    backface-visibility: hidden;\\r\\n}\\r\\n\\r\\n#canvas * {\\r\\n    -webkit-backface-visibility: hidden;\\r\\n    -moz-backface-visibility: hidden;\\r\\n    backface-visibility: hidden;\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `turbo-playlist {\r\n    position: absolute;\r\n}\r\n\r\nturbo-playlist > .turbo-rich-element {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--gap-tiny);\r\n    align-items: center;\r\n}\r\n\r\nturbo-playlist > .turbo-rich-element .turbo-icon {\r\n    width: 56px;\r\n    height: 56px;\r\n    border-radius: var(--radius-small);\r\n    overflow: hidden;\r\n}\r\n\r\nturbo-playlist > .turbo-rich-element > * {\r\n    text-wrap: nowrap;\r\n}\r\n\r\nturbo-playlist > .turbo-drawer {\r\n    position: absolute;\r\n    min-width: 300px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n}\r\n\r\nturbo-playlist * {\r\n    transition: all 0.05s ease-in-out;\r\n}\r\n\r\nturbo-playlist > .turbo-drawer .turbo-drawer-panel {\r\n    padding: var(--gap-medium);\r\n    border-radius: var(--radius-small);\r\n\r\n    background-color: var(--surface-2);\r\n    border: 1px solid var(--border);\r\n    height: 300px;\r\n\r\n    overflow: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--gap-small);\r\n}\r\n\r\nturbo-playlist .empty-playlist-placeholder {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--gap-medium);\r\n\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    padding: var(--gap-medium);\r\n}\r\n\r\nturbo-playlist .empty-playlist-placeholder .turbo-icon {\r\n    width: 32px;\r\n    height: 32px;\r\n}\r\n\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/playlist/playlist.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kCAAkC;IAClC,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,SAAS;IACT,2BAA2B;AAC/B;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,0BAA0B;IAC1B,kCAAkC;;IAElC,kCAAkC;IAClC,+BAA+B;IAC/B,aAAa;;IAEb,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,sBAAsB;;IAEtB,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,0BAA0B;AAC9B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB\",\"sourcesContent\":[\"turbo-playlist {\\r\\n    position: absolute;\\r\\n}\\r\\n\\r\\nturbo-playlist > .turbo-rich-element {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: var(--gap-tiny);\\r\\n    align-items: center;\\r\\n}\\r\\n\\r\\nturbo-playlist > .turbo-rich-element .turbo-icon {\\r\\n    width: 56px;\\r\\n    height: 56px;\\r\\n    border-radius: var(--radius-small);\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\nturbo-playlist > .turbo-rich-element > * {\\r\\n    text-wrap: nowrap;\\r\\n}\\r\\n\\r\\nturbo-playlist > .turbo-drawer {\\r\\n    position: absolute;\\r\\n    min-width: 300px;\\r\\n    left: 50%;\\r\\n    transform: translateX(-50%);\\r\\n}\\r\\n\\r\\nturbo-playlist * {\\r\\n    transition: all 0.05s ease-in-out;\\r\\n}\\r\\n\\r\\nturbo-playlist > .turbo-drawer .turbo-drawer-panel {\\r\\n    padding: var(--gap-medium);\\r\\n    border-radius: var(--radius-small);\\r\\n\\r\\n    background-color: var(--surface-2);\\r\\n    border: 1px solid var(--border);\\r\\n    height: 300px;\\r\\n\\r\\n    overflow: auto;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: var(--gap-small);\\r\\n}\\r\\n\\r\\nturbo-playlist .empty-playlist-placeholder {\\r\\n    flex-grow: 1;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: var(--gap-medium);\\r\\n\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    text-align: center;\\r\\n    padding: var(--gap-medium);\\r\\n}\\r\\n\\r\\nturbo-playlist .empty-playlist-placeholder .turbo-icon {\\r\\n    width: 32px;\\r\\n    height: 32px;\\r\\n}\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `::-webkit-scrollbar {\r\n    width: 10px;\r\n    height: 10px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n    background: var(--surface);\r\n    border-radius: 1000px;\r\n}\r\n\r\n::-webkit-scrollbar-button {\r\n    display: none;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background: var(--accent-2);\r\n    border-radius: 1000px;\r\n    border: 2px solid var(--surface);\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: var(--accent);\r\n}\r\n\r\n::-webkit-scrollbar-corner {\r\n    background: var(--surface);\r\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/scrollbar.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,0BAA0B;IAC1B,qBAAqB;AACzB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,qBAAqB;IACrB,gCAAgC;AACpC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,0BAA0B;AAC9B\",\"sourcesContent\":[\"::-webkit-scrollbar {\\r\\n    width: 10px;\\r\\n    height: 10px;\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar-track {\\r\\n    background: var(--surface);\\r\\n    border-radius: 1000px;\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar-button {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar-thumb {\\r\\n    background: var(--accent-2);\\r\\n    border-radius: 1000px;\\r\\n    border: 2px solid var(--surface);\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar-thumb:hover {\\r\\n    background: var(--accent);\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar-corner {\\r\\n    background: var(--surface);\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `turbo-song {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    gap: var(--gap-small);\r\n    padding: var(--gap-small);\r\n\r\n    background-color: var(--surface);\r\n    border-radius: var(--radius-small);\r\n    border: 1px solid var(--border);\r\n}\r\n\r\nturbo-song .song-cover {\r\n    width: 54px;\r\n    height: 54px;\r\n    border-radius: var(--radius-tiny);\r\n}\r\n\r\nturbo-song > :nth-child(2) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--gap-tiny);\r\n}\r\n\r\nturbo-song .song-artist {\r\n    font-weight: normal;\r\n    color: var(--text-2);\r\n}\r\n\r\nturbo-song .song-duration {\r\n    color: var(--text-muted);\r\n    font-weight: normal;\r\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/song/song.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;IACrB,yBAAyB;;IAEzB,gCAAgC;IAChC,kCAAkC;IAClC,+BAA+B;AACnC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,oBAAoB;AACxB;;AAEA;IACI,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,wBAAwB;IACxB,mBAAmB;AACvB\",\"sourcesContent\":[\"turbo-song {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    align-items: center;\\r\\n    gap: var(--gap-small);\\r\\n    padding: var(--gap-small);\\r\\n\\r\\n    background-color: var(--surface);\\r\\n    border-radius: var(--radius-small);\\r\\n    border: 1px solid var(--border);\\r\\n}\\r\\n\\r\\nturbo-song .song-cover {\\r\\n    width: 54px;\\r\\n    height: 54px;\\r\\n    border-radius: var(--radius-tiny);\\r\\n}\\r\\n\\r\\nturbo-song > :nth-child(2) {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: var(--gap-tiny);\\r\\n}\\r\\n\\r\\nturbo-song .song-artist {\\r\\n    font-weight: normal;\\r\\n    color: var(--text-2);\\r\\n}\\r\\n\\r\\nturbo-song .song-duration {\\r\\n    color: var(--text-muted);\\r\\n    font-weight: normal;\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `turbo-songs-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--gap-big);\r\n    padding: var(--gap-big);\r\n    border-radius: var(--radius-big);\r\n\r\n    width: 40vw;\r\n    min-width: 300px;\r\n    max-width: 550px;\r\n    height: calc(100% - 2 * var(--gap-big));\r\n\r\n    background-color: var(--surface-2);\r\n    border: 1px solid var(--border);\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\nturbo-songs-panel > .turbo-rich-element {\r\n    background-color: var(--surface);\r\n    border-radius: 1000px;\r\n    border: 1px solid var(--border);\r\n}\r\n\r\nturbo-songs-panel > .turbo-rich-element > div {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: var(--gap-medium);\r\n    padding: var(--gap-small) calc(1.5 * var(--gap-small));\r\n}\r\n\r\nturbo-songs-panel > .turbo-rich-element input {\r\n    flex-grow: 1;\r\n    background-color: transparent;\r\n    border: none;\r\n}\r\n\r\nturbo-songs-panel > .songs-panel-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: auto;\r\n    gap: var(--gap-medium);\r\n    padding-inline-end: var(--gap-small);\r\n}\r\n\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/songsPanel/songsPanel.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,gCAAgC;;IAEhC,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,uCAAuC;;IAEvC,kCAAkC;IAClC,+BAA+B;IAC/B,2BAA2B;AAC/B;;AAEA;IACI,gCAAgC;IAChC,qBAAqB;IACrB,+BAA+B;AACnC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,sDAAsD;AAC1D;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,cAAc;IACd,sBAAsB;IACtB,oCAAoC;AACxC\",\"sourcesContent\":[\"turbo-songs-panel {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: var(--gap-big);\\r\\n    padding: var(--gap-big);\\r\\n    border-radius: var(--radius-big);\\r\\n\\r\\n    width: 40vw;\\r\\n    min-width: 300px;\\r\\n    max-width: 550px;\\r\\n    height: calc(100% - 2 * var(--gap-big));\\r\\n\\r\\n    background-color: var(--surface-2);\\r\\n    border: 1px solid var(--border);\\r\\n    backdrop-filter: blur(10px);\\r\\n}\\r\\n\\r\\nturbo-songs-panel > .turbo-rich-element {\\r\\n    background-color: var(--surface);\\r\\n    border-radius: 1000px;\\r\\n    border: 1px solid var(--border);\\r\\n}\\r\\n\\r\\nturbo-songs-panel > .turbo-rich-element > div {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    gap: var(--gap-medium);\\r\\n    padding: var(--gap-small) calc(1.5 * var(--gap-small));\\r\\n}\\r\\n\\r\\nturbo-songs-panel > .turbo-rich-element input {\\r\\n    flex-grow: 1;\\r\\n    background-color: transparent;\\r\\n    border: none;\\r\\n}\\r\\n\\r\\nturbo-songs-panel > .songs-panel-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    overflow: auto;\\r\\n    gap: var(--gap-medium);\\r\\n    padding-inline-end: var(--gap-small);\\r\\n}\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `turbo-toolbar {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: var(--gap-small);\r\n    padding: var(--gap-small);\r\n    border-radius: var(--radius-small);\r\n\r\n    background-color: var(--surface-2);\r\n    border: 1px solid var(--border);\r\n\r\n    position: absolute;\r\n    top: var(--gap-big);\r\n    right: var(--gap-big);\r\n    backdrop-filter: blur(10px);\r\n}\r\n\r\nturbo-toolbar > * {\r\n    padding: var(--gap-tiny);\r\n    border-radius: var(--radius-tiny);\r\n    transition: all 0.1s ease-in-out;\r\n}\r\n\r\nturbo-toolbar > *:hover, turbo-toolbar > .selected:hover {\r\n    scale: 1.2;\r\n}\r\n\r\nturbo-toolbar > .selected {\r\n    background-color: var(--surface);\r\n    scale: 1.1;\r\n}\r\n\r\nturbo-toolbar svg {\r\n    fill: white;\r\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/toolbar/toolbar.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,yBAAyB;IACzB,kCAAkC;;IAElC,kCAAkC;IAClC,+BAA+B;;IAE/B,kBAAkB;IAClB,mBAAmB;IACnB,qBAAqB;IACrB,2BAA2B;AAC/B;;AAEA;IACI,wBAAwB;IACxB,iCAAiC;IACjC,gCAAgC;AACpC;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,gCAAgC;IAChC,UAAU;AACd;;AAEA;IACI,WAAW;AACf\",\"sourcesContent\":[\"turbo-toolbar {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    gap: var(--gap-small);\\r\\n    padding: var(--gap-small);\\r\\n    border-radius: var(--radius-small);\\r\\n\\r\\n    background-color: var(--surface-2);\\r\\n    border: 1px solid var(--border);\\r\\n\\r\\n    position: absolute;\\r\\n    top: var(--gap-big);\\r\\n    right: var(--gap-big);\\r\\n    backdrop-filter: blur(10px);\\r\\n}\\r\\n\\r\\nturbo-toolbar > * {\\r\\n    padding: var(--gap-tiny);\\r\\n    border-radius: var(--radius-tiny);\\r\\n    transition: all 0.1s ease-in-out;\\r\\n}\\r\\n\\r\\nturbo-toolbar > *:hover, turbo-toolbar > .selected:hover {\\r\\n    scale: 1.2;\\r\\n}\\r\\n\\r\\nturbo-toolbar > .selected {\\r\\n    background-color: var(--surface);\\r\\n    scale: 1.1;\\r\\n}\\r\\n\\r\\nturbo-toolbar svg {\\r\\n    fill: white;\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class DataHandler {\n    static fetchData(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield fetch(url);\n            if (!res.ok)\n                throw new Error(`HTTP ${res.status}`);\n            return res.json();\n        });\n    }\n    static getSongs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.songsData)\n                this.songsData = yield this.fetchData(this.songsPath);\n            return this.songsData;\n        });\n    }\n    static getSong(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getSongs()).find(entry => entry.id === id);\n        });\n    }\n}\nDataHandler.songsPath = \"./data/songs.json\";\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!./main.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!./main.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./playlist.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./playlist.css\";\n       export default content && content.locals ? content.locals : undefined;\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nimport { modelSignal, TurboModel } from \"../../../../build/turbodombuilder.esm\";\nlet PlaylistModel = (() => {\n    var _a;\n    let _classSuper = TurboModel;\n    let _name_decorators;\n    let _name_initializers = [];\n    let _name_extraInitializers = [];\n    let _color_decorators;\n    let _color_initializers = [];\n    let _color_extraInitializers = [];\n    let _songs_decorators;\n    let _songs_initializers = [];\n    let _songs_extraInitializers = [];\n    let _origin_decorators;\n    let _origin_initializers = [];\n    let _origin_extraInitializers = [];\n    return _a = class PlaylistModel extends _classSuper {\n            constructor() {\n                super(...arguments);\n                this.name = __runInitializers(this, _name_initializers, void 0);\n                this.color = (__runInitializers(this, _name_extraInitializers), __runInitializers(this, _color_initializers, void 0));\n                this.songs = (__runInitializers(this, _color_extraInitializers), __runInitializers(this, _songs_initializers, void 0));\n                this.origin = (__runInitializers(this, _songs_extraInitializers), __runInitializers(this, _origin_initializers, void 0));\n                __runInitializers(this, _origin_extraInitializers);\n            }\n        },\n        (() => {\n            var _b;\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;\n            _name_decorators = [modelSignal(\"name\")];\n            _color_decorators = [modelSignal(\"color\")];\n            _songs_decorators = [modelSignal(\"songs\")];\n            _origin_decorators = [modelSignal(\"origin\")];\n            __esDecorate(null, null, _name_decorators, { kind: \"field\", name: \"name\", static: false, private: false, access: { has: obj => \"name\" in obj, get: obj => obj.name, set: (obj, value) => { obj.name = value; } }, metadata: _metadata }, _name_initializers, _name_extraInitializers);\n            __esDecorate(null, null, _color_decorators, { kind: \"field\", name: \"color\", static: false, private: false, access: { has: obj => \"color\" in obj, get: obj => obj.color, set: (obj, value) => { obj.color = value; } }, metadata: _metadata }, _color_initializers, _color_extraInitializers);\n            __esDecorate(null, null, _songs_decorators, { kind: \"field\", name: \"songs\", static: false, private: false, access: { has: obj => \"songs\" in obj, get: obj => obj.songs, set: (obj, value) => { obj.songs = value; } }, metadata: _metadata }, _songs_initializers, _songs_extraInitializers);\n            __esDecorate(null, null, _origin_decorators, { kind: \"field\", name: \"origin\", static: false, private: false, access: { has: obj => \"origin\" in obj, get: obj => obj.origin, set: (obj, value) => { obj.origin = value; } }, metadata: _metadata }, _origin_initializers, _origin_extraInitializers);\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        })(),\n        _a;\n})();\nexport { PlaylistModel };\n","import { TurboSubstrate } from \"../../../../build/turbodombuilder.esm\";\nexport class PlaylistSubstrate extends TurboSubstrate {\n    constructor() {\n        super(...arguments);\n        this.keyName = \"substrate\";\n        this.substrateName = \"playlist\";\n    }\n    testAddingSong(song) {\n        return !this.model.songs.find(entry => entry === song.id);\n    }\n}\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nimport { define, element, expose, isUndefined, TurboElement, substrate } from \"../../../../build/turbodombuilder.esm\";\nimport { PlaylistView } from \"./playlist.view\";\nimport { PlaylistModel } from \"./playlist.model\";\nimport \"./playlist.css\";\nimport { PlaylistSubstrate } from \"./playlist.substrate\";\nlet Playlist = (() => {\n    let _classDecorators = [define(\"turbo-playlist\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _origin_decorators;\n    let _origin_initializers = [];\n    let _origin_extraInitializers = [];\n    let _substrate_decorators;\n    let _substrate_initializers = [];\n    let _substrate_extraInitializers = [];\n    var Playlist = _classThis = class extends _classSuper {\n        addSong(song, yCoordinate) {\n            if (!this.substrate.testAddingSong(song))\n                return;\n            const targetIndex = this.getSongIndexFromCoordinate(yCoordinate);\n            if (!isUndefined(targetIndex))\n                this.model.songs.splice(targetIndex, 0, song.id);\n            else\n                this.model.songs.push(song.id);\n            this.view.updateSongs();\n        }\n        removeSong(song) {\n            const id = this.model.songs.indexOf(song.id);\n            if (id >= 0)\n                this.model.songs.splice(id, 1);\n            this.view.updateSongs();\n        }\n        getSongIndexFromCoordinate(yCoordinate) {\n            let smallestY = Infinity;\n            let targetIndex;\n            this.view.songElements.forEach((entry, index) => {\n                const rect = entry.getBoundingClientRect();\n                if (rect.top < smallestY && rect.top > yCoordinate) {\n                    smallestY = rect.top;\n                    targetIndex = index;\n                }\n            });\n            return targetIndex;\n        }\n        delete() {\n            this.remove();\n        }\n        constructor() {\n            super(...arguments);\n            this.origin = __runInitializers(this, _origin_initializers, void 0);\n            this.substrate = (__runInitializers(this, _origin_extraInitializers), __runInitializers(this, _substrate_initializers, void 0));\n            __runInitializers(this, _substrate_extraInitializers);\n        }\n    };\n    __setFunctionName(_classThis, \"Playlist\");\n    (() => {\n        var _a;\n        const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;\n        _origin_decorators = [expose(\"model\")];\n        _substrate_decorators = [substrate(\"substrate\")];\n        __esDecorate(null, null, _origin_decorators, { kind: \"field\", name: \"origin\", static: false, private: false, access: { has: obj => \"origin\" in obj, get: obj => obj.origin, set: (obj, value) => { obj.origin = value; } }, metadata: _metadata }, _origin_initializers, _origin_extraInitializers);\n        __esDecorate(null, null, _substrate_decorators, { kind: \"field\", name: \"substrate\", static: false, private: false, access: { has: obj => \"substrate\" in obj, get: obj => obj.substrate, set: (obj, value) => { obj.substrate = value; } }, metadata: _metadata }, _substrate_initializers, _substrate_extraInitializers);\n        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n        Playlist = _classThis = _classDescriptor.value;\n        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    return Playlist = _classThis;\n})();\nexport { Playlist };\nexport function playlist(properties = {}) {\n    if (!properties.tag)\n        properties.tag = \"turbo-playlist\";\n    if (!properties.view)\n        properties.view = PlaylistView;\n    if (!properties.model)\n        properties.model = PlaylistModel;\n    if (!properties.substrates)\n        properties.substrates = PlaylistSubstrate;\n    return element(properties);\n}\n","var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nimport { css, DefaultEventName, drawer, effect, richElement, Side, turbo, TurboView } from \"../../../../build/turbodombuilder.esm\";\nimport { song } from \"../song/song\";\nimport { DataHandler } from \"../dataHandler\";\nlet PlaylistView = (() => {\n    var _a;\n    let _classSuper = TurboView;\n    let _instanceExtraInitializers = [];\n    let _updateColor_decorators;\n    let _updateName_decorators;\n    let _updatePosition_decorators;\n    let _updateSongs_decorators;\n    return _a = class PlaylistView extends _classSuper {\n            constructor() {\n                super(...arguments);\n                this.drawer = __runInitializers(this, _instanceExtraInitializers);\n                this.songElements = [];\n            }\n            setupUIElements() {\n                super.setupUIElements();\n                this.drawer = drawer({ side: Side.bottom, hideOverflow: true, offset: { open: 20 } });\n                this.toggle = richElement({ leftIcon: \"album-cover\" });\n                this.emptyDrawer = richElement({\n                    classes: \"empty-playlist-placeholder\",\n                    leftIcon: \"add-song\",\n                    text: \"Drag and drop songs here to add them to the playlist.\"\n                });\n            }\n            setupUILayout() {\n                super.setupUILayout();\n                turbo(this).addChild([this.toggle, this.drawer]);\n                this.drawer.thumb.style.display = \"none\";\n            }\n            setupUIListeners() {\n                super.setupUIListeners();\n                turbo(this).on(DefaultEventName.click, () => {\n                    this.drawer.open = !this.drawer.open;\n                    return true;\n                });\n            }\n            updateColor() {\n                this.toggle.leftIcon.style.fill = this.model.color;\n            }\n            updateName() {\n                const newEl = !this.toggle.element;\n                this.toggle.element = this.model.name;\n                if (newEl) {\n                    this.toggle.element.contentEditable = \"true\";\n                    turbo(this.toggle.element).bypassManagerOn = () => true;\n                    turbo(this.toggle.element).on(DefaultEventName.click, () => {\n                        this.toggle.element.focus();\n                        return true;\n                    });\n                }\n            }\n            updatePosition() {\n                turbo(this).setStyle(\"transform\", css `translate(\r\n            calc(${this.model.origin.x}px - 50%), \r\n            calc(${this.model.origin.y}px - 50%)\r\n        )`);\n            }\n            updateSongs() {\n                if (!this.model.songs || !this.model.songs.length) {\n                    turbo(this.drawer.panel).removeAllChildren().addChild(this.emptyDrawer);\n                    return;\n                }\n                turbo(this.drawer.panel).removeAllChildren();\n                this.songElements = [];\n                this.model.songs.forEach(id => DataHandler.getSong(id).then(data => this.songElements.push(song({ data, parent: this.drawer }))));\n            }\n        },\n        (() => {\n            var _b;\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;\n            _updateColor_decorators = [effect];\n            _updateName_decorators = [effect];\n            _updatePosition_decorators = [effect];\n            _updateSongs_decorators = [effect];\n            __esDecorate(_a, null, _updateColor_decorators, { kind: \"method\", name: \"updateColor\", static: false, private: false, access: { has: obj => \"updateColor\" in obj, get: obj => obj.updateColor }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updateName_decorators, { kind: \"method\", name: \"updateName\", static: false, private: false, access: { has: obj => \"updateName\" in obj, get: obj => obj.updateName }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updatePosition_decorators, { kind: \"method\", name: \"updatePosition\", static: false, private: false, access: { has: obj => \"updatePosition\" in obj, get: obj => obj.updatePosition }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updateSongs_decorators, { kind: \"method\", name: \"updateSongs\", static: false, private: false, access: { has: obj => \"updateSongs\" in obj, get: obj => obj.updateSongs }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        })(),\n        _a;\n})();\nexport { PlaylistView };\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!./scrollbar.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!./scrollbar.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./song.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./song.css\";\n       export default content && content.locals ? content.locals : undefined;\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nimport { modelSignal, signal, TurboModel } from \"../../../../build/turbodombuilder.esm\";\nlet SongModel = (() => {\n    var _a;\n    let _classSuper = TurboModel;\n    let _id_decorators;\n    let _id_initializers = [];\n    let _id_extraInitializers = [];\n    let _title_decorators;\n    let _title_initializers = [];\n    let _title_extraInitializers = [];\n    let _artist_decorators;\n    let _artist_initializers = [];\n    let _artist_extraInitializers = [];\n    let _album_decorators;\n    let _album_initializers = [];\n    let _album_extraInitializers = [];\n    let _cover_decorators;\n    let _cover_initializers = [];\n    let _cover_extraInitializers = [];\n    let _duration_decorators;\n    let _duration_initializers = [];\n    let _duration_extraInitializers = [];\n    let _state_decorators;\n    let _state_initializers = [];\n    let _state_extraInitializers = [];\n    return _a = class SongModel extends _classSuper {\n            constructor() {\n                super(...arguments);\n                this.id = __runInitializers(this, _id_initializers, void 0);\n                this.title = (__runInitializers(this, _id_extraInitializers), __runInitializers(this, _title_initializers, void 0));\n                this.artist = (__runInitializers(this, _title_extraInitializers), __runInitializers(this, _artist_initializers, void 0));\n                this.album = (__runInitializers(this, _artist_extraInitializers), __runInitializers(this, _album_initializers, void 0));\n                this.cover = (__runInitializers(this, _album_extraInitializers), __runInitializers(this, _cover_initializers, void 0));\n                this.duration = (__runInitializers(this, _cover_extraInitializers), __runInitializers(this, _duration_initializers, void 0));\n                this.state = (__runInitializers(this, _duration_extraInitializers), __runInitializers(this, _state_initializers, void 0));\n                __runInitializers(this, _state_extraInitializers);\n            }\n        },\n        (() => {\n            var _b;\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;\n            _id_decorators = [modelSignal(\"id\")];\n            _title_decorators = [modelSignal(\"title\")];\n            _artist_decorators = [modelSignal(\"artist\")];\n            _album_decorators = [modelSignal(\"album\")];\n            _cover_decorators = [modelSignal(\"cover\")];\n            _duration_decorators = [modelSignal(\"duration\")];\n            _state_decorators = [signal];\n            __esDecorate(null, null, _id_decorators, { kind: \"field\", name: \"id\", static: false, private: false, access: { has: obj => \"id\" in obj, get: obj => obj.id, set: (obj, value) => { obj.id = value; } }, metadata: _metadata }, _id_initializers, _id_extraInitializers);\n            __esDecorate(null, null, _title_decorators, { kind: \"field\", name: \"title\", static: false, private: false, access: { has: obj => \"title\" in obj, get: obj => obj.title, set: (obj, value) => { obj.title = value; } }, metadata: _metadata }, _title_initializers, _title_extraInitializers);\n            __esDecorate(null, null, _artist_decorators, { kind: \"field\", name: \"artist\", static: false, private: false, access: { has: obj => \"artist\" in obj, get: obj => obj.artist, set: (obj, value) => { obj.artist = value; } }, metadata: _metadata }, _artist_initializers, _artist_extraInitializers);\n            __esDecorate(null, null, _album_decorators, { kind: \"field\", name: \"album\", static: false, private: false, access: { has: obj => \"album\" in obj, get: obj => obj.album, set: (obj, value) => { obj.album = value; } }, metadata: _metadata }, _album_initializers, _album_extraInitializers);\n            __esDecorate(null, null, _cover_decorators, { kind: \"field\", name: \"cover\", static: false, private: false, access: { has: obj => \"cover\" in obj, get: obj => obj.cover, set: (obj, value) => { obj.cover = value; } }, metadata: _metadata }, _cover_initializers, _cover_extraInitializers);\n            __esDecorate(null, null, _duration_decorators, { kind: \"field\", name: \"duration\", static: false, private: false, access: { has: obj => \"duration\" in obj, get: obj => obj.duration, set: (obj, value) => { obj.duration = value; } }, metadata: _metadata }, _duration_initializers, _duration_extraInitializers);\n            __esDecorate(null, null, _state_decorators, { kind: \"field\", name: \"state\", static: false, private: false, access: { has: obj => \"state\" in obj, get: obj => obj.state, set: (obj, value) => { obj.state = value; } }, metadata: _metadata }, _state_initializers, _state_extraInitializers);\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        })(),\n        _a;\n})();\nexport { SongModel };\n","import { ClosestOrigin, turbo, TurboInteractor } from \"../../../../build/turbodombuilder.esm\";\nimport { SongState } from \"./song.types\";\nimport { Playlist } from \"../playlist/playlist\";\nexport class SongMoveInteractor extends TurboInteractor {\n    constructor() {\n        super(...arguments);\n        this.toolName = \"select\";\n    }\n    get originParent() {\n        let parent = this.element.parentElement;\n        while (parent && parent !== document.body && !(parent instanceof Playlist))\n            parent = parent.parentElement;\n        return parent instanceof Playlist ? parent : null;\n    }\n    dragStart(e) {\n        this.clone = this.element.cloneNode(true);\n        const computedStyle = this.element.getBoundingClientRect();\n        this.clonePosition = { x: computedStyle.left, y: computedStyle.top };\n        turbo(this.clone).setStyles({ position: \"absolute\", top: 0, left: 0 }).addToParent(document.body);\n        this.updatePosition();\n        this.model.state = SongState.moving;\n        return true;\n    }\n    drag(e) {\n        this.updatePosition(e.scaledDeltaPosition);\n        return true;\n    }\n    dragEnd(e) {\n        var _a;\n        this.clonePosition = undefined;\n        this.clone.remove();\n        this.clone = undefined;\n        this.model.state = SongState.default;\n        const targetPlaylist = e.closest(Playlist, false, ClosestOrigin.position);\n        if (!targetPlaylist)\n            return true;\n        (_a = this.originParent) === null || _a === void 0 ? void 0 : _a.removeSong(this.element);\n        targetPlaylist.addSong(this.element, e.scaledPosition.y);\n        return true;\n    }\n    updatePosition(delta = { x: 0, y: 0 }) {\n        this.clonePosition = { x: this.clonePosition.x + delta.x, y: this.clonePosition.y + delta.y };\n        if (this.clone)\n            turbo(this.clone).setStyle(\"transform\", `translate(${this.clonePosition.x}px, ${this.clonePosition.y}px)`);\n    }\n}\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nimport { define, element, expose, TurboElement } from \"../../../../build/turbodombuilder.esm\";\nimport { SongView } from \"./song.view\";\nimport { SongModel } from \"./song.model\";\nimport \"./song.css\";\nimport { SongMoveInteractor } from \"./song.moveInteractor\";\nlet Song = (() => {\n    var _Song_id_accessor_storage, _Song_title_accessor_storage, _Song_artist_accessor_storage, _Song_album_accessor_storage;\n    let _classDecorators = [define(\"turbo-song\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    let _id_decorators;\n    let _id_initializers = [];\n    let _id_extraInitializers = [];\n    let _title_decorators;\n    let _title_initializers = [];\n    let _title_extraInitializers = [];\n    let _artist_decorators;\n    let _artist_initializers = [];\n    let _artist_extraInitializers = [];\n    let _album_decorators;\n    let _album_initializers = [];\n    let _album_extraInitializers = [];\n    var Song = _classThis = class extends _classSuper {\n        get id() { return __classPrivateFieldGet(this, _Song_id_accessor_storage, \"f\"); }\n        set id(value) { __classPrivateFieldSet(this, _Song_id_accessor_storage, value, \"f\"); }\n        get title() { return __classPrivateFieldGet(this, _Song_title_accessor_storage, \"f\"); }\n        set title(value) { __classPrivateFieldSet(this, _Song_title_accessor_storage, value, \"f\"); }\n        get artist() { return __classPrivateFieldGet(this, _Song_artist_accessor_storage, \"f\"); }\n        set artist(value) { __classPrivateFieldSet(this, _Song_artist_accessor_storage, value, \"f\"); }\n        get album() { return __classPrivateFieldGet(this, _Song_album_accessor_storage, \"f\"); }\n        set album(value) { __classPrivateFieldSet(this, _Song_album_accessor_storage, value, \"f\"); }\n        isSong(id) {\n            return id === this.model.id;\n        }\n        delete() {\n            this.remove();\n        }\n        constructor() {\n            super(...arguments);\n            _Song_id_accessor_storage.set(this, __runInitializers(this, _id_initializers, void 0));\n            _Song_title_accessor_storage.set(this, (__runInitializers(this, _id_extraInitializers), __runInitializers(this, _title_initializers, void 0)));\n            _Song_artist_accessor_storage.set(this, (__runInitializers(this, _title_extraInitializers), __runInitializers(this, _artist_initializers, void 0)));\n            _Song_album_accessor_storage.set(this, (__runInitializers(this, _artist_extraInitializers), __runInitializers(this, _album_initializers, void 0)));\n            __runInitializers(this, _album_extraInitializers);\n        }\n    };\n    _Song_id_accessor_storage = new WeakMap();\n    _Song_title_accessor_storage = new WeakMap();\n    _Song_artist_accessor_storage = new WeakMap();\n    _Song_album_accessor_storage = new WeakMap();\n    __setFunctionName(_classThis, \"Song\");\n    (() => {\n        var _a;\n        const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;\n        _id_decorators = [expose(\"model\")];\n        _title_decorators = [expose(\"model\")];\n        _artist_decorators = [expose(\"model\")];\n        _album_decorators = [expose(\"model\")];\n        __esDecorate(_classThis, null, _id_decorators, { kind: \"accessor\", name: \"id\", static: false, private: false, access: { has: obj => \"id\" in obj, get: obj => obj.id, set: (obj, value) => { obj.id = value; } }, metadata: _metadata }, _id_initializers, _id_extraInitializers);\n        __esDecorate(_classThis, null, _title_decorators, { kind: \"accessor\", name: \"title\", static: false, private: false, access: { has: obj => \"title\" in obj, get: obj => obj.title, set: (obj, value) => { obj.title = value; } }, metadata: _metadata }, _title_initializers, _title_extraInitializers);\n        __esDecorate(_classThis, null, _artist_decorators, { kind: \"accessor\", name: \"artist\", static: false, private: false, access: { has: obj => \"artist\" in obj, get: obj => obj.artist, set: (obj, value) => { obj.artist = value; } }, metadata: _metadata }, _artist_initializers, _artist_extraInitializers);\n        __esDecorate(_classThis, null, _album_decorators, { kind: \"accessor\", name: \"album\", static: false, private: false, access: { has: obj => \"album\" in obj, get: obj => obj.album, set: (obj, value) => { obj.album = value; } }, metadata: _metadata }, _album_initializers, _album_extraInitializers);\n        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n        Song = _classThis = _classDescriptor.value;\n        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    return Song = _classThis;\n})();\nexport { Song };\nexport function song(properties = {}) {\n    if (!properties.tag)\n        properties.tag = \"turbo-song\";\n    if (!properties.view)\n        properties.view = SongView;\n    if (!properties.model)\n        properties.model = SongModel;\n    if (!properties.interactors)\n        properties.interactors = [SongMoveInteractor];\n    return element(properties);\n}\n","export var SongState;\n(function (SongState) {\n    SongState[\"default\"] = \"default\";\n    SongState[\"moving\"] = \"moving\";\n})(SongState || (SongState = {}));\n","var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nimport { effect, flexCol, h3, h4, img, spacer, turbo, TurboView } from \"../../../../build/turbodombuilder.esm\";\nimport { SongState } from \"./song.types\";\nlet SongView = (() => {\n    var _a;\n    let _classSuper = TurboView;\n    let _instanceExtraInitializers = [];\n    let _updateCover_decorators;\n    let _updateTitle_decorators;\n    let _updateArtist_decorators;\n    let _updateDuration_decorators;\n    let _stateChange_decorators;\n    return _a = class SongView extends _classSuper {\n            constructor() {\n                super(...arguments);\n                this.cover = __runInitializers(this, _instanceExtraInitializers);\n            }\n            setupUIElements() {\n                super.setupUIElements();\n                this.cover = img({ alt: \"album cover\", classes: \"song-cover\" });\n                this.title = h3({ classes: \"song-title\" });\n                this.artist = h4({ classes: \"song-artist\" });\n                this.duration = h4({ classes: \"song-duration\" });\n            }\n            setupUILayout() {\n                super.setupUILayout();\n                turbo(this).addChild([\n                    this.cover,\n                    flexCol({ children: [this.title, this.artist] }),\n                    spacer(),\n                    this.duration,\n                ]);\n            }\n            updateCover() {\n                let coverUrl = this.model.cover;\n                if (!coverUrl || coverUrl.length === 0)\n                    coverUrl = \"assets/album-cover.svg\";\n                this.cover.src = coverUrl;\n            }\n            updateTitle() {\n                this.title.textContent = this.model.title;\n            }\n            updateArtist() {\n                this.artist.textContent = this.model.artist;\n            }\n            updateDuration() {\n                const duration = Math.floor(this.model.duration / 1000);\n                const minutes = String(Math.floor(duration / 60)).padStart(2, \"0\");\n                const seconds = String(duration % 60).padStart(2, \"0\");\n                this.duration.textContent = `${minutes}:${seconds}`;\n            }\n            stateChange() {\n                turbo(this).setStyle(\"opacity\", this.model.state === SongState.moving ? 0.5 : 1);\n            }\n        },\n        (() => {\n            var _b;\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;\n            _updateCover_decorators = [effect];\n            _updateTitle_decorators = [effect];\n            _updateArtist_decorators = [effect];\n            _updateDuration_decorators = [effect];\n            _stateChange_decorators = [effect];\n            __esDecorate(_a, null, _updateCover_decorators, { kind: \"method\", name: \"updateCover\", static: false, private: false, access: { has: obj => \"updateCover\" in obj, get: obj => obj.updateCover }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updateTitle_decorators, { kind: \"method\", name: \"updateTitle\", static: false, private: false, access: { has: obj => \"updateTitle\" in obj, get: obj => obj.updateTitle }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updateArtist_decorators, { kind: \"method\", name: \"updateArtist\", static: false, private: false, access: { has: obj => \"updateArtist\" in obj, get: obj => obj.updateArtist }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _updateDuration_decorators, { kind: \"method\", name: \"updateDuration\", static: false, private: false, access: { has: obj => \"updateDuration\" in obj, get: obj => obj.updateDuration }, metadata: _metadata }, null, _instanceExtraInitializers);\n            __esDecorate(_a, null, _stateChange_decorators, { kind: \"method\", name: \"stateChange\", static: false, private: false, access: { has: obj => \"stateChange\" in obj, get: obj => obj.stateChange }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        })(),\n        _a;\n})();\nexport { SongView };\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./songsPanel.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./songsPanel.css\";\n       export default content && content.locals ? content.locals : undefined;\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nimport { define, element, TurboElement, TurboModel } from \"../../../../build/turbodombuilder.esm\";\nimport { SongsPanelView } from \"./songsPanel.view\";\nimport \"./songsPanel.css\";\nlet SongsPanel = (() => {\n    let _classDecorators = [define(\"turbo-songs-panel\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    var SongsPanel = _classThis = class extends _classSuper {\n    };\n    __setFunctionName(_classThis, \"SongsPanel\");\n    (() => {\n        var _a;\n        const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;\n        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n        SongsPanel = _classThis = _classDescriptor.value;\n        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    return SongsPanel = _classThis;\n})();\nexport { SongsPanel };\nexport function songsPanel(properties = {}) {\n    if (!properties.tag)\n        properties.tag = \"turbo-songs-panel\";\n    if (!properties.view)\n        properties.view = SongsPanelView;\n    if (!properties.model)\n        properties.model = TurboModel;\n    return element(properties);\n}\n","import { DefaultEventName, div, turbo, turboInput, TurboSelect, TurboView } from \"../../../../build/turbodombuilder.esm\";\nimport { song } from \"../song/song\";\nexport class SongsPanelView extends TurboView {\n    setupUIElements() {\n        super.setupUIElements();\n        this.search = turboInput({ rightIcon: \"search\", input: { type: \"search\", placeholder: \"Search...\" } });\n        this.panel = div({ classes: \"songs-panel-container\" });\n        this.select = new TurboSelect({\n            parent: this.panel,\n            getValue: entry => entry.title,\n            getSecondaryValue: entry => entry.artist,\n            onEnabled: (b, entry) => turbo(entry).setStyle(\"display\", b ? \"\" : \"none\"),\n        });\n        this.model.data\n            .sort((a, b) => a.title.localeCompare(b.title))\n            .forEach(entry => this.select.addEntry(song({ data: entry })));\n    }\n    setupUILayout() {\n        super.setupUILayout();\n        turbo(this).addChild([this.search, this.panel]);\n    }\n    setupUIListeners() {\n        super.setupUIListeners();\n        turbo(this.search).on(DefaultEventName.input, () => {\n            const value = this.search.value.toLowerCase();\n            this.select.entriesArray.forEach(entry => {\n                const enable = entry.title.toLowerCase().includes(value)\n                    || entry.artist.toLowerCase().includes(value)\n                    || entry.album.toLowerCase().includes(value);\n                this.select.enable(enable, entry);\n            });\n        });\n    }\n}\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./toolbar.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./toolbar.css\";\n       export default content && content.locals ? content.locals : undefined;\n","var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nimport \"./toolbar.css\";\nimport { define, element, turbo, TurboElement } from \"../../../../build/turbodombuilder.esm\";\nlet Toolbar = (() => {\n    let _classDecorators = [define(\"turbo-toolbar\")];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    let _classSuper = TurboElement;\n    var Toolbar = _classThis = class extends _classSuper {\n        addTool(tool) {\n            turbo(this).addChild(tool);\n        }\n    };\n    __setFunctionName(_classThis, \"Toolbar\");\n    (() => {\n        var _a;\n        const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;\n        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n        Toolbar = _classThis = _classDescriptor.value;\n        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    return Toolbar = _classThis;\n})();\nexport { Toolbar };\nexport function toolbar(properties) {\n    if (!properties.tag)\n        properties.tag = \"turbo-toolbar\";\n    return element(Object.assign({}, properties));\n}\n","import { TurboTool } from \"../../../../../build/turbodombuilder.esm\";\nexport class DeleteTool extends TurboTool {\n    constructor() {\n        super(...arguments);\n        this.toolName = \"delete\";\n    }\n    click(e, target) {\n        if (\"delete\" in target && typeof target.delete === \"function\") {\n            target.delete();\n            return true;\n        }\n    }\n}\n","import { TurboModel } from \"../../../../../build/turbodombuilder.esm\";\nexport class NewPlaylistModel extends TurboModel {\n}\nNewPlaylistModel.playlistCount = 1;\n","import { ClickMode, randomColor, turbo, TurboTool } from \"../../../../../build/turbodombuilder.esm\";\nimport { NewPlaylistModel } from \"./newPlaylist.model\";\nimport { playlist } from \"../../playlist/playlist\";\nexport class NewPlaylistTool extends TurboTool {\n    constructor() {\n        super(...arguments);\n        this.toolName = \"newPlaylist\";\n        this.clickMode = ClickMode.left;\n    }\n    onActivation() {\n        turbo(this).toggleClass(\"selected\", true);\n    }\n    onDeactivation() {\n        turbo(this).toggleClass(\"selected\", false);\n    }\n    click(e, target) {\n        if (target !== this.model.target && target !== document.body)\n            return;\n        turbo(this.model.target).addChild(playlist({\n            data: {\n                color: randomColor(),\n                name: \"Playlist \" + NewPlaylistModel.playlistCount,\n                songs: [],\n                origin: e.scaledPosition\n            }\n        }));\n        NewPlaylistModel.playlistCount++;\n    }\n}\n","import { turbo, TurboTool } from \"../../../../../build/turbodombuilder.esm\";\nexport class SelectTool extends TurboTool {\n    constructor() {\n        super(...arguments);\n        this.toolName = \"select\";\n    }\n    onActivation() {\n        turbo(this).toggleClass(\"selected\", true);\n    }\n    onDeactivation() {\n        turbo(this).toggleClass(\"selected\", false);\n    }\n    drag(e, target) {\n        if (\"origin\" in target && typeof target.origin === \"object\") {\n            target.origin = e.scaledDeltaPosition.add(target.origin).object;\n            return true;\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","import { songsPanel } from \"./songsPanel/songsPanel\";\nimport { div, icon, TurboEventManager, TurboIcon } from \"../../../build/turbodombuilder.esm\";\nimport \"./main.css\";\nimport \"./scrollbar.css\";\nimport { toolbar } from \"./toolbar/toolbar\";\nimport { NewPlaylistTool } from \"./tools/newPlaylist/newPlaylist.tool\";\nimport { NewPlaylistModel } from \"./tools/newPlaylist/newPlaylist.model\";\nimport { SelectTool } from \"./tools/select/select.tool\";\nimport { DataHandler } from \"./dataHandler\";\nimport { DeleteTool } from \"./tools/delete/delete.tool\";\nTurboIcon.config.defaultDirectory = \"assets\";\nTurboEventManager.instance.preventDefaultWheel = false;\nconst canvasEl = div({ id: \"canvas\", parent: document.body });\nconst toolbarEl = toolbar({ parent: document.body });\ntoolbarEl.addTool(icon({ icon: \"cursor\", tools: SelectTool }));\nconst newPlaylistTool = icon({ icon: \"new-playlist\", tools: NewPlaylistTool, model: NewPlaylistModel });\nnewPlaylistTool.model.target = canvasEl;\ntoolbarEl.addTool(newPlaylistTool);\ntoolbarEl.addTool(icon({ icon: \"trash\", tools: DeleteTool }));\nDataHandler.getSongs().then(data => songsPanel({ data, parent: document.body }));\n"],"names":[],"sourceRoot":""}