import { TurboSelect } from "../../basics/select/select";
import { TurboSelectEntry } from "../../basics/select/selectEntry/selectEntry";
import { TurboSelectProperties } from "../../basics/select/select.types";
import { TurboSelectEntryProperties } from "../../basics/select/selectEntry/selectEntry.types";
import { TurboSelectWheelProperties } from "./selectWheel.types";
import { Range } from "../../../utils/datatypes/basicDatatypes.types";
import { PartialRecord } from "../../../domBuilding/core.types";
declare class TurboSelectWheel<ValueType = string, EntryType extends TurboSelectEntry<ValueType, any> = TurboSelectEntry<ValueType, any>> extends TurboSelect<ValueType, EntryType> {
    private readonly reifect;
    private readonly sizePerEntry;
    private readonly direction;
    set opacity(value: Record<Range, number>);
    scale: Record<Range, number>;
    size: Record<Range, number>;
    openTimeout: number;
    generateCustomStyling: (element: HTMLElement, translationValue: number, size: Record<Range, number>, defaultComputedStyles: PartialRecord<keyof CSSStyleDeclaration, string | number>) => string | PartialRecord<keyof CSSStyleDeclaration, string | number>;
    private dragging;
    private openTimer;
    constructor(properties: TurboSelectWheelProperties<ValueType, EntryType>);
    get isVertical(): boolean;
    set index(value: number);
    private get trimmedIndex();
    private get flooredTrimmedIndex();
    set open(value: boolean);
    private initializeStyleReifect;
    private initEvents;
    private reloadStyles;
    private applyStyling;
    protected onEntryClick(entry: EntryType, e?: Event): void;
    protected addEntry(entry: TurboSelectEntryProperties<ValueType> | ValueType | EntryType): EntryType;
    reset(): void;
    private snapTo;
    private clearOpenTimer;
    private setOpenTimer;
}
declare function selectWheel<ValueType = string, EntryType extends TurboSelectEntry<ValueType> = TurboSelectEntry<ValueType>>(properties: TurboSelectProperties<ValueType, EntryType>): TurboSelectWheel<ValueType, EntryType>;
export { TurboSelectWheel, selectWheel };
